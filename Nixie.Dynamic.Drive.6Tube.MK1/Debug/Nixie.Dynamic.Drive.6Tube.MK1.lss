
Nixie.Dynamic.Drive.6Tube.MK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  00001ba4  00001c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  008002b0  008002b0  00001de8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005510  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021b2  00000000  00000000  0000772c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f5  00000000  00000000  000098de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000089c  00000000  00000000  0000b1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001768  00000000  00000000  0000ba70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002393  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000f56b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
       2:	00 00       	nop
       4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
       6:	00 00       	nop
       8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
       a:	00 00       	nop
       c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
       e:	00 00       	nop
      10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c7       	rjmp	.+3870   	; 0xf34 <__vector_5>
      16:	00 00       	nop
      18:	2f c7       	rjmp	.+3678   	; 0xe78 <__vector_6>
      1a:	00 00       	nop
      1c:	e6 c6       	rjmp	.+3532   	; 0xdea <__vector_7>
      1e:	00 00       	nop
      20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
      22:	00 00       	nop
      24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
      26:	00 00       	nop
      28:	aa c6       	rjmp	.+3412   	; 0xd7e <__vector_10>
      2a:	00 00       	nop
      2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
      32:	00 00       	nop
      34:	54 c0       	rjmp	.+168    	; 0xde <__bad_interrupt>
      36:	00 00       	nop
      38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
      3a:	00 00       	nop
      3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c6       	rjmp	.+3328   	; 0xd42 <__vector_16>
      42:	00 00       	nop
      44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
      46:	00 00       	nop
      48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
      4a:	00 00       	nop
      4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
      4e:	00 00       	nop
      50:	46 c0       	rjmp	.+140    	; 0xde <__bad_interrupt>
      52:	00 00       	nop
      54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
      56:	00 00       	nop
      58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
      5a:	00 00       	nop
      5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
      5e:	00 00       	nop
      60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
      62:	00 00       	nop
      64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
      66:	00 00       	nop
      68:	3a c0       	rjmp	.+116    	; 0xde <__bad_interrupt>
      6a:	00 00       	nop
      6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
      6e:	00 00       	nop
      70:	36 c0       	rjmp	.+108    	; 0xde <__bad_interrupt>
      72:	00 00       	nop
      74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
      76:	00 00       	nop
      78:	d7 c7       	rjmp	.+4014   	; 0x1028 <__vector_30>
      7a:	00 00       	nop
      7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
      7e:	00 00       	nop
      80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
      82:	00 00       	nop
      84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
      86:	00 00       	nop
      88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4d 05       	cpc	r20, r13
      8e:	5b 05       	cpc	r21, r11
      90:	69 05       	cpc	r22, r9
      92:	77 05       	cpc	r23, r7
      94:	85 05       	cpc	r24, r5
      96:	93 05       	cpc	r25, r3
      98:	a1 05       	cpc	r26, r1
      9a:	af 05       	cpc	r26, r15
      9c:	bd 05       	cpc	r27, r13
      9e:	cb 05       	cpc	r28, r11

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d0 e1       	ldi	r29, 0x10	; 16
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	12 e0       	ldi	r17, 0x02	; 2
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e4 ea       	ldi	r30, 0xA4	; 164
      b4:	fb e1       	ldi	r31, 0x1B	; 27
      b6:	00 e0       	ldi	r16, 0x00	; 0
      b8:	0b bf       	out	0x3b, r16	; 59
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x14>
      bc:	07 90       	elpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a0 3b       	cpi	r26, 0xB0	; 176
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0x10>

000000c6 <__do_clear_bss>:
      c6:	23 e0       	ldi	r18, 0x03	; 3
      c8:	a0 eb       	ldi	r26, 0xB0	; 176
      ca:	b2 e0       	ldi	r27, 0x02	; 2
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a4 38       	cpi	r26, 0x84	; 132
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 1b 09 	call	0x1236	; 0x1236 <main>
      da:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <_exit>

000000de <__bad_interrupt>:
      de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <_ZN6absTWI15_sequence_startEv>:
{
	
} //absTWI

// default destructor
absTWI::~absTWI()
      e0:	84 ea       	ldi	r24, 0xA4	; 164
      e2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      e6:	e4 e7       	ldi	r30, 0x74	; 116
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	88 23       	and	r24, r24
      ee:	ec f7       	brge	.-6      	; 0xea <_ZN6absTWI15_sequence_startEv+0xa>
      f0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
      f4:	88 7f       	andi	r24, 0xF8	; 248
      f6:	88 30       	cpi	r24, 0x08	; 8
      f8:	11 f0       	breq	.+4      	; 0xfe <_ZN6absTWI15_sequence_startEv+0x1e>
      fa:	80 31       	cpi	r24, 0x10	; 16
      fc:	19 f4       	brne	.+6      	; 0x104 <_ZN6absTWI15_sequence_startEv+0x24>
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	08 95       	ret
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	9f ef       	ldi	r25, 0xFF	; 255
     108:	08 95       	ret

0000010a <_ZN6absTWI14_sequence_stopEv>:
     10a:	84 e9       	ldi	r24, 0x94	; 148
     10c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	08 95       	ret

00000116 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE>:
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	64 2b       	or	r22, r20
     11c:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     120:	84 e8       	ldi	r24, 0x84	; 132
     122:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     126:	8f e1       	ldi	r24, 0x1F	; 31
     128:	9e e4       	ldi	r25, 0x4E	; 78
     12a:	e4 e7       	ldi	r30, 0x74	; 116
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	02 c0       	rjmp	.+4      	; 0x134 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x1e>
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	90 f0       	brcs	.+36     	; 0x158 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x42>
     134:	20 81       	ld	r18, Z
     136:	22 23       	and	r18, r18
     138:	dc f7       	brge	.-10     	; 0x130 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x1a>
     13a:	18 16       	cp	r1, r24
     13c:	19 06       	cpc	r1, r25
     13e:	7c f4       	brge	.+30     	; 0x15e <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x48>
     140:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     144:	88 7f       	andi	r24, 0xF8	; 248
     146:	88 31       	cpi	r24, 0x18	; 24
     148:	69 f0       	breq	.+26     	; 0x164 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x4e>
     14a:	80 34       	cpi	r24, 0x40	; 64
     14c:	59 f0       	breq	.+22     	; 0x164 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x4e>
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	91 95       	neg	r25
     152:	81 95       	neg	r24
     154:	91 09       	sbc	r25, r1
     156:	08 95       	ret
     158:	8b ef       	ldi	r24, 0xFB	; 251
     15a:	9f ef       	ldi	r25, 0xFF	; 255
     15c:	08 95       	ret
     15e:	8b ef       	ldi	r24, 0xFB	; 251
     160:	9f ef       	ldi	r25, 0xFF	; 255
     162:	08 95       	ret
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret

0000016a <_ZN6absTWI18_sequence_readDataEPhi>:
     16a:	45 2b       	or	r20, r21
     16c:	21 f0       	breq	.+8      	; 0x176 <_ZN6absTWI18_sequence_readDataEPhi+0xc>
     16e:	84 e8       	ldi	r24, 0x84	; 132
     170:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     174:	03 c0       	rjmp	.+6      	; 0x17c <_ZN6absTWI18_sequence_readDataEPhi+0x12>
     176:	84 ec       	ldi	r24, 0xC4	; 196
     178:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     17c:	8f e1       	ldi	r24, 0x1F	; 31
     17e:	9e e4       	ldi	r25, 0x4E	; 78
     180:	e4 e7       	ldi	r30, 0x74	; 116
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	02 c0       	rjmp	.+4      	; 0x18a <_ZN6absTWI18_sequence_readDataEPhi+0x20>
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	c8 f0       	brcs	.+50     	; 0x1bc <_ZN6absTWI18_sequence_readDataEPhi+0x52>
     18a:	20 81       	ld	r18, Z
     18c:	22 23       	and	r18, r18
     18e:	dc f7       	brge	.-10     	; 0x186 <_ZN6absTWI18_sequence_readDataEPhi+0x1c>
     190:	18 16       	cp	r1, r24
     192:	19 06       	cpc	r1, r25
     194:	b4 f4       	brge	.+44     	; 0x1c2 <_ZN6absTWI18_sequence_readDataEPhi+0x58>
     196:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     19a:	88 7f       	andi	r24, 0xF8	; 248
     19c:	80 35       	cpi	r24, 0x50	; 80
     19e:	11 f0       	breq	.+4      	; 0x1a4 <_ZN6absTWI18_sequence_readDataEPhi+0x3a>
     1a0:	88 35       	cpi	r24, 0x58	; 88
     1a2:	39 f4       	brne	.+14     	; 0x1b2 <_ZN6absTWI18_sequence_readDataEPhi+0x48>
     1a4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     1a8:	fb 01       	movw	r30, r22
     1aa:	80 83       	st	Z, r24
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	91 95       	neg	r25
     1b6:	81 95       	neg	r24
     1b8:	91 09       	sbc	r25, r1
     1ba:	08 95       	ret
     1bc:	8b ef       	ldi	r24, 0xFB	; 251
     1be:	9f ef       	ldi	r25, 0xFF	; 255
     1c0:	08 95       	ret
     1c2:	8b ef       	ldi	r24, 0xFB	; 251
     1c4:	9f ef       	ldi	r25, 0xFF	; 255
     1c6:	08 95       	ret

000001c8 <_ZN6absTWI19_sequence_writeDataEh>:
     1c8:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     1cc:	84 e8       	ldi	r24, 0x84	; 132
     1ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     1d2:	e4 e7       	ldi	r30, 0x74	; 116
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	88 23       	and	r24, r24
     1da:	ec f7       	brge	.-6      	; 0x1d6 <_ZN6absTWI19_sequence_writeDataEh+0xe>
     1dc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     1e0:	88 7f       	andi	r24, 0xF8	; 248
     1e2:	88 32       	cpi	r24, 0x28	; 40
     1e4:	29 f0       	breq	.+10     	; 0x1f0 <_ZN6absTWI19_sequence_writeDataEh+0x28>
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	91 95       	neg	r25
     1ea:	81 95       	neg	r24
     1ec:	91 09       	sbc	r25, r1
     1ee:	08 95       	ret
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	08 95       	ret

000001f6 <_ZN6absTWI4readEPhj>:
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__data_end>
     20a:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__data_end+0x1>
     20e:	23 2b       	or	r18, r19
     210:	09 f4       	brne	.+2      	; 0x214 <_ZN6absTWI4readEPhj+0x1e>
     212:	48 c0       	rjmp	.+144    	; 0x2a4 <_ZN6absTWI4readEPhj+0xae>
     214:	fc 01       	movw	r30, r24
     216:	22 81       	ldd	r18, Z+2	; 0x02
     218:	20 38       	cpi	r18, 0x80	; 128
     21a:	09 f4       	brne	.+2      	; 0x21e <_ZN6absTWI4readEPhj+0x28>
     21c:	46 c0       	rjmp	.+140    	; 0x2aa <_ZN6absTWI4readEPhj+0xb4>
     21e:	41 15       	cp	r20, r1
     220:	51 05       	cpc	r21, r1
     222:	09 f4       	brne	.+2      	; 0x226 <_ZN6absTWI4readEPhj+0x30>
     224:	45 c0       	rjmp	.+138    	; 0x2b0 <_ZN6absTWI4readEPhj+0xba>
     226:	6a 01       	movw	r12, r20
     228:	7b 01       	movw	r14, r22
     22a:	ec 01       	movw	r28, r24
     22c:	01 90       	ld	r0, Z+
     22e:	f0 81       	ld	r31, Z
     230:	e0 2d       	mov	r30, r0
     232:	04 80       	ldd	r0, Z+4	; 0x04
     234:	f5 81       	ldd	r31, Z+5	; 0x05
     236:	e0 2d       	mov	r30, r0
     238:	09 95       	icall
     23a:	8c 01       	movw	r16, r24
     23c:	89 2b       	or	r24, r25
     23e:	51 f0       	breq	.+20     	; 0x254 <_ZN6absTWI4readEPhj+0x5e>
     240:	e8 81       	ld	r30, Y
     242:	f9 81       	ldd	r31, Y+1	; 0x01
     244:	06 80       	ldd	r0, Z+6	; 0x06
     246:	f7 81       	ldd	r31, Z+7	; 0x07
     248:	e0 2d       	mov	r30, r0
     24a:	ce 01       	movw	r24, r28
     24c:	09 95       	icall
     24e:	80 2f       	mov	r24, r16
     250:	91 2f       	mov	r25, r17
     252:	30 c0       	rjmp	.+96     	; 0x2b4 <_ZN6absTWI4readEPhj+0xbe>
     254:	6a 81       	ldd	r22, Y+2	; 0x02
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	e8 81       	ld	r30, Y
     25a:	f9 81       	ldd	r31, Y+1	; 0x01
     25c:	00 84       	ldd	r0, Z+8	; 0x08
     25e:	f1 85       	ldd	r31, Z+9	; 0x09
     260:	e0 2d       	mov	r30, r0
     262:	41 e0       	ldi	r20, 0x01	; 1
     264:	ce 01       	movw	r24, r28
     266:	09 95       	icall
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	21 f5       	brne	.+72     	; 0x2b4 <_ZN6absTWI4readEPhj+0xbe>
     26c:	87 01       	movw	r16, r14
     26e:	ec 0c       	add	r14, r12
     270:	fd 1c       	adc	r15, r13
     272:	e8 81       	ld	r30, Y
     274:	f9 81       	ldd	r31, Y+1	; 0x01
     276:	02 84       	ldd	r0, Z+10	; 0x0a
     278:	f3 85       	ldd	r31, Z+11	; 0x0b
     27a:	e0 2d       	mov	r30, r0
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	b8 01       	movw	r22, r16
     282:	ce 01       	movw	r24, r28
     284:	09 95       	icall
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	a9 f4       	brne	.+42     	; 0x2b4 <_ZN6absTWI4readEPhj+0xbe>
     28a:	0f 5f       	subi	r16, 0xFF	; 255
     28c:	1f 4f       	sbci	r17, 0xFF	; 255
     28e:	e0 16       	cp	r14, r16
     290:	f1 06       	cpc	r15, r17
     292:	79 f7       	brne	.-34     	; 0x272 <_ZN6absTWI4readEPhj+0x7c>
     294:	e8 81       	ld	r30, Y
     296:	f9 81       	ldd	r31, Y+1	; 0x01
     298:	06 80       	ldd	r0, Z+6	; 0x06
     29a:	f7 81       	ldd	r31, Z+7	; 0x07
     29c:	e0 2d       	mov	r30, r0
     29e:	ce 01       	movw	r24, r28
     2a0:	09 95       	icall
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <_ZN6absTWI4readEPhj+0xbe>
     2a4:	8c ef       	ldi	r24, 0xFC	; 252
     2a6:	9f ef       	ldi	r25, 0xFF	; 255
     2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <_ZN6absTWI4readEPhj+0xbe>
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	9f ef       	ldi	r25, 0xFF	; 255
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <_ZN6absTWI4readEPhj+0xbe>
     2b0:	88 e3       	ldi	r24, 0x38	; 56
     2b2:	9f ef       	ldi	r25, 0xFF	; 255
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	df 90       	pop	r13
     2c2:	cf 90       	pop	r12
     2c4:	08 95       	ret

000002c6 <_ZN6absTWI5writeEPhj>:
     2c6:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__data_end>
     2ca:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__data_end+0x1>
     2ce:	23 2b       	or	r18, r19
     2d0:	39 f0       	breq	.+14     	; 0x2e0 <_ZN6absTWI5writeEPhj+0x1a>
     2d2:	fc 01       	movw	r30, r24
     2d4:	82 81       	ldd	r24, Z+2	; 0x02
     2d6:	80 38       	cpi	r24, 0x80	; 128
     2d8:	31 f0       	breq	.+12     	; 0x2e6 <_ZN6absTWI5writeEPhj+0x20>
     2da:	8c e9       	ldi	r24, 0x9C	; 156
     2dc:	9f ef       	ldi	r25, 0xFF	; 255
     2de:	08 95       	ret
     2e0:	8c ef       	ldi	r24, 0xFC	; 252
     2e2:	9f ef       	ldi	r25, 0xFF	; 255
     2e4:	08 95       	ret
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	9f ef       	ldi	r25, 0xFF	; 255
     2ea:	08 95       	ret

000002ec <_ZN6absTWIC1Ev>:
     2ec:	2e e2       	ldi	r18, 0x2E	; 46
     2ee:	31 e0       	ldi	r19, 0x01	; 1
     2f0:	fc 01       	movw	r30, r24
     2f2:	31 83       	std	Z+1, r19	; 0x01
     2f4:	20 83       	st	Z, r18
     2f6:	20 e8       	ldi	r18, 0x80	; 128
     2f8:	22 83       	std	Z+2, r18	; 0x02
     2fa:	08 95       	ret

000002fc <_ZN6absTWI4initEv>:
	
} //~absTWI

int absTWI::init()
{
	if(m_isInited != 0)
     2fc:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__data_end>
     300:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__data_end+0x1>
     304:	21 15       	cp	r18, r1
     306:	31 05       	cpc	r19, r1
     308:	b9 f4       	brne	.+46     	; 0x338 <_ZN6absTWI4initEv+0x3c>
		return TWI_ERROR_INITIALIZED_ALREADY;
		
	DDRD |= 0x03; // set 1 at DDRD[0:1]
     30a:	91 b3       	in	r25, 0x11	; 17
     30c:	93 60       	ori	r25, 0x03	; 3
     30e:	91 bb       	out	0x11, r25	; 17
    PORTD &= ~(1);
     310:	90 98       	cbi	0x12, 0	; 18
	PORTD |= (1);
     312:	90 9a       	sbi	0x12, 0	; 18
	
	TWSR |= (1 << TWPS0);
     314:	e1 e7       	ldi	r30, 0x71	; 113
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	90 81       	ld	r25, Z
     31a:	91 60       	ori	r25, 0x01	; 1
     31c:	90 83       	st	Z, r25
	TWBR = 0x12;
     31e:	82 e1       	ldi	r24, 0x12	; 18
     320:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TWCR = 1 <<TWEN;
     324:	84 e0       	ldi	r24, 0x04	; 4
     326:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	m_isInited = 1;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <__data_end+0x1>
     332:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
	return TWI_ERROR_OK;
     336:	02 c0       	rjmp	.+4      	; 0x33c <_ZN6absTWI4initEv+0x40>
} //~absTWI

int absTWI::init()
{
	if(m_isInited != 0)
		return TWI_ERROR_INITIALIZED_ALREADY;
     338:	2d ef       	ldi	r18, 0xFD	; 253
     33a:	3f ef       	ldi	r19, 0xFF	; 255
	TWSR |= (1 << TWPS0);
	TWBR = 0x12;
	TWCR = 1 <<TWEN;
	m_isInited = 1;
	return TWI_ERROR_OK;
}
     33c:	c9 01       	movw	r24, r18
     33e:	08 95       	ret

00000340 <_ZN13BrightControlD1Ev>:
// default destructor
BrightControl::~BrightControl()
{
} //~BrightControl
void BrightControl::operator delete(void * p) // or delete(void *, std::size_t)
{
     340:	08 95       	ret

00000342 <_ZN13BrightControl4initEPvS0_S0_>:
     342:	e1 e6       	ldi	r30, 0x61	; 97
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	8e 7f       	andi	r24, 0xFE	; 254
     34a:	80 83       	st	Z, r24
     34c:	08 95       	ret

0000034e <_ZN13BrightControl6handleEv>:
     34e:	08 95       	ret

00000350 <_ZN13BrightControlD0Ev>:
     350:	08 95       	ret

00000352 <_ZN13BrightControlC1Ev>:
     352:	fc 01       	movw	r30, r24
     354:	11 86       	std	Z+9, r1	; 0x09
     356:	10 86       	std	Z+8, r1	; 0x08
     358:	17 82       	std	Z+7, r1	; 0x07
     35a:	16 82       	std	Z+6, r1	; 0x06
     35c:	15 82       	std	Z+5, r1	; 0x05
     35e:	14 82       	std	Z+4, r1	; 0x04
     360:	13 82       	std	Z+3, r1	; 0x03
     362:	12 82       	std	Z+2, r1	; 0x02
     364:	13 86       	std	Z+11, r1	; 0x0b
     366:	12 86       	std	Z+10, r1	; 0x0a
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	91 83       	std	Z+1, r25	; 0x01
     36e:	80 83       	st	Z, r24
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	95 87       	std	Z+13, r25	; 0x0d
     376:	84 87       	std	Z+12, r24	; 0x0c
     378:	08 95       	ret

0000037a <_ZN13BrightControl9getDegreeEv>:
void BrightControl::handle()
{

}
int BrightControl::getDegree()
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	00 d0       	rcall	.+0      	; 0x380 <_ZN13BrightControl9getDegreeEv+0x6>
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
	volatile int current;
	int tempDegree = 0;
	ADMUX = 1<<REFS0; // Use AVCC as reference voltage souce
     384:	20 e4       	ldi	r18, 0x40	; 64
     386:	27 b9       	out	0x07, r18	; 7
	ADCSRA = 0xc7; // adc enable , start , prescale 128
     388:	27 ec       	ldi	r18, 0xC7	; 199
     38a:	26 b9       	out	0x06, r18	; 6
	while(ADCSRA & (1<<ADIF) == 1);
     38c:	26 b1       	in	r18, 0x06	; 6
	current = ADC;
     38e:	24 b1       	in	r18, 0x04	; 4
     390:	35 b1       	in	r19, 0x05	; 5
     392:	3a 83       	std	Y+2, r19	; 0x02
     394:	29 83       	std	Y+1, r18	; 0x01

	if((current >= (DegreeRangeLowTable[0]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[0] + DEGREE_MARGIN))  )
     396:	49 81       	ldd	r20, Y+1	; 0x01
     398:	5a 81       	ldd	r21, Y+2	; 0x02
     39a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <DegreeRangeLowTable>
     39e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <DegreeRangeLowTable+0x1>
     3a2:	2f 50       	subi	r18, 0x0F	; 15
     3a4:	31 09       	sbc	r19, r1
     3a6:	42 17       	cp	r20, r18
     3a8:	53 07       	cpc	r21, r19
     3aa:	0c f4       	brge	.+2      	; 0x3ae <_ZN13BrightControl9getDegreeEv+0x34>
     3ac:	85 c0       	rjmp	.+266    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     3ae:	49 81       	ldd	r20, Y+1	; 0x01
     3b0:	5a 81       	ldd	r21, Y+2	; 0x02
     3b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <DegreeRangeHighTable>
     3b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <DegreeRangeHighTable+0x1>
     3ba:	21 5f       	subi	r18, 0xF1	; 241
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255
     3be:	42 17       	cp	r20, r18
     3c0:	53 07       	cpc	r21, r19
     3c2:	0c f4       	brge	.+2      	; 0x3c6 <_ZN13BrightControl9getDegreeEv+0x4c>
     3c4:	86 c0       	rjmp	.+268    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     3c6:	78 c0       	rjmp	.+240    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	{
		m_currentDegree = 0;
	}
	else if((current >= (DegreeRangeLowTable[1]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[1] + DEGREE_MARGIN))  )
     3c8:	49 81       	ldd	r20, Y+1	; 0x01
     3ca:	5a 81       	ldd	r21, Y+2	; 0x02
     3cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <DegreeRangeHighTable+0x2>
     3d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <DegreeRangeHighTable+0x3>
     3d4:	21 5f       	subi	r18, 0xF1	; 241
     3d6:	3f 4f       	sbci	r19, 0xFF	; 255
     3d8:	42 17       	cp	r20, r18
     3da:	53 07       	cpc	r21, r19
     3dc:	0c f4       	brge	.+2      	; 0x3e0 <_ZN13BrightControl9getDegreeEv+0x66>
     3de:	7d c0       	rjmp	.+250    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     3e0:	82 c0       	rjmp	.+260    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
	{
		m_currentDegree = 1;
	}
	else if((current >= (DegreeRangeLowTable[2]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[2] + DEGREE_MARGIN))  )
     3e2:	49 81       	ldd	r20, Y+1	; 0x01
     3e4:	5a 81       	ldd	r21, Y+2	; 0x02
     3e6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <DegreeRangeHighTable+0x4>
     3ea:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <DegreeRangeHighTable+0x5>
     3ee:	21 5f       	subi	r18, 0xF1	; 241
     3f0:	3f 4f       	sbci	r19, 0xFF	; 255
     3f2:	42 17       	cp	r20, r18
     3f4:	53 07       	cpc	r21, r19
     3f6:	0c f4       	brge	.+2      	; 0x3fa <_ZN13BrightControl9getDegreeEv+0x80>
     3f8:	83 c0       	rjmp	.+262    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     3fa:	88 c0       	rjmp	.+272    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	{
		m_currentDegree = 2;
	}
	
	else if((current >= (DegreeRangeLowTable[3]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[3] + DEGREE_MARGIN))  )
     3fc:	49 81       	ldd	r20, Y+1	; 0x01
     3fe:	5a 81       	ldd	r21, Y+2	; 0x02
     400:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <DegreeRangeHighTable+0x6>
     404:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <DegreeRangeHighTable+0x7>
     408:	21 5f       	subi	r18, 0xF1	; 241
     40a:	3f 4f       	sbci	r19, 0xFF	; 255
     40c:	42 17       	cp	r20, r18
     40e:	53 07       	cpc	r21, r19
     410:	0c f4       	brge	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	89 c0       	rjmp	.+274    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     414:	8e c0       	rjmp	.+284    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
	{
		m_currentDegree = 3;
	}
	
	else if((current >= (DegreeRangeLowTable[4]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[4] + DEGREE_MARGIN))  )
     416:	49 81       	ldd	r20, Y+1	; 0x01
     418:	5a 81       	ldd	r21, Y+2	; 0x02
     41a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <DegreeRangeHighTable+0x8>
     41e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <DegreeRangeHighTable+0x9>
     422:	21 5f       	subi	r18, 0xF1	; 241
     424:	3f 4f       	sbci	r19, 0xFF	; 255
     426:	42 17       	cp	r20, r18
     428:	53 07       	cpc	r21, r19
     42a:	0c f4       	brge	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	8f c0       	rjmp	.+286    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     42e:	94 c0       	rjmp	.+296    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
	{
		m_currentDegree = 4;
	}
	
	else if((current >= (DegreeRangeLowTable[5]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[5] + DEGREE_MARGIN))  )
     430:	49 81       	ldd	r20, Y+1	; 0x01
     432:	5a 81       	ldd	r21, Y+2	; 0x02
     434:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <DegreeRangeHighTable+0xa>
     438:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <DegreeRangeHighTable+0xb>
     43c:	21 5f       	subi	r18, 0xF1	; 241
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	42 17       	cp	r20, r18
     442:	53 07       	cpc	r21, r19
     444:	0c f4       	brge	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	95 c0       	rjmp	.+298    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     448:	9a c0       	rjmp	.+308    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
	{
		m_currentDegree = 5;
	}
	
	else if((current >= (DegreeRangeLowTable[6]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[6] + DEGREE_MARGIN))  )
     44a:	49 81       	ldd	r20, Y+1	; 0x01
     44c:	5a 81       	ldd	r21, Y+2	; 0x02
     44e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <DegreeRangeHighTable+0xc>
     452:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <DegreeRangeHighTable+0xd>
     456:	21 5f       	subi	r18, 0xF1	; 241
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	42 17       	cp	r20, r18
     45c:	53 07       	cpc	r21, r19
     45e:	0c f4       	brge	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	9b c0       	rjmp	.+310    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     462:	a0 c0       	rjmp	.+320    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
	{
		m_currentDegree = 6;
	}
	
	else if((current >= (DegreeRangeLowTable[7]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[7] + DEGREE_MARGIN))  )
     464:	49 81       	ldd	r20, Y+1	; 0x01
     466:	5a 81       	ldd	r21, Y+2	; 0x02
     468:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <DegreeRangeHighTable+0xe>
     46c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <DegreeRangeHighTable+0xf>
     470:	21 5f       	subi	r18, 0xF1	; 241
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	42 17       	cp	r20, r18
     476:	53 07       	cpc	r21, r19
     478:	0c f4       	brge	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	ad c0       	rjmp	.+346    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     47c:	9f c0       	rjmp	.+318    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
	{
		m_currentDegree = 7;
	}
	
	else if((current >= (DegreeRangeLowTable[8]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[8] + DEGREE_MARGIN))  )
     47e:	49 81       	ldd	r20, Y+1	; 0x01
     480:	5a 81       	ldd	r21, Y+2	; 0x02
     482:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <DegreeRangeHighTable+0x10>
     486:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <DegreeRangeHighTable+0x11>
     48a:	21 5f       	subi	r18, 0xF1	; 241
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	42 17       	cp	r20, r18
     490:	53 07       	cpc	r21, r19
     492:	0c f4       	brge	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     494:	a6 c0       	rjmp	.+332    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     496:	ab c0       	rjmp	.+342    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
	{
		m_currentDegree = 8;
	}
	
	else if((current >= (DegreeRangeLowTable[9]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[9] + DEGREE_MARGIN))  )
     498:	49 81       	ldd	r20, Y+1	; 0x01
     49a:	5a 81       	ldd	r21, Y+2	; 0x02
     49c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <DegreeRangeHighTable+0x12>
     4a0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <DegreeRangeHighTable+0x13>
     4a4:	21 5f       	subi	r18, 0xF1	; 241
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	42 17       	cp	r20, r18
     4aa:	53 07       	cpc	r21, r19
     4ac:	0c f4       	brge	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ae:	ac c0       	rjmp	.+344    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
	{
		m_currentDegree = 9;
	}

	return m_currentDegree ;
     4b0:	fc 01       	movw	r30, r24
     4b2:	84 85       	ldd	r24, Z+12	; 0x0c
     4b4:	95 85       	ldd	r25, Z+13	; 0x0d
     4b6:	ae c0       	rjmp	.+348    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>

	if((current >= (DegreeRangeLowTable[0]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[0] + DEGREE_MARGIN))  )
	{
		m_currentDegree = 0;
	}
	else if((current >= (DegreeRangeLowTable[1]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[1] + DEGREE_MARGIN))  )
     4b8:	49 81       	ldd	r20, Y+1	; 0x01
     4ba:	5a 81       	ldd	r21, Y+2	; 0x02
     4bc:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <DegreeRangeLowTable+0x2>
     4c0:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <DegreeRangeLowTable+0x3>
     4c4:	2f 50       	subi	r18, 0x0F	; 15
     4c6:	31 09       	sbc	r19, r1
     4c8:	42 17       	cp	r20, r18
     4ca:	53 07       	cpc	r21, r19
     4cc:	0c f0       	brlt	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4ce:	7c cf       	rjmp	.-264    	; 0x3c8 <_ZN13BrightControl9getDegreeEv+0x4e>
     4d0:	0a c0       	rjmp	.+20     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
	while(ADCSRA & (1<<ADIF) == 1);
	current = ADC;

	if((current >= (DegreeRangeLowTable[0]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[0] + DEGREE_MARGIN))  )
	{
		m_currentDegree = 0;
     4d2:	fc 01       	movw	r30, r24
     4d4:	15 86       	std	Z+13, r1	; 0x0d
     4d6:	14 86       	std	Z+12, r1	; 0x0c
     4d8:	eb cf       	rjmp	.-42     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	else if((current >= (DegreeRangeLowTable[1]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[1] + DEGREE_MARGIN))  )
	{
		m_currentDegree = 1;
     4da:	21 e0       	ldi	r18, 0x01	; 1
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	35 87       	std	Z+13, r19	; 0x0d
     4e2:	24 87       	std	Z+12, r18	; 0x0c
     4e4:	e5 cf       	rjmp	.-54     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	else if((current >= (DegreeRangeLowTable[2]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[2] + DEGREE_MARGIN))  )
     4e6:	49 81       	ldd	r20, Y+1	; 0x01
     4e8:	5a 81       	ldd	r21, Y+2	; 0x02
     4ea:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <DegreeRangeLowTable+0x4>
     4ee:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <DegreeRangeLowTable+0x5>
     4f2:	2f 50       	subi	r18, 0x0F	; 15
     4f4:	31 09       	sbc	r19, r1
     4f6:	42 17       	cp	r20, r18
     4f8:	53 07       	cpc	r21, r19
     4fa:	0c f0       	brlt	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	72 cf       	rjmp	.-284    	; 0x3e2 <_ZN13BrightControl9getDegreeEv+0x68>
     4fe:	06 c0       	rjmp	.+12     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	{
		m_currentDegree = 2;
     500:	22 e0       	ldi	r18, 0x02	; 2
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	fc 01       	movw	r30, r24
     506:	35 87       	std	Z+13, r19	; 0x0d
     508:	24 87       	std	Z+12, r18	; 0x0c
     50a:	d2 cf       	rjmp	.-92     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	
	else if((current >= (DegreeRangeLowTable[3]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[3] + DEGREE_MARGIN))  )
     50c:	49 81       	ldd	r20, Y+1	; 0x01
     50e:	5a 81       	ldd	r21, Y+2	; 0x02
     510:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <DegreeRangeLowTable+0x6>
     514:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <DegreeRangeLowTable+0x7>
     518:	2f 50       	subi	r18, 0x0F	; 15
     51a:	31 09       	sbc	r19, r1
     51c:	42 17       	cp	r20, r18
     51e:	53 07       	cpc	r21, r19
     520:	0c f0       	brlt	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     522:	6c cf       	rjmp	.-296    	; 0x3fc <_ZN13BrightControl9getDegreeEv+0x82>
     524:	06 c0       	rjmp	.+12     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
	{
		m_currentDegree = 3;
     526:	23 e0       	ldi	r18, 0x03	; 3
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	fc 01       	movw	r30, r24
     52c:	35 87       	std	Z+13, r19	; 0x0d
     52e:	24 87       	std	Z+12, r18	; 0x0c
     530:	bf cf       	rjmp	.-130    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	
	else if((current >= (DegreeRangeLowTable[4]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[4] + DEGREE_MARGIN))  )
     532:	49 81       	ldd	r20, Y+1	; 0x01
     534:	5a 81       	ldd	r21, Y+2	; 0x02
     536:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <DegreeRangeLowTable+0x8>
     53a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <DegreeRangeLowTable+0x9>
     53e:	2f 50       	subi	r18, 0x0F	; 15
     540:	31 09       	sbc	r19, r1
     542:	42 17       	cp	r20, r18
     544:	53 07       	cpc	r21, r19
     546:	0c f0       	brlt	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     548:	66 cf       	rjmp	.-308    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     54a:	06 c0       	rjmp	.+12     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
	{
		m_currentDegree = 4;
     54c:	24 e0       	ldi	r18, 0x04	; 4
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	35 87       	std	Z+13, r19	; 0x0d
     554:	24 87       	std	Z+12, r18	; 0x0c
     556:	ac cf       	rjmp	.-168    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	
	else if((current >= (DegreeRangeLowTable[5]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[5] + DEGREE_MARGIN))  )
     558:	49 81       	ldd	r20, Y+1	; 0x01
     55a:	5a 81       	ldd	r21, Y+2	; 0x02
     55c:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <DegreeRangeLowTable+0xa>
     560:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <DegreeRangeLowTable+0xb>
     564:	2f 50       	subi	r18, 0x0F	; 15
     566:	31 09       	sbc	r19, r1
     568:	42 17       	cp	r20, r18
     56a:	53 07       	cpc	r21, r19
     56c:	0c f0       	brlt	.+2      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56e:	60 cf       	rjmp	.-320    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     570:	06 c0       	rjmp	.+12     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
	{
		m_currentDegree = 5;
     572:	25 e0       	ldi	r18, 0x05	; 5
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	fc 01       	movw	r30, r24
     578:	35 87       	std	Z+13, r19	; 0x0d
     57a:	24 87       	std	Z+12, r18	; 0x0c
     57c:	99 cf       	rjmp	.-206    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	
	else if((current >= (DegreeRangeLowTable[6]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[6] + DEGREE_MARGIN))  )
     57e:	49 81       	ldd	r20, Y+1	; 0x01
     580:	5a 81       	ldd	r21, Y+2	; 0x02
     582:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <DegreeRangeLowTable+0xc>
     586:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <DegreeRangeLowTable+0xd>
     58a:	2f 50       	subi	r18, 0x0F	; 15
     58c:	31 09       	sbc	r19, r1
     58e:	42 17       	cp	r20, r18
     590:	53 07       	cpc	r21, r19
     592:	0c f0       	brlt	.+2      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     594:	5a cf       	rjmp	.-332    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
	{
		m_currentDegree = 6;
     598:	26 e0       	ldi	r18, 0x06	; 6
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	fc 01       	movw	r30, r24
     59e:	35 87       	std	Z+13, r19	; 0x0d
     5a0:	24 87       	std	Z+12, r18	; 0x0c
     5a2:	86 cf       	rjmp	.-244    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	
	else if((current >= (DegreeRangeLowTable[7]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[7] + DEGREE_MARGIN))  )
     5a4:	49 81       	ldd	r20, Y+1	; 0x01
     5a6:	5a 81       	ldd	r21, Y+2	; 0x02
     5a8:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <DegreeRangeLowTable+0xe>
     5ac:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <DegreeRangeLowTable+0xf>
     5b0:	2f 50       	subi	r18, 0x0F	; 15
     5b2:	31 09       	sbc	r19, r1
     5b4:	42 17       	cp	r20, r18
     5b6:	53 07       	cpc	r21, r19
     5b8:	0c f0       	brlt	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5ba:	54 cf       	rjmp	.-344    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		m_currentDegree = 7;
	}
	
	else if((current >= (DegreeRangeLowTable[8]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[8] + DEGREE_MARGIN))  )
     5bc:	49 81       	ldd	r20, Y+1	; 0x01
     5be:	5a 81       	ldd	r21, Y+2	; 0x02
     5c0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <DegreeRangeLowTable+0x10>
     5c4:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <DegreeRangeLowTable+0x11>
     5c8:	2f 50       	subi	r18, 0x0F	; 15
     5ca:	31 09       	sbc	r19, r1
     5cc:	42 17       	cp	r20, r18
     5ce:	53 07       	cpc	r21, r19
     5d0:	0c f0       	brlt	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5d2:	55 cf       	rjmp	.-342    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     5d4:	0c c0       	rjmp	.+24     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		m_currentDegree = 6;
	}
	
	else if((current >= (DegreeRangeLowTable[7]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[7] + DEGREE_MARGIN))  )
	{
		m_currentDegree = 7;
     5d6:	27 e0       	ldi	r18, 0x07	; 7
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	35 87       	std	Z+13, r19	; 0x0d
     5de:	24 87       	std	Z+12, r18	; 0x0c
     5e0:	67 cf       	rjmp	.-306    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	
	else if((current >= (DegreeRangeLowTable[8]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[8] + DEGREE_MARGIN))  )
	{
		m_currentDegree = 8;
     5e2:	28 e0       	ldi	r18, 0x08	; 8
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	fc 01       	movw	r30, r24
     5e8:	35 87       	std	Z+13, r19	; 0x0d
     5ea:	24 87       	std	Z+12, r18	; 0x0c
     5ec:	61 cf       	rjmp	.-318    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}
	
	else if((current >= (DegreeRangeLowTable[9]- DEGREE_MARGIN)) && (current <  (DegreeRangeHighTable[9] + DEGREE_MARGIN))  )
     5ee:	49 81       	ldd	r20, Y+1	; 0x01
     5f0:	5a 81       	ldd	r21, Y+2	; 0x02
     5f2:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <DegreeRangeLowTable+0x12>
     5f6:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <DegreeRangeLowTable+0x13>
     5fa:	2f 50       	subi	r18, 0x0F	; 15
     5fc:	31 09       	sbc	r19, r1
     5fe:	42 17       	cp	r20, r18
     600:	53 07       	cpc	r21, r19
     602:	0c f0       	brlt	.+2      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     604:	49 cf       	rjmp	.-366    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     606:	54 cf       	rjmp	.-344    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	{
		m_currentDegree = 9;
     608:	29 e0       	ldi	r18, 0x09	; 9
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	35 87       	std	Z+13, r19	; 0x0d
     610:	24 87       	std	Z+12, r18	; 0x0c
     612:	4e cf       	rjmp	.-356    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}

	return m_currentDegree ;
}
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <_ZN11Driver74141D1Ev>:
Driver74141::Driver74141()
{
} //Driver74141

// default destructor
Driver74141::~Driver74141()
     61e:	08 95       	ret

00000620 <_ZN11Driver741414initEPvS0_S0_>:
	//std::free(p);
}

void Driver74141::init(void *param1,void *param2,void *param3)
{
		IO_DDR_FOR_74141  |= 0x0F;
     620:	8a b3       	in	r24, 0x1a	; 26
     622:	8f 60       	ori	r24, 0x0F	; 15
     624:	8a bb       	out	0x1a, r24	; 26
		IO_PORT_FOR_74141 |= 0x0F;
     626:	8b b3       	in	r24, 0x1b	; 27
     628:	8f 60       	ori	r24, 0x0F	; 15
     62a:	8b bb       	out	0x1b, r24	; 27
     62c:	08 95       	ret

0000062e <_ZN11Driver741416handleEv>:
}
void Driver74141::handle()
{
     62e:	08 95       	ret

00000630 <_ZN11Driver741419setOutputEh>:
	
	#if 1

	//IO_PORT_FOR_74141 = ~(0x0F);  // clear low 4  bits first
	//IO_PORT_FOR_74141 |= (value & 0x0F); // then set 4 bit as its new value
	IO_PORT_FOR_74141 =value; // then set 4 bit as its new value
     630:	6b bb       	out	0x1b, r22	; 27
     632:	08 95       	ret

00000634 <_ZN11Driver74141D0Ev>:
Driver74141::Driver74141()
{
} //Driver74141

// default destructor
Driver74141::~Driver74141()
     634:	08 95       	ret

00000636 <_ZN11Driver74141C1Ev>:
#include "../Objects/ClockTime.h"
#include <util/delay.h>

#include <stdio.h>
// default constructor
Driver74141::Driver74141()
     636:	fc 01       	movw	r30, r24
	void *m_pCallbackParam;
	driverCallback m_callback;
public:
	InterDevices()
	{
		m_pParam[0]=m_pParam[1]=m_pParam[2]=m_pCallbackParam=0;
     638:	11 86       	std	Z+9, r1	; 0x09
     63a:	10 86       	std	Z+8, r1	; 0x08
     63c:	17 82       	std	Z+7, r1	; 0x07
     63e:	16 82       	std	Z+6, r1	; 0x06
     640:	15 82       	std	Z+5, r1	; 0x05
     642:	14 82       	std	Z+4, r1	; 0x04
     644:	13 82       	std	Z+3, r1	; 0x03
     646:	12 82       	std	Z+2, r1	; 0x02
		m_callback = 0;
     648:	13 86       	std	Z+11, r1	; 0x0b
     64a:	12 86       	std	Z+10, r1	; 0x0a
     64c:	8e e4       	ldi	r24, 0x4E	; 78
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	80 83       	st	Z, r24
     654:	08 95       	ret

00000656 <_ZN6DS32314readEPhj>:
}
int DS3231::setMinute(int)
{
	
	return TWI_ERROR_OK;
}
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	08 95       	ret

0000065c <_ZN6DS3231C1Ev>:
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
     662:	44 de       	rcall	.-888    	; 0x2ec <_ZN6absTWIC1Ev>
     664:	86 e9       	ldi	r24, 0x96	; 150
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	99 83       	std	Y+1, r25	; 0x01
     66a:	88 83       	st	Y, r24
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <_ZN6DS32318readRegsEPhiiPi>:
     672:	6f 92       	push	r6
     674:	7f 92       	push	r7
     676:	8f 92       	push	r8
     678:	9f 92       	push	r9
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	e2 e1       	ldi	r30, 0x12	; 18
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	7f 01       	movw	r14, r30
     694:	e4 1a       	sub	r14, r20
     696:	f5 0a       	sbc	r15, r21
     698:	2e 15       	cp	r18, r14
     69a:	3f 05       	cpc	r19, r15
     69c:	0c f4       	brge	.+2      	; 0x6a0 <_ZN6DS32318readRegsEPhiiPi+0x2e>
     69e:	79 01       	movw	r14, r18
     6a0:	d8 01       	movw	r26, r16
     6a2:	ed 92       	st	X+, r14
     6a4:	fc 92       	st	X, r15
     6a6:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__data_end>
     6aa:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__data_end+0x1>
     6ae:	23 2b       	or	r18, r19
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <_ZN6DS32318readRegsEPhiiPi+0x42>
     6b2:	bf c0       	rjmp	.+382    	; 0x832 <_ZN6DS32318readRegsEPhiiPi+0x1c0>
     6b4:	fc 01       	movw	r30, r24
     6b6:	22 81       	ldd	r18, Z+2	; 0x02
     6b8:	20 38       	cpi	r18, 0x80	; 128
     6ba:	09 f4       	brne	.+2      	; 0x6be <_ZN6DS32318readRegsEPhiiPi+0x4c>
     6bc:	bd c0       	rjmp	.+378    	; 0x838 <_ZN6DS32318readRegsEPhiiPi+0x1c6>
     6be:	8a 01       	movw	r16, r20
     6c0:	d7 2e       	mov	r13, r23
     6c2:	c6 2e       	mov	r12, r22
     6c4:	ec 01       	movw	r28, r24
     6c6:	78 2e       	mov	r7, r24
     6c8:	6d 2e       	mov	r6, r29
     6ca:	01 90       	ld	r0, Z+
     6cc:	f0 81       	ld	r31, Z
     6ce:	e0 2d       	mov	r30, r0
     6d0:	04 80       	ldd	r0, Z+4	; 0x04
     6d2:	f5 81       	ldd	r31, Z+5	; 0x05
     6d4:	e0 2d       	mov	r30, r0
     6d6:	09 95       	icall
     6d8:	89 2b       	or	r24, r25
     6da:	a9 f0       	breq	.+42     	; 0x706 <_ZN6DS32318readRegsEPhiiPi+0x94>
     6dc:	e8 81       	ld	r30, Y
     6de:	f9 81       	ldd	r31, Y+1	; 0x01
     6e0:	06 80       	ldd	r0, Z+6	; 0x06
     6e2:	f7 81       	ldd	r31, Z+7	; 0x07
     6e4:	e0 2d       	mov	r30, r0
     6e6:	ce 01       	movw	r24, r28
     6e8:	09 95       	icall
     6ea:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <m_pDevices>
     6ee:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <m_pDevices+0x1>
     6f2:	dc 01       	movw	r26, r24
     6f4:	ed 91       	ld	r30, X+
     6f6:	fc 91       	ld	r31, X
     6f8:	06 84       	ldd	r0, Z+14	; 0x0e
     6fa:	f7 85       	ldd	r31, Z+15	; 0x0f
     6fc:	e0 2d       	mov	r30, r0
     6fe:	6a e5       	ldi	r22, 0x5A	; 90
     700:	71 e0       	ldi	r23, 0x01	; 1
     702:	09 95       	icall
     704:	ff cf       	rjmp	.-2      	; 0x704 <_ZN6DS32318readRegsEPhiiPi+0x92>
     706:	6a 81       	ldd	r22, Y+2	; 0x02
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	e8 81       	ld	r30, Y
     70c:	f9 81       	ldd	r31, Y+1	; 0x01
     70e:	00 84       	ldd	r0, Z+8	; 0x08
     710:	f1 85       	ldd	r31, Z+9	; 0x09
     712:	e0 2d       	mov	r30, r0
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	ce 01       	movw	r24, r28
     718:	09 95       	icall
     71a:	89 2b       	or	r24, r25
     71c:	71 f0       	breq	.+28     	; 0x73a <_ZN6DS32318readRegsEPhiiPi+0xc8>
     71e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <m_pDevices>
     722:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <m_pDevices+0x1>
     726:	dc 01       	movw	r26, r24
     728:	ed 91       	ld	r30, X+
     72a:	fc 91       	ld	r31, X
     72c:	06 84       	ldd	r0, Z+14	; 0x0e
     72e:	f7 85       	ldd	r31, Z+15	; 0x0f
     730:	e0 2d       	mov	r30, r0
     732:	68 e6       	ldi	r22, 0x68	; 104
     734:	71 e0       	ldi	r23, 0x01	; 1
     736:	09 95       	icall
     738:	ff cf       	rjmp	.-2      	; 0x738 <_ZN6DS32318readRegsEPhiiPi+0xc6>
     73a:	e8 81       	ld	r30, Y
     73c:	f9 81       	ldd	r31, Y+1	; 0x01
     73e:	04 84       	ldd	r0, Z+12	; 0x0c
     740:	f5 85       	ldd	r31, Z+13	; 0x0d
     742:	e0 2d       	mov	r30, r0
     744:	60 2f       	mov	r22, r16
     746:	ce 01       	movw	r24, r28
     748:	09 95       	icall
     74a:	89 2b       	or	r24, r25
     74c:	a9 f0       	breq	.+42     	; 0x778 <_ZN6DS32318readRegsEPhiiPi+0x106>
     74e:	e8 81       	ld	r30, Y
     750:	f9 81       	ldd	r31, Y+1	; 0x01
     752:	06 80       	ldd	r0, Z+6	; 0x06
     754:	f7 81       	ldd	r31, Z+7	; 0x07
     756:	e0 2d       	mov	r30, r0
     758:	ce 01       	movw	r24, r28
     75a:	09 95       	icall
     75c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <m_pDevices>
     760:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <m_pDevices+0x1>
     764:	dc 01       	movw	r26, r24
     766:	ed 91       	ld	r30, X+
     768:	fc 91       	ld	r31, X
     76a:	06 84       	ldd	r0, Z+14	; 0x0e
     76c:	f7 85       	ldd	r31, Z+15	; 0x0f
     76e:	e0 2d       	mov	r30, r0
     770:	66 e7       	ldi	r22, 0x76	; 118
     772:	71 e0       	ldi	r23, 0x01	; 1
     774:	09 95       	icall
     776:	ff cf       	rjmp	.-2      	; 0x776 <_ZN6DS32318readRegsEPhiiPi+0x104>
     778:	e8 81       	ld	r30, Y
     77a:	f9 81       	ldd	r31, Y+1	; 0x01
     77c:	04 80       	ldd	r0, Z+4	; 0x04
     77e:	f5 81       	ldd	r31, Z+5	; 0x05
     780:	e0 2d       	mov	r30, r0
     782:	ce 01       	movw	r24, r28
     784:	09 95       	icall
     786:	8c 01       	movw	r16, r24
     788:	89 2b       	or	r24, r25
     78a:	51 f0       	breq	.+20     	; 0x7a0 <_ZN6DS32318readRegsEPhiiPi+0x12e>
     78c:	e8 81       	ld	r30, Y
     78e:	f9 81       	ldd	r31, Y+1	; 0x01
     790:	06 80       	ldd	r0, Z+6	; 0x06
     792:	f7 81       	ldd	r31, Z+7	; 0x07
     794:	e0 2d       	mov	r30, r0
     796:	ce 01       	movw	r24, r28
     798:	09 95       	icall
     79a:	80 2f       	mov	r24, r16
     79c:	91 2f       	mov	r25, r17
     79e:	4e c0       	rjmp	.+156    	; 0x83c <_ZN6DS32318readRegsEPhiiPi+0x1ca>
     7a0:	6a 81       	ldd	r22, Y+2	; 0x02
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	e8 81       	ld	r30, Y
     7a6:	f9 81       	ldd	r31, Y+1	; 0x01
     7a8:	00 84       	ldd	r0, Z+8	; 0x08
     7aa:	f1 85       	ldd	r31, Z+9	; 0x09
     7ac:	e0 2d       	mov	r30, r0
     7ae:	41 e0       	ldi	r20, 0x01	; 1
     7b0:	ce 01       	movw	r24, r28
     7b2:	09 95       	icall
     7b4:	89 2b       	or	r24, r25
     7b6:	21 f4       	brne	.+8      	; 0x7c0 <_ZN6DS32318readRegsEPhiiPi+0x14e>
     7b8:	1e 14       	cp	r1, r14
     7ba:	1f 04       	cpc	r1, r15
     7bc:	7c f0       	brlt	.+30     	; 0x7dc <_ZN6DS32318readRegsEPhiiPi+0x16a>
     7be:	31 c0       	rjmp	.+98     	; 0x822 <_ZN6DS32318readRegsEPhiiPi+0x1b0>
     7c0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <m_pDevices>
     7c4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <m_pDevices+0x1>
     7c8:	dc 01       	movw	r26, r24
     7ca:	ed 91       	ld	r30, X+
     7cc:	fc 91       	ld	r31, X
     7ce:	06 84       	ldd	r0, Z+14	; 0x0e
     7d0:	f7 85       	ldd	r31, Z+15	; 0x0f
     7d2:	e0 2d       	mov	r30, r0
     7d4:	64 e8       	ldi	r22, 0x84	; 132
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	09 95       	icall
     7da:	ff cf       	rjmp	.-2      	; 0x7da <_ZN6DS32318readRegsEPhiiPi+0x168>
     7dc:	0c 2d       	mov	r16, r12
     7de:	1d 2d       	mov	r17, r13
     7e0:	c1 2c       	mov	r12, r1
     7e2:	d1 2c       	mov	r13, r1
     7e4:	88 24       	eor	r8, r8
     7e6:	83 94       	inc	r8
     7e8:	91 2c       	mov	r9, r1
     7ea:	a1 2c       	mov	r10, r1
     7ec:	b1 2c       	mov	r11, r1
     7ee:	bf ef       	ldi	r27, 0xFF	; 255
     7f0:	cb 1a       	sub	r12, r27
     7f2:	db 0a       	sbc	r13, r27
     7f4:	48 2d       	mov	r20, r8
     7f6:	59 2d       	mov	r21, r9
     7f8:	ec 14       	cp	r14, r12
     7fa:	fd 04       	cpc	r15, r13
     7fc:	11 f0       	breq	.+4      	; 0x802 <_ZN6DS32318readRegsEPhiiPi+0x190>
     7fe:	4a 2d       	mov	r20, r10
     800:	5b 2d       	mov	r21, r11
     802:	e8 81       	ld	r30, Y
     804:	f9 81       	ldd	r31, Y+1	; 0x01
     806:	02 84       	ldd	r0, Z+10	; 0x0a
     808:	f3 85       	ldd	r31, Z+11	; 0x0b
     80a:	e0 2d       	mov	r30, r0
     80c:	b8 01       	movw	r22, r16
     80e:	87 2d       	mov	r24, r7
     810:	96 2d       	mov	r25, r6
     812:	09 95       	icall
     814:	0f 5f       	subi	r16, 0xFF	; 255
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	ec 14       	cp	r14, r12
     81a:	fd 04       	cpc	r15, r13
     81c:	41 f7       	brne	.-48     	; 0x7ee <_ZN6DS32318readRegsEPhiiPi+0x17c>
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	69 f4       	brne	.+26     	; 0x83c <_ZN6DS32318readRegsEPhiiPi+0x1ca>
     822:	e8 81       	ld	r30, Y
     824:	f9 81       	ldd	r31, Y+1	; 0x01
     826:	06 80       	ldd	r0, Z+6	; 0x06
     828:	f7 81       	ldd	r31, Z+7	; 0x07
     82a:	e0 2d       	mov	r30, r0
     82c:	ce 01       	movw	r24, r28
     82e:	09 95       	icall
     830:	05 c0       	rjmp	.+10     	; 0x83c <_ZN6DS32318readRegsEPhiiPi+0x1ca>
     832:	8c ef       	ldi	r24, 0xFC	; 252
     834:	9f ef       	ldi	r25, 0xFF	; 255
     836:	02 c0       	rjmp	.+4      	; 0x83c <_ZN6DS32318readRegsEPhiiPi+0x1ca>
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	9f ef       	ldi	r25, 0xFF	; 255
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	cf 90       	pop	r12
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	7f 90       	pop	r7
     856:	6f 90       	pop	r6
     858:	08 95       	ret

0000085a <_ZN6DS32318writeRegEih>:
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <__data_end>
     86a:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <__data_end+0x1>
     86e:	23 2b       	or	r18, r19
     870:	09 f4       	brne	.+2      	; 0x874 <_ZN6DS32318writeRegEih+0x1a>
     872:	66 c0       	rjmp	.+204    	; 0x940 <_ZN6DS32318writeRegEih+0xe6>
     874:	fc 01       	movw	r30, r24
     876:	22 81       	ldd	r18, Z+2	; 0x02
     878:	20 38       	cpi	r18, 0x80	; 128
     87a:	09 f4       	brne	.+2      	; 0x87e <_ZN6DS32318writeRegEih+0x24>
     87c:	64 c0       	rjmp	.+200    	; 0x946 <_ZN6DS32318writeRegEih+0xec>
     87e:	e4 2e       	mov	r14, r20
     880:	f6 2e       	mov	r15, r22
     882:	ec 01       	movw	r28, r24
     884:	01 90       	ld	r0, Z+
     886:	f0 81       	ld	r31, Z
     888:	e0 2d       	mov	r30, r0
     88a:	04 80       	ldd	r0, Z+4	; 0x04
     88c:	f5 81       	ldd	r31, Z+5	; 0x05
     88e:	e0 2d       	mov	r30, r0
     890:	09 95       	icall
     892:	8c 01       	movw	r16, r24
     894:	89 2b       	or	r24, r25
     896:	51 f0       	breq	.+20     	; 0x8ac <_ZN6DS32318writeRegEih+0x52>
     898:	e8 81       	ld	r30, Y
     89a:	f9 81       	ldd	r31, Y+1	; 0x01
     89c:	06 80       	ldd	r0, Z+6	; 0x06
     89e:	f7 81       	ldd	r31, Z+7	; 0x07
     8a0:	e0 2d       	mov	r30, r0
     8a2:	ce 01       	movw	r24, r28
     8a4:	09 95       	icall
     8a6:	80 2f       	mov	r24, r16
     8a8:	91 2f       	mov	r25, r17
     8aa:	4f c0       	rjmp	.+158    	; 0x94a <_ZN6DS32318writeRegEih+0xf0>
     8ac:	8a 81       	ldd	r24, Y+2	; 0x02
     8ae:	68 2f       	mov	r22, r24
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	e8 81       	ld	r30, Y
     8b4:	f9 81       	ldd	r31, Y+1	; 0x01
     8b6:	00 84       	ldd	r0, Z+8	; 0x08
     8b8:	f1 85       	ldd	r31, Z+9	; 0x09
     8ba:	e0 2d       	mov	r30, r0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	ce 01       	movw	r24, r28
     8c0:	09 95       	icall
     8c2:	8c 01       	movw	r16, r24
     8c4:	89 2b       	or	r24, r25
     8c6:	51 f0       	breq	.+20     	; 0x8dc <_ZN6DS32318writeRegEih+0x82>
     8c8:	e8 81       	ld	r30, Y
     8ca:	f9 81       	ldd	r31, Y+1	; 0x01
     8cc:	06 80       	ldd	r0, Z+6	; 0x06
     8ce:	f7 81       	ldd	r31, Z+7	; 0x07
     8d0:	e0 2d       	mov	r30, r0
     8d2:	ce 01       	movw	r24, r28
     8d4:	09 95       	icall
     8d6:	80 2f       	mov	r24, r16
     8d8:	91 2f       	mov	r25, r17
     8da:	37 c0       	rjmp	.+110    	; 0x94a <_ZN6DS32318writeRegEih+0xf0>
     8dc:	e8 81       	ld	r30, Y
     8de:	f9 81       	ldd	r31, Y+1	; 0x01
     8e0:	04 84       	ldd	r0, Z+12	; 0x0c
     8e2:	f5 85       	ldd	r31, Z+13	; 0x0d
     8e4:	e0 2d       	mov	r30, r0
     8e6:	6f 2d       	mov	r22, r15
     8e8:	ce 01       	movw	r24, r28
     8ea:	09 95       	icall
     8ec:	8c 01       	movw	r16, r24
     8ee:	89 2b       	or	r24, r25
     8f0:	51 f0       	breq	.+20     	; 0x906 <_ZN6DS32318writeRegEih+0xac>
     8f2:	e8 81       	ld	r30, Y
     8f4:	f9 81       	ldd	r31, Y+1	; 0x01
     8f6:	06 80       	ldd	r0, Z+6	; 0x06
     8f8:	f7 81       	ldd	r31, Z+7	; 0x07
     8fa:	e0 2d       	mov	r30, r0
     8fc:	ce 01       	movw	r24, r28
     8fe:	09 95       	icall
     900:	80 2f       	mov	r24, r16
     902:	91 2f       	mov	r25, r17
     904:	22 c0       	rjmp	.+68     	; 0x94a <_ZN6DS32318writeRegEih+0xf0>
     906:	e8 81       	ld	r30, Y
     908:	f9 81       	ldd	r31, Y+1	; 0x01
     90a:	04 84       	ldd	r0, Z+12	; 0x0c
     90c:	f5 85       	ldd	r31, Z+13	; 0x0d
     90e:	e0 2d       	mov	r30, r0
     910:	6e 2d       	mov	r22, r14
     912:	ce 01       	movw	r24, r28
     914:	09 95       	icall
     916:	8c 01       	movw	r16, r24
     918:	89 2b       	or	r24, r25
     91a:	51 f0       	breq	.+20     	; 0x930 <_ZN6DS32318writeRegEih+0xd6>
     91c:	e8 81       	ld	r30, Y
     91e:	f9 81       	ldd	r31, Y+1	; 0x01
     920:	06 80       	ldd	r0, Z+6	; 0x06
     922:	f7 81       	ldd	r31, Z+7	; 0x07
     924:	e0 2d       	mov	r30, r0
     926:	ce 01       	movw	r24, r28
     928:	09 95       	icall
     92a:	80 2f       	mov	r24, r16
     92c:	91 2f       	mov	r25, r17
     92e:	0d c0       	rjmp	.+26     	; 0x94a <_ZN6DS32318writeRegEih+0xf0>
     930:	e8 81       	ld	r30, Y
     932:	f9 81       	ldd	r31, Y+1	; 0x01
     934:	06 80       	ldd	r0, Z+6	; 0x06
     936:	f7 81       	ldd	r31, Z+7	; 0x07
     938:	e0 2d       	mov	r30, r0
     93a:	ce 01       	movw	r24, r28
     93c:	09 95       	icall
     93e:	05 c0       	rjmp	.+10     	; 0x94a <_ZN6DS32318writeRegEih+0xf0>
     940:	8c ef       	ldi	r24, 0xFC	; 252
     942:	9f ef       	ldi	r25, 0xFF	; 255
     944:	02 c0       	rjmp	.+4      	; 0x94a <_ZN6DS32318writeRegEih+0xf0>
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	08 95       	ret

00000958 <_ZN6DS32318set1HzOnEv>:
int DS3231::set1HzOn()
{
     958:	ef 92       	push	r14
     95a:	ff 92       	push	r15
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 d0       	rcall	.+0      	; 0x966 <_ZN6DS32318set1HzOnEv+0xe>
     966:	1f 92       	push	r1
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	7c 01       	movw	r14, r24
	unsigned char data;
	int readsize = -1;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	9f ef       	ldi	r25, 0xFF	; 255
     972:	9b 83       	std	Y+3, r25	; 0x03
     974:	8a 83       	std	Y+2, r24	; 0x02
	readRegs(&data,_DS_CONTROL_REGISTER_ADDR,1,&readsize);
     976:	8e 01       	movw	r16, r28
     978:	0e 5f       	subi	r16, 0xFE	; 254
     97a:	1f 4f       	sbci	r17, 0xFF	; 255
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	4e e0       	ldi	r20, 0x0E	; 14
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	c7 01       	movw	r24, r14
     98c:	72 de       	rcall	.-796    	; 0x672 <_ZN6DS32318readRegsEPhiiPi>
	data &= (~(1<<2 | 1<<3 |1<<4 ));
     98e:	49 81       	ldd	r20, Y+1	; 0x01
     990:	43 7e       	andi	r20, 0xE3	; 227
     992:	49 83       	std	Y+1, r20	; 0x01
	return writeReg(_DS_CONTROL_REGISTER_ADDR,data);
     994:	6e e0       	ldi	r22, 0x0E	; 14
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	c7 01       	movw	r24, r14
     99a:	5f df       	rcall	.-322    	; 0x85a <_ZN6DS32318writeRegEih>
}
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <_ZN6DS323110updateHourEi>:
	//sprintf(Buffer,"updateHour start  = %d \r\n",value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	unsigned char data=0x00;
	//sprintf(Buffer,"updateHour end-0 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	if(value >=20)
     9b0:	64 31       	cpi	r22, 0x14	; 20
     9b2:	71 05       	cpc	r23, r1
     9b4:	24 f0       	brlt	.+8      	; 0x9be <_ZN6DS323110updateHourEi+0xe>
	{
		data|=1<<5;
		value -=20;
     9b6:	64 51       	subi	r22, 0x14	; 20
     9b8:	71 09       	sbc	r23, r1
	unsigned char data=0x00;
	//sprintf(Buffer,"updateHour end-0 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	if(value >=20)
	{
		data|=1<<5;
     9ba:	40 e2       	ldi	r20, 0x20	; 32
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <_ZN6DS323110updateHourEi+0x10>
int DS3231::updateHour(int value)
{
	char Buffer[100];
	//sprintf(Buffer,"updateHour start  = %d \r\n",value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	unsigned char data=0x00;
     9be:	40 e0       	ldi	r20, 0x00	; 0
		data|=1<<5;
		value -=20;
	}
	//sprintf(Buffer,"updateHour end-1 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	if(value >= 10)
     9c0:	6a 30       	cpi	r22, 0x0A	; 10
     9c2:	71 05       	cpc	r23, r1
     9c4:	1c f0       	brlt	.+6      	; 0x9cc <_ZN6DS323110updateHourEi+0x1c>
	{
		data|=1<<4;
     9c6:	40 61       	ori	r20, 0x10	; 16
		value -=10;
     9c8:	6a 50       	subi	r22, 0x0A	; 10
     9ca:	71 09       	sbc	r23, r1
	}
	//sprintf(Buffer,"updateHour end-2 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	data|=(0x0F&value);
     9cc:	6f 70       	andi	r22, 0x0F	; 15
     9ce:	46 2b       	or	r20, r22
	//sprintf(Buffer,"updateHour end-3 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	return writeReg(_DS_HOUR_REGISTER_ADDR,data);
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	42 cf       	rjmp	.-380    	; 0x85a <_ZN6DS32318writeRegEih>
		
}
     9d6:	08 95       	ret

000009d8 <_ZN6DS323112updateMinuteEi>:
int DS3231::updateMinute(int value)
{
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	8c 01       	movw	r16, r24
     9e2:	fb 01       	movw	r30, r22

	unsigned char high;
	unsigned char low;
	low = (value %10);
     9e4:	ca e0       	ldi	r28, 0x0A	; 10
     9e6:	d0 e0       	ldi	r29, 0x00	; 0
     9e8:	cb 01       	movw	r24, r22
     9ea:	be 01       	movw	r22, r28
     9ec:	ce d5       	rcall	.+2972   	; 0x158a <__divmodhi4>
     9ee:	28 2f       	mov	r18, r24
	high = ((value - low)/10)<<4;
	low = high|low;
	return writeReg(_DS_MINUTE_REGISTER_ADDR,low);
     9f0:	cf 01       	movw	r24, r30
     9f2:	82 1b       	sub	r24, r18
     9f4:	91 09       	sbc	r25, r1
     9f6:	be 01       	movw	r22, r28
     9f8:	c8 d5       	rcall	.+2960   	; 0x158a <__divmodhi4>
     9fa:	46 2f       	mov	r20, r22
     9fc:	42 95       	swap	r20
     9fe:	40 7f       	andi	r20, 0xF0	; 240
     a00:	42 2b       	or	r20, r18
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	c8 01       	movw	r24, r16
     a08:	28 df       	rcall	.-432    	; 0x85a <_ZN6DS32318writeRegEih>
	
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <_ZN17DynamicTubeDriverD1Ev>:
// default destructor
DynamicTubeDriver::~DynamicTubeDriver()
{
} //~DynamicTubeDriver
void DynamicTubeDriver::operator delete(void * p) // or delete(void *, std::size_t)
{
     a14:	08 95       	ret

00000a16 <_ZN17DynamicTubeDriver4initEPvS0_S0_>:
     a16:	26 e0       	ldi	r18, 0x06	; 6
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	88 0f       	add	r24, r24
     a1e:	81 60       	ori	r24, 0x01	; 1
     a20:	21 50       	subi	r18, 0x01	; 1
     a22:	31 09       	sbc	r19, r1
     a24:	d9 f7       	brne	.-10     	; 0xa1c <_ZN17DynamicTubeDriver4initEPvS0_S0_+0x6>
     a26:	84 bb       	out	0x14, r24	; 20
     a28:	15 ba       	out	0x15, r1	; 21
     a2a:	08 95       	ret

00000a2c <_ZN17DynamicTubeDriverD0Ev>:
     a2c:	08 95       	ret

00000a2e <_ZN17DynamicTubeDriverC1Ev>:
     a2e:	fc 01       	movw	r30, r24
     a30:	11 86       	std	Z+9, r1	; 0x09
     a32:	10 86       	std	Z+8, r1	; 0x08
     a34:	17 82       	std	Z+7, r1	; 0x07
     a36:	16 82       	std	Z+6, r1	; 0x06
     a38:	15 82       	std	Z+5, r1	; 0x05
     a3a:	14 82       	std	Z+4, r1	; 0x04
     a3c:	13 82       	std	Z+3, r1	; 0x03
     a3e:	12 82       	std	Z+2, r1	; 0x02
     a40:	13 86       	std	Z+11, r1	; 0x0b
     a42:	12 86       	std	Z+10, r1	; 0x0a
     a44:	88 ea       	ldi	r24, 0xA8	; 168
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	91 83       	std	Z+1, r25	; 0x01
     a4a:	80 83       	st	Z, r24
     a4c:	14 8a       	std	Z+20, r1	; 0x14
     a4e:	89 e0       	ldi	r24, 0x09	; 9
     a50:	84 87       	std	Z+12, r24	; 0x0c
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	85 87       	std	Z+13, r24	; 0x0d
     a56:	86 87       	std	Z+14, r24	; 0x0e
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	87 87       	std	Z+15, r24	; 0x0f
     a5c:	84 e0       	ldi	r24, 0x04	; 4
     a5e:	80 8b       	std	Z+16, r24	; 0x10
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	81 8b       	std	Z+17, r24	; 0x11
     a64:	80 e2       	ldi	r24, 0x20	; 32
     a66:	82 8b       	std	Z+18, r24	; 0x12
     a68:	80 e1       	ldi	r24, 0x10	; 16
     a6a:	83 8b       	std	Z+19, r24	; 0x13
     a6c:	08 95       	ret

00000a6e <_ZN17DynamicTubeDriver13driveNextTubeEv>:
	}
	IO_DDR_FOR_DYNAMIC_SWITCH = temp;
	IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
}
void DynamicTubeDriver::driveNextTube()
{
     a6e:	dc 01       	movw	r26, r24
		
		
	
		
		
		IO_PORT_FOR_DYNAMIC_SWITCH = m_tube[m_currentTube] ;
     a70:	54 96       	adiw	r26, 0x14	; 20
     a72:	8c 91       	ld	r24, X
     a74:	54 97       	sbiw	r26, 0x14	; 20
     a76:	fd 01       	movw	r30, r26
     a78:	e8 0f       	add	r30, r24
     a7a:	f1 1d       	adc	r31, r1
     a7c:	86 85       	ldd	r24, Z+14	; 0x0e
     a7e:	85 bb       	out	0x15, r24	; 21
		_delay_us(10000); 
		IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
		
#else

		switch(m_brightDegree)
     a80:	1c 96       	adiw	r26, 0x0c	; 12
     a82:	ec 91       	ld	r30, X
     a84:	1c 97       	sbiw	r26, 0x0c	; 12
     a86:	4e 2f       	mov	r20, r30
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	4a 30       	cpi	r20, 0x0A	; 10
     a8c:	51 05       	cpc	r21, r1
     a8e:	08 f0       	brcs	.+2      	; 0xa92 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x24>
     a90:	8f c0       	rjmp	.+286    	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     a92:	fa 01       	movw	r30, r20
     a94:	ea 5b       	subi	r30, 0xBA	; 186
     a96:	ff 4f       	sbci	r31, 0xFF	; 255
     a98:	8b c5       	rjmp	.+2838   	; 0x15b0 <__tablejump2__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9a:	8f ea       	ldi	r24, 0xAF	; 175
     a9c:	94 e0       	ldi	r25, 0x04	; 4
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <_ZN17DynamicTubeDriver13driveNextTubeEv+0x30>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x36>
     aa4:	00 00       	nop
		{
			case Level0:
				_delay_us(LvOn0); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     aa6:	15 ba       	out	0x15, r1	; 21
     aa8:	8f ed       	ldi	r24, 0xDF	; 223
     aaa:	9e e2       	ldi	r25, 0x2E	; 46
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <_ZN17DynamicTubeDriver13driveNextTubeEv+0x3e>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x44>
     ab2:	00 00       	nop
     ab4:	7d c0       	rjmp	.+250    	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     ab6:	8f e5       	ldi	r24, 0x5F	; 95
     ab8:	99 e0       	ldi	r25, 0x09	; 9
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <_ZN17DynamicTubeDriver13driveNextTubeEv+0x4c>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x52>
     ac0:	00 00       	nop
				_delay_us(LvOff0); 
				break;
			case Level1:
				_delay_us(LvOn1); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     ac2:	15 ba       	out	0x15, r1	; 21
     ac4:	8f e2       	ldi	r24, 0x2F	; 47
     ac6:	9a e2       	ldi	r25, 0x2A	; 42
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x5a>
     acc:	00 c0       	rjmp	.+0      	; 0xace <_ZN17DynamicTubeDriver13driveNextTubeEv+0x60>
     ace:	00 00       	nop
     ad0:	6f c0       	rjmp	.+222    	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     ad2:	8f e0       	ldi	r24, 0x0F	; 15
     ad4:	9e e0       	ldi	r25, 0x0E	; 14
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x68>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <_ZN17DynamicTubeDriver13driveNextTubeEv+0x6e>
     adc:	00 00       	nop
				_delay_us(LvOff1);
				break;
			case Level2:
				_delay_us(LvOn2); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     ade:	15 ba       	out	0x15, r1	; 21
     ae0:	8f e7       	ldi	r24, 0x7F	; 127
     ae2:	95 e2       	ldi	r25, 0x25	; 37
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x76>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <_ZN17DynamicTubeDriver13driveNextTubeEv+0x7c>
     aea:	00 00       	nop
     aec:	61 c0       	rjmp	.+194    	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     aee:	8f eb       	ldi	r24, 0xBF	; 191
     af0:	92 e1       	ldi	r25, 0x12	; 18
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x84>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x8a>
     af8:	00 00       	nop
				_delay_us(LvOff2);
				break;
			case Level3:
				_delay_us(LvOn3); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     afa:	15 ba       	out	0x15, r1	; 21
     afc:	8f ec       	ldi	r24, 0xCF	; 207
     afe:	90 e2       	ldi	r25, 0x20	; 32
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x92>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x98>
     b06:	00 00       	nop
     b08:	53 c0       	rjmp	.+166    	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     b0a:	8f e6       	ldi	r24, 0x6F	; 111
     b0c:	97 e1       	ldi	r25, 0x17	; 23
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <_ZN17DynamicTubeDriver13driveNextTubeEv+0xa0>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xa6>
     b14:	00 00       	nop
				_delay_us(LvOff3);
				break;
			case Level4:
				_delay_us(LvOn4); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     b16:	15 ba       	out	0x15, r1	; 21
     b18:	8f e1       	ldi	r24, 0x1F	; 31
     b1a:	9c e1       	ldi	r25, 0x1C	; 28
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <_ZN17DynamicTubeDriver13driveNextTubeEv+0xae>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xb4>
     b22:	00 00       	nop
     b24:	45 c0       	rjmp	.+138    	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     b26:	8f e1       	ldi	r24, 0x1F	; 31
     b28:	9c e1       	ldi	r25, 0x1C	; 28
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <_ZN17DynamicTubeDriver13driveNextTubeEv+0xbc>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xc2>
     b30:	00 00       	nop
				_delay_us(LvOff4);
				break;
			case Level5:
				_delay_us(LvOn5);
				IO_PORT_FOR_DYNAMIC_SWITCH =  0x00;
     b32:	15 ba       	out	0x15, r1	; 21
     b34:	8f e6       	ldi	r24, 0x6F	; 111
     b36:	97 e1       	ldi	r25, 0x17	; 23
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xca>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <_ZN17DynamicTubeDriver13driveNextTubeEv+0xd0>
     b3e:	00 00       	nop
     b40:	37 c0       	rjmp	.+110    	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     b42:	8f ec       	ldi	r24, 0xCF	; 207
     b44:	90 e2       	ldi	r25, 0x20	; 32
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xd8>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <_ZN17DynamicTubeDriver13driveNextTubeEv+0xde>
     b4c:	00 00       	nop
				_delay_us(LvOff5);
				break;
			case Level6:
				_delay_us(LvOn6);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     b4e:	15 ba       	out	0x15, r1	; 21
     b50:	8f eb       	ldi	r24, 0xBF	; 191
     b52:	92 e1       	ldi	r25, 0x12	; 18
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xe6>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <_ZN17DynamicTubeDriver13driveNextTubeEv+0xec>
     b5a:	00 00       	nop
     b5c:	29 c0       	rjmp	.+82     	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     b5e:	8f e7       	ldi	r24, 0x7F	; 127
     b60:	95 e2       	ldi	r25, 0x25	; 37
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xf4>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xfa>
     b68:	00 00       	nop
				_delay_us(LvOff6);
				break;
			
			case Level7:
				_delay_us(LvOn7);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     b6a:	15 ba       	out	0x15, r1	; 21
     b6c:	8f e0       	ldi	r24, 0x0F	; 15
     b6e:	9e e0       	ldi	r25, 0x0E	; 14
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x102>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x108>
     b76:	00 00       	nop
     b78:	1b c0       	rjmp	.+54     	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     b7a:	8f e2       	ldi	r24, 0x2F	; 47
     b7c:	9a e2       	ldi	r25, 0x2A	; 42
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <_ZN17DynamicTubeDriver13driveNextTubeEv+0x110>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x116>
     b84:	00 00       	nop
				_delay_us(LvOff7);
				break;
			
			case Level8:
				_delay_us(LvOn8);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     b86:	15 ba       	out	0x15, r1	; 21
     b88:	8f e5       	ldi	r24, 0x5F	; 95
     b8a:	99 e0       	ldi	r25, 0x09	; 9
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <_ZN17DynamicTubeDriver13driveNextTubeEv+0x11e>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x124>
     b92:	00 00       	nop
     b94:	0d c0       	rjmp	.+26     	; 0xbb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     b96:	8f ed       	ldi	r24, 0xDF	; 223
     b98:	9e e2       	ldi	r25, 0x2E	; 46
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x12c>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x132>
     ba0:	00 00       	nop
				_delay_us(LvOff8);
				break;
			
			case Level9:
				_delay_us(LvOn9);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     ba2:	15 ba       	out	0x15, r1	; 21
     ba4:	8f ea       	ldi	r24, 0xAF	; 175
     ba6:	94 e0       	ldi	r25, 0x04	; 4
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x13a>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <_ZN17DynamicTubeDriver13driveNextTubeEv+0x140>
     bae:	00 00       	nop
				//_delay_us(LvOff9);
				break;
					
		}
#endif
		m_currentTube++;
     bb0:	54 96       	adiw	r26, 0x14	; 20
     bb2:	9c 91       	ld	r25, X
     bb4:	54 97       	sbiw	r26, 0x14	; 20
     bb6:	9f 5f       	subi	r25, 0xFF	; 255
     bb8:	54 96       	adiw	r26, 0x14	; 20
     bba:	9c 93       	st	X, r25
     bbc:	54 97       	sbiw	r26, 0x14	; 20
#if 1
		if(!(m_currentTube ^ 6))
     bbe:	96 30       	cpi	r25, 0x06	; 6
     bc0:	19 f4       	brne	.+6      	; 0xbc8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x15a>
			m_currentTube = 0;
     bc2:	54 96       	adiw	r26, 0x14	; 20
     bc4:	1c 92       	st	X, r1
     bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x17a>
#else
		if(m_currentTube== 6)
		m_currentTube = 0;
#endif				
		// Setup next tube here , because Tube was turned off and had cooling time at least 300ns  already. So, it don't need any cooltime anymore 
		switch(m_currentTube)
     bc8:	92 30       	cpi	r25, 0x02	; 2
     bca:	79 f1       	breq	.+94     	; 0xc2a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x1bc>
     bcc:	28 f4       	brcc	.+10     	; 0xbd8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x16a>
     bce:	99 23       	and	r25, r25
     bd0:	59 f0       	breq	.+22     	; 0xbe8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x17a>
     bd2:	91 30       	cpi	r25, 0x01	; 1
     bd4:	b1 f0       	breq	.+44     	; 0xc02 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x194>
     bd6:	6b c0       	rjmp	.+214    	; 0xcae <_ZN17DynamicTubeDriver13driveNextTubeEv+0x240>
     bd8:	94 30       	cpi	r25, 0x04	; 4
     bda:	09 f4       	brne	.+2      	; 0xbde <_ZN17DynamicTubeDriver13driveNextTubeEv+0x170>
     bdc:	47 c0       	rjmp	.+142    	; 0xc6c <_ZN17DynamicTubeDriver13driveNextTubeEv+0x1fe>
     bde:	90 f1       	brcs	.+100    	; 0xc44 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x1d6>
     be0:	95 30       	cpi	r25, 0x05	; 5
     be2:	09 f4       	brne	.+2      	; 0xbe6 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x178>
     be4:	50 c0       	rjmp	.+160    	; 0xc86 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x218>
     be6:	63 c0       	rjmp	.+198    	; 0xcae <_ZN17DynamicTubeDriver13driveNextTubeEv+0x240>
										{	
											m_timeValue.Hour = H;\
											m_timeValue.Minute = M;\
											m_timeValue.Second = S;
										};
	Digit getTimeHour(){return m_timeValue.Hour;};
     be8:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
     bec:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
		{
			case 0:
				drive_value = m_pclockTime->getTimeHour()/10;
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	6d ec       	ldi	r22, 0xCD	; 205
     bf4:	86 9f       	mul	r24, r22
     bf6:	61 2d       	mov	r22, r1
     bf8:	11 24       	eor	r1, r1
     bfa:	66 95       	lsr	r22
     bfc:	66 95       	lsr	r22
     bfe:	66 95       	lsr	r22
				break;
     c00:	57 c0       	rjmp	.+174    	; 0xcb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
     c02:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
     c06:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
			case 1:
				drive_value =	m_pclockTime->getTimeHour()%10;
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
     c0c:	6d ec       	ldi	r22, 0xCD	; 205
     c0e:	96 9f       	mul	r25, r22
     c10:	61 2d       	mov	r22, r1
     c12:	11 24       	eor	r1, r1
     c14:	66 95       	lsr	r22
     c16:	66 95       	lsr	r22
     c18:	66 95       	lsr	r22
     c1a:	66 0f       	add	r22, r22
     c1c:	86 2f       	mov	r24, r22
     c1e:	88 0f       	add	r24, r24
     c20:	88 0f       	add	r24, r24
     c22:	68 0f       	add	r22, r24
     c24:	96 1b       	sub	r25, r22
     c26:	69 2f       	mov	r22, r25
				break;
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
	Digit getTimeMinute(){return m_timeValue.Minute;};
     c2a:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
     c2e:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
			case 2:
				drive_value = m_pclockTime->getTimeMinute()/10;
     c32:	82 81       	ldd	r24, Z+2	; 0x02
     c34:	6d ec       	ldi	r22, 0xCD	; 205
     c36:	86 9f       	mul	r24, r22
     c38:	61 2d       	mov	r22, r1
     c3a:	11 24       	eor	r1, r1
     c3c:	66 95       	lsr	r22
     c3e:	66 95       	lsr	r22
     c40:	66 95       	lsr	r22
				break;
     c42:	36 c0       	rjmp	.+108    	; 0xcb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
     c44:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
     c48:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
			case 3:
				drive_value = (m_pclockTime->getTimeMinute())%10;
     c4c:	92 81       	ldd	r25, Z+2	; 0x02
     c4e:	6d ec       	ldi	r22, 0xCD	; 205
     c50:	96 9f       	mul	r25, r22
     c52:	61 2d       	mov	r22, r1
     c54:	11 24       	eor	r1, r1
     c56:	66 95       	lsr	r22
     c58:	66 95       	lsr	r22
     c5a:	66 95       	lsr	r22
     c5c:	66 0f       	add	r22, r22
     c5e:	86 2f       	mov	r24, r22
     c60:	88 0f       	add	r24, r24
     c62:	88 0f       	add	r24, r24
     c64:	68 0f       	add	r22, r24
     c66:	96 1b       	sub	r25, r22
     c68:	69 2f       	mov	r22, r25
				break;
     c6a:	22 c0       	rjmp	.+68     	; 0xcb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
	Digit getTimeSecond(){return m_timeValue.Second;};
     c6c:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
     c70:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
			case 4:
				drive_value = m_pclockTime->getTimeSecond()/10;
     c74:	83 81       	ldd	r24, Z+3	; 0x03
     c76:	6d ec       	ldi	r22, 0xCD	; 205
     c78:	86 9f       	mul	r24, r22
     c7a:	61 2d       	mov	r22, r1
     c7c:	11 24       	eor	r1, r1
     c7e:	66 95       	lsr	r22
     c80:	66 95       	lsr	r22
     c82:	66 95       	lsr	r22
				break;
     c84:	15 c0       	rjmp	.+42     	; 0xcb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
     c86:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
     c8a:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
			case 5:
				drive_value = (m_pclockTime->getTimeSecond() )%10;
     c8e:	93 81       	ldd	r25, Z+3	; 0x03
     c90:	6d ec       	ldi	r22, 0xCD	; 205
     c92:	96 9f       	mul	r25, r22
     c94:	61 2d       	mov	r22, r1
     c96:	11 24       	eor	r1, r1
     c98:	66 95       	lsr	r22
     c9a:	66 95       	lsr	r22
     c9c:	66 95       	lsr	r22
     c9e:	66 0f       	add	r22, r22
     ca0:	86 2f       	mov	r24, r22
     ca2:	88 0f       	add	r24, r24
     ca4:	88 0f       	add	r24, r24
     ca6:	68 0f       	add	r22, r24
     ca8:	96 1b       	sub	r25, r22
     caa:	69 2f       	mov	r22, r25
				break;
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
	IO_DDR_FOR_DYNAMIC_SWITCH = temp;
	IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
}
void DynamicTubeDriver::driveNextTube()
{
	char drive_value=0xff;
     cae:	6f ef       	ldi	r22, 0xFF	; 255
				break;
				
		}	
		//((UART*)m_pDevices[NUM_UART])->putChar((drive_value+'0'));
		//((UART*)m_pDevices[NUM_UART])->putChar(('\n'));
		((Driver74141 *)m_pDevices[NUM_71414_DRIVER])->setOutput(drive_value);
     cb0:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <m_pDevices+0x6>
     cb4:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <m_pDevices+0x7>
     cb8:	dc 01       	movw	r26, r24
     cba:	ed 91       	ld	r30, X+
     cbc:	fc 91       	ld	r31, X
     cbe:	02 84       	ldd	r0, Z+10	; 0x0a
     cc0:	f3 85       	ldd	r31, Z+11	; 0x0b
     cc2:	e0 2d       	mov	r30, r0
     cc4:	09 95       	icall
     cc6:	8f e1       	ldi	r24, 0x1F	; 31
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <_ZN17DynamicTubeDriver13driveNextTubeEv+0x25c>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x262>
     cd0:	00 00       	nop
     cd2:	08 95       	ret

00000cd4 <_ZN17DynamicTubeDriver6handleEv>:
		 //= (m_currentTube+1)%(TUBE_COUNT);
		
		
}
void DynamicTubeDriver::handle()
{
     cd4:	cc ce       	rjmp	.-616    	; 0xa6e <_ZN17DynamicTubeDriver13driveNextTubeEv>
     cd6:	08 95       	ret

00000cd8 <_ZN17DynamicTubeDriver9setBrightEi>:
     cd8:	69 30       	cpi	r22, 0x09	; 9
     cda:	71 05       	cpc	r23, r1
     cdc:	24 f0       	brlt	.+8      	; 0xce6 <_ZN17DynamicTubeDriver9setBrightEi+0xe>
     cde:	29 e0       	ldi	r18, 0x09	; 9
     ce0:	fc 01       	movw	r30, r24
     ce2:	24 87       	std	Z+12, r18	; 0x0c
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <_ZN17DynamicTubeDriver9setBrightEi+0x1e>
     ce6:	16 16       	cp	r1, r22
     ce8:	17 06       	cpc	r1, r23
     cea:	1c f0       	brlt	.+6      	; 0xcf2 <_ZN17DynamicTubeDriver9setBrightEi+0x1a>
     cec:	fc 01       	movw	r30, r24
     cee:	14 86       	std	Z+12, r1	; 0x0c
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <_ZN17DynamicTubeDriver9setBrightEi+0x1e>
     cf2:	fc 01       	movw	r30, r24
     cf4:	64 87       	std	Z+12, r22	; 0x0c
     cf6:	fc 01       	movw	r30, r24
     cf8:	84 85       	ldd	r24, Z+12	; 0x0c
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	08 95       	ret

00000cfe <_ZN12InterDevices11regCallbackEPFiPvES0_>:
 */ 
#include "InterDevices.h"

void InterDevices::regCallback(driverCallback callee,void *pData)
{
	m_pCallbackParam = pData;
     cfe:	fc 01       	movw	r30, r24
     d00:	51 87       	std	Z+9, r21	; 0x09
     d02:	40 87       	std	Z+8, r20	; 0x08
	m_callback = callee;
     d04:	73 87       	std	Z+11, r23	; 0x0b
     d06:	62 87       	std	Z+10, r22	; 0x0a
     d08:	08 95       	ret

00000d0a <_ZN13SwitchControlD1Ev>:
// default destructor
SwitchControl::~SwitchControl()
{
} //~SwitchControl
void SwitchControl::operator delete(void * p) // or delete(void *, std::size_t)
{
     d0a:	08 95       	ret

00000d0c <_ZN13SwitchControl4initEPvS0_S0_>:
     d0c:	82 b1       	in	r24, 0x02	; 2
     d0e:	8f 79       	andi	r24, 0x9F	; 159
     d10:	82 b9       	out	0x02, r24	; 2
     d12:	83 b1       	in	r24, 0x03	; 3
     d14:	80 66       	ori	r24, 0x60	; 96
     d16:	83 b9       	out	0x03, r24	; 3
     d18:	8a b7       	in	r24, 0x3a	; 58
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	8a bf       	out	0x3a, r24	; 58
     d1e:	8a b7       	in	r24, 0x3a	; 58
     d20:	80 62       	ori	r24, 0x20	; 32
     d22:	8a bf       	out	0x3a, r24	; 58
     d24:	89 b7       	in	r24, 0x39	; 57
     d26:	80 66       	ori	r24, 0x60	; 96
     d28:	89 bf       	out	0x39, r24	; 57
     d2a:	87 e0       	ldi	r24, 0x07	; 7
     d2c:	83 bf       	out	0x33, r24	; 51
     d2e:	85 bd       	out	0x25, r24	; 37
     d30:	87 b7       	in	r24, 0x37	; 55
     d32:	8e 7f       	andi	r24, 0xFE	; 254
     d34:	87 bf       	out	0x37, r24	; 55
     d36:	87 b7       	in	r24, 0x37	; 55
     d38:	8f 7b       	andi	r24, 0xBF	; 191
     d3a:	87 bf       	out	0x37, r24	; 55
     d3c:	08 95       	ret

00000d3e <_ZN13SwitchControl6handleEv>:
     d3e:	08 95       	ret

00000d40 <_ZN13SwitchControlD0Ev>:
     d40:	08 95       	ret

00000d42 <__vector_16>:
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	8f 93       	push	r24
     d4e:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <g_DebouncingTimerMINUTECounter>
     d52:	8f 30       	cpi	r24, 0x0F	; 15
     d54:	48 f0       	brcs	.+18     	; 0xd68 <__vector_16+0x26>
     d56:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <g_DebouncingMINUTEFlag>
     d5a:	87 b7       	in	r24, 0x37	; 55
     d5c:	8e 7f       	andi	r24, 0xFE	; 254
     d5e:	87 bf       	out	0x37, r24	; 55
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <g_UpdateMINUTEFlag>
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__vector_16+0x30>
     d68:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <g_DebouncingTimerMINUTECounter>
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <g_DebouncingTimerMINUTECounter>
     d72:	8f 91       	pop	r24
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_10>:
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	8f 93       	push	r24
     d8a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <g_DebouncingTimerHOURCounter>
     d8e:	8f 30       	cpi	r24, 0x0F	; 15
     d90:	48 f0       	brcs	.+18     	; 0xda4 <__vector_10+0x26>
     d92:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <g_DebouncingHOURFlag>
     d96:	87 b7       	in	r24, 0x37	; 55
     d98:	8f 7b       	andi	r24, 0xBF	; 191
     d9a:	87 bf       	out	0x37, r24	; 55
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <g_UpdateHOURFlag>
     da2:	05 c0       	rjmp	.+10     	; 0xdae <__vector_10+0x30>
     da4:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <g_DebouncingTimerHOURCounter>
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <g_DebouncingTimerHOURCounter>
     dae:	8f 91       	pop	r24
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <_ZN13SwitchControlC1Ev>:
     dba:	fc 01       	movw	r30, r24
     dbc:	11 86       	std	Z+9, r1	; 0x09
     dbe:	10 86       	std	Z+8, r1	; 0x08
     dc0:	17 82       	std	Z+7, r1	; 0x07
     dc2:	16 82       	std	Z+6, r1	; 0x06
     dc4:	15 82       	std	Z+5, r1	; 0x05
     dc6:	14 82       	std	Z+4, r1	; 0x04
     dc8:	13 82       	std	Z+3, r1	; 0x03
     dca:	12 82       	std	Z+2, r1	; 0x02
     dcc:	13 86       	std	Z+11, r1	; 0x0b
     dce:	12 86       	std	Z+10, r1	; 0x0a
     dd0:	86 eb       	ldi	r24, 0xB6	; 182
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	91 83       	std	Z+1, r25	; 0x01
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret

00000dda <_ZN13SwitchControl6hourUpEv>:
{

}
void SwitchControl::hourUp()
{
	if(m_pclockTime != NULL)
     dda:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <m_pclockTime>
     dde:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
     de2:	00 97       	sbiw	r24, 0x00	; 0
		m_pclockTime->hourUp();
     de4:	09 f0       	breq	.+2      	; 0xde8 <_ZN13SwitchControl6hourUpEv+0xe>
     de6:	c1 c3       	rjmp	.+1922   	; 0x156a <_ZN9ClockTime6hourUpEv>
     de8:	08 95       	ret

00000dea <__vector_7>:
			g_UpdateMINUTEFlag = 1;
	}
	
}
ISR(INT6_vect)
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	0b b6       	in	r0, 0x3b	; 59
     df6:	0f 92       	push	r0
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	cf 93       	push	r28
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
	if(g_DebouncingHOURFlag==0)
     e12:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <g_DebouncingHOURFlag>
     e16:	81 11       	cpse	r24, r1
     e18:	13 c0       	rjmp	.+38     	; 0xe40 <__vector_7+0x56>
	{
		g_DebouncingHOURFlag = 1; // 상태변경
     e1a:	c1 e0       	ldi	r28, 0x01	; 1
     e1c:	c0 93 b3 02 	sts	0x02B3, r28	; 0x8002b3 <g_DebouncingHOURFlag>
		g_DebouncingTimerHOURCounter = 0 ; //카운터 리셋
     e20:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <g_DebouncingTimerHOURCounter>
		TCNT2 = 0; // 카운터 레지스터 리셋
     e24:	14 bc       	out	0x24, r1	; 36
		TIFR &= ~(1<<TOV2); // (혹시나 걸렸을지도 모를....) 기존 Iterrupt flag를 초기화한다
     e26:	86 b7       	in	r24, 0x36	; 54
     e28:	8f 7b       	andi	r24, 0xBF	; 191
     e2a:	86 bf       	out	0x36, r24	; 54
		TIMSK |= (1<<TOIE2); // Timer2 Overflow interrupt disable
     e2c:	87 b7       	in	r24, 0x37	; 55
     e2e:	80 64       	ori	r24, 0x40	; 64
     e30:	87 bf       	out	0x37, r24	; 55
		((SwitchControl*)m_pDevices[NUM_SWITCH_CONTROL_DRIVER])->hourUp();
     e32:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <m_pDevices+0xa>
     e36:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <m_pDevices+0xb>
     e3a:	cf df       	rcall	.-98     	; 0xdda <_ZN13SwitchControl6hourUpEv>
			g_UpdateHOURFlag = 1;
     e3c:	c0 93 b2 02 	sts	0x02B2, r28	; 0x8002b2 <g_UpdateHOURFlag>
	}

}
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	cf 91       	pop	r28
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0b be       	out	0x3b, r0	; 59
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <_ZN13SwitchControl8MinuteUpEv>:
	if(m_pclockTime != NULL)
		m_pclockTime->hourUp();
}
void SwitchControl::MinuteUp()
{
	if(m_pclockTime != NULL)
     e68:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <m_pclockTime>
     e6c:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
     e70:	00 97       	sbiw	r24, 0x00	; 0
		m_pclockTime->minuteUp();
     e72:	09 f0       	breq	.+2      	; 0xe76 <_ZN13SwitchControl8MinuteUpEv+0xe>
     e74:	64 c3       	rjmp	.+1736   	; 0x153e <_ZN9ClockTime8minuteUpEv>
     e76:	08 95       	ret

00000e78 <__vector_6>:
#endif

#ifdef USE_INTERRUPT_SW

ISR(INT5_vect)
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	0b b6       	in	r0, 0x3b	; 59
     e84:	0f 92       	push	r0
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	cf 93       	push	r28
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31

	if(g_DebouncingMINUTEFlag==0)
     ea0:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <g_DebouncingMINUTEFlag>
     ea4:	81 11       	cpse	r24, r1
     ea6:	13 c0       	rjmp	.+38     	; 0xece <__vector_6+0x56>
	{
		g_DebouncingMINUTEFlag = 1; // 상태변경
     ea8:	c1 e0       	ldi	r28, 0x01	; 1
     eaa:	c0 93 b6 02 	sts	0x02B6, r28	; 0x8002b6 <g_DebouncingMINUTEFlag>
		g_DebouncingTimerMINUTECounter = 0 ; //카운터 리셋
     eae:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <g_DebouncingTimerMINUTECounter>
		TCNT0 = 0; // 카운터 레지스터 리셋
     eb2:	12 be       	out	0x32, r1	; 50
		TIFR &= ~(1<<TOV0); // (혹시나 걸렸을지도 모를....) 기존 Iterrupt flag를 초기화한다
     eb4:	86 b7       	in	r24, 0x36	; 54
     eb6:	8e 7f       	andi	r24, 0xFE	; 254
     eb8:	86 bf       	out	0x36, r24	; 54
		TIMSK |=(1<<TOIE0); // Timer0 Overflow interrupt disable
     eba:	87 b7       	in	r24, 0x37	; 55
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	87 bf       	out	0x37, r24	; 55
		((SwitchControl*)m_pDevices[NUM_SWITCH_CONTROL_DRIVER])->MinuteUp();
     ec0:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <m_pDevices+0xa>
     ec4:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <m_pDevices+0xb>
     ec8:	cf df       	rcall	.-98     	; 0xe68 <_ZN13SwitchControl8MinuteUpEv>
			g_UpdateMINUTEFlag = 1;
     eca:	c0 93 b5 02 	sts	0x02B5, r28	; 0x8002b5 <g_UpdateMINUTEFlag>
	}
	
}
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	cf 91       	pop	r28
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	0b be       	out	0x3b, r0	; 59
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <_ZN10TimeTickerD1Ev>:
{

} //TimeTicker

// default destructor
TimeTicker::~TimeTicker()
     ef6:	08 95       	ret

00000ef8 <_ZN10TimeTicker4initEPvS0_S0_>:
{

	//std::free(p);
}
void TimeTicker::init(void *param1,void *param2,void *param3)
{
     ef8:	fc 01       	movw	r30, r24
	m_pParam[0] = param1;
     efa:	73 83       	std	Z+3, r23	; 0x03
     efc:	62 83       	std	Z+2, r22	; 0x02
	m_pParam[1] = param2;
     efe:	55 83       	std	Z+5, r21	; 0x05
     f00:	44 83       	std	Z+4, r20	; 0x04
	m_pParam[2] = param3;
     f02:	37 83       	std	Z+7, r19	; 0x07
     f04:	26 83       	std	Z+6, r18	; 0x06
#ifndef USING_INT2
	DDRE &= ~(1<<4);
     f06:	14 98       	cbi	0x02, 4	; 2
	PORTE |= 1<<4;
     f08:	1c 9a       	sbi	0x03, 4	; 3
	EICRB |= (1<< ISC41 |1 << ISC40 ); // falling edge detection
     f0a:	8a b7       	in	r24, 0x3a	; 58
     f0c:	83 60       	ori	r24, 0x03	; 3
     f0e:	8a bf       	out	0x3a, r24	; 58
	EIMSK |=  1<<INT4;
     f10:	89 b7       	in	r24, 0x39	; 57
     f12:	80 61       	ori	r24, 0x10	; 16
     f14:	89 bf       	out	0x39, r24	; 57
     f16:	08 95       	ret

00000f18 <_ZN10TimeTicker6handleEv>:
	EIMSK |=  1<<INT2;
#endif	
}
void TimeTicker::handle()
{
	if(m_callback != 0)
     f18:	dc 01       	movw	r26, r24
     f1a:	1a 96       	adiw	r26, 0x0a	; 10
     f1c:	ed 91       	ld	r30, X+
     f1e:	fc 91       	ld	r31, X
     f20:	1b 97       	sbiw	r26, 0x0b	; 11
     f22:	30 97       	sbiw	r30, 0x00	; 0
     f24:	29 f0       	breq	.+10     	; 0xf30 <_ZN10TimeTicker6handleEv+0x18>
		m_callback(m_pCallbackParam);
     f26:	18 96       	adiw	r26, 0x08	; 8
     f28:	8d 91       	ld	r24, X+
     f2a:	9c 91       	ld	r25, X
     f2c:	19 97       	sbiw	r26, 0x09	; 9
     f2e:	09 95       	icall
     f30:	08 95       	ret

00000f32 <_ZN10TimeTickerD0Ev>:
{

} //TimeTicker

// default destructor
TimeTicker::~TimeTicker()
     f32:	08 95       	ret

00000f34 <__vector_5>:
#ifndef USING_INT2
ISR(INT4_vect)
#else
ISR(INT2_vect)
#endif
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	0b b6       	in	r0, 0x3b	; 59
     f40:	0f 92       	push	r0
     f42:	2f 93       	push	r18
     f44:	3f 93       	push	r19
     f46:	4f 93       	push	r20
     f48:	5f 93       	push	r21
     f4a:	6f 93       	push	r22
     f4c:	7f 93       	push	r23
     f4e:	8f 93       	push	r24
     f50:	9f 93       	push	r25
     f52:	af 93       	push	r26
     f54:	bf 93       	push	r27
     f56:	ef 93       	push	r30
     f58:	ff 93       	push	r31
	m_pDevices[NUM_TIMETICKER]->handle();
     f5a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <m_pDevices+0x2>
     f5e:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <m_pDevices+0x3>
     f62:	dc 01       	movw	r26, r24
     f64:	ed 91       	ld	r30, X+
     f66:	fc 91       	ld	r31, X
     f68:	06 80       	ldd	r0, Z+6	; 0x06
     f6a:	f7 81       	ldd	r31, Z+7	; 0x07
     f6c:	e0 2d       	mov	r30, r0
     f6e:	09 95       	icall
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0b be       	out	0x3b, r0	; 59
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <_ZN10TimeTickerC1Ev>:


// default constructor
TimeTicker::TimeTicker()
     f96:	fc 01       	movw	r30, r24
	void *m_pCallbackParam;
	driverCallback m_callback;
public:
	InterDevices()
	{
		m_pParam[0]=m_pParam[1]=m_pParam[2]=m_pCallbackParam=0;
     f98:	11 86       	std	Z+9, r1	; 0x09
     f9a:	10 86       	std	Z+8, r1	; 0x08
     f9c:	17 82       	std	Z+7, r1	; 0x07
     f9e:	16 82       	std	Z+6, r1	; 0x06
     fa0:	15 82       	std	Z+5, r1	; 0x05
     fa2:	14 82       	std	Z+4, r1	; 0x04
     fa4:	13 82       	std	Z+3, r1	; 0x03
     fa6:	12 82       	std	Z+2, r1	; 0x02
		m_callback = 0;
     fa8:	13 86       	std	Z+11, r1	; 0x0b
     faa:	12 86       	std	Z+10, r1	; 0x0a
     fac:	84 ec       	ldi	r24, 0xC4	; 196
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	08 95       	ret

00000fb6 <_ZN4UARTD1Ev>:
UART::UART()
{
} //UART

// default destructor
UART::~UART()
     fb6:	08 95       	ret

00000fb8 <_ZN4UART4initEPvS0_S0_>:
	#if 1
	//DDRA = 0;
	//PORTA = 0;

	
	DDRD |= 0x1<<3; // 
     fb8:	8b 9a       	sbi	0x11, 3	; 17
	DDRD &= (~(0x1<<2));
     fba:	8a 98       	cbi	0x11, 2	; 17
	
	UCSR1A = 0x00; // ready flag clear
     fbc:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
//	UCSR1B = 0x18; // rx,tx interrupt enable
	UCSR1B = 0x98; // rx,tx interrupt enable
     fc0:	88 e9       	ldi	r24, 0x98	; 152
     fc2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06; // tx data len 8bit
     fc6:	86 e0       	ldi	r24, 0x06	; 6
     fc8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = 0;
     fcc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 8;  //baudrate is 115200
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     fd6:	08 95       	ret

00000fd8 <_ZN4UART6handleEv>:
	temp = UDR1; // dummy read
	#endif
	
}
void UART::handle()
{
     fd8:	08 95       	ret

00000fda <_ZN4UART7getCharEv>:
	//std::free(p);
}

char UART::getChar()
{
	while(!(UCSR1A&0x80)); // 수신완료될때까지 대기
     fda:	eb e9       	ldi	r30, 0x9B	; 155
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	88 23       	and	r24, r24
     fe2:	ec f7       	brge	.-6      	; 0xfde <_ZN4UART7getCharEv+0x4>
	return UDR1;
     fe4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
     fe8:	08 95       	ret

00000fea <_ZN4UART7putCharEc>:
void UART::putChar(char data)
{
	//PORTA=0x0FF;
	//_delay_ms(10);
	//PORTA = 0x00;
    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
     fea:	eb e9       	ldi	r30, 0x9B	; 155
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	85 ff       	sbrs	r24, 5
     ff2:	fd cf       	rjmp	.-6      	; 0xfee <_ZN4UART7putCharEc+0x4>
    UDR1 = data;
     ff4:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     ff8:	08 95       	ret

00000ffa <_ZN4UART9putStringEPc>:
}
void UART::putString(char *str)
{
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
	int index = 0 ;
	
	while(1)
	{
		if(str[index] == 0)
     ffe:	fb 01       	movw	r30, r22
    1000:	90 81       	ld	r25, Z
    1002:	99 23       	and	r25, r25
    1004:	69 f0       	breq	.+26     	; 0x1020 <_ZN4UART9putStringEPc+0x26>
    1006:	db 01       	movw	r26, r22
    1008:	11 96       	adiw	r26, 0x01	; 1
			break;
		else
		{
			    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
    100a:	eb e9       	ldi	r30, 0x9B	; 155
    100c:	f0 e0       	ldi	r31, 0x00	; 0
			    UDR1 = str[index];
    100e:	cc e9       	ldi	r28, 0x9C	; 156
    1010:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(str[index] == 0)
			break;
		else
		{
			    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
    1012:	80 81       	ld	r24, Z
    1014:	85 ff       	sbrs	r24, 5
    1016:	fd cf       	rjmp	.-6      	; 0x1012 <_ZN4UART9putStringEPc+0x18>
			    UDR1 = str[index];
    1018:	98 83       	st	Y, r25
{
	int index = 0 ;
	
	while(1)
	{
		if(str[index] == 0)
    101a:	9d 91       	ld	r25, X+
    101c:	91 11       	cpse	r25, r1
    101e:	f9 cf       	rjmp	.-14     	; 0x1012 <_ZN4UART9putStringEPc+0x18>
			    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
			    UDR1 = str[index];
		}
		index++;
	}
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <_ZN4UARTD0Ev>:
UART::UART()
{
} //UART

// default destructor
UART::~UART()
    1026:	08 95       	ret

00001028 <__vector_30>:
#include "Driver74141.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(USART1_RX_vect)
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	0b b6       	in	r0, 0x3b	; 59
    1034:	0f 92       	push	r0
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
	char chKey = UDR1 ;
    104e:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	static int tempDegree = 6;
	
	
	if(m_pclockTime == 0) return;
    1052:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <m_pclockTime>
    1056:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	09 f4       	brne	.+2      	; 0x1060 <__vector_30+0x38>
    105e:	5c c0       	rjmp	.+184    	; 0x1118 <__stack+0x19>
	if(m_pDevices[NUM_DYNAMIC_DRIVER] == 0) return;
    1060:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <m_pDevices+0x4>
    1064:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <m_pDevices+0x5>
    1068:	21 15       	cp	r18, r1
    106a:	31 05       	cpc	r19, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <__vector_30+0x48>
    106e:	54 c0       	rjmp	.+168    	; 0x1118 <__stack+0x19>
				
	switch(chKey)
    1070:	64 36       	cpi	r22, 0x64	; 100
    1072:	61 f1       	breq	.+88     	; 0x10cc <__vector_30+0xa4>
    1074:	30 f4       	brcc	.+12     	; 0x1082 <__vector_30+0x5a>
    1076:	80 ed       	ldi	r24, 0xD0	; 208
    1078:	86 0f       	add	r24, r22
    107a:	8a 30       	cpi	r24, 0x0A	; 10
    107c:	08 f4       	brcc	.+2      	; 0x1080 <__vector_30+0x58>
    107e:	40 c0       	rjmp	.+128    	; 0x1100 <__stack+0x1>
    1080:	4b c0       	rjmp	.+150    	; 0x1118 <__stack+0x19>
    1082:	6d 36       	cpi	r22, 0x6D	; 109
    1084:	39 f0       	breq	.+14     	; 0x1094 <__vector_30+0x6c>
    1086:	65 37       	cpi	r22, 0x75	; 117
    1088:	39 f0       	breq	.+14     	; 0x1098 <__vector_30+0x70>
    108a:	68 36       	cpi	r22, 0x68	; 104
    108c:	09 f0       	breq	.+2      	; 0x1090 <__vector_30+0x68>
	{
		case 'h':
			m_pclockTime->hourUp();
			break;
		case 'm':
			m_pclockTime->minuteUp();
    108e:	44 c0       	rjmp	.+136    	; 0x1118 <__stack+0x19>
    1090:	6c d2       	rcall	.+1240   	; 0x156a <_ZN9ClockTime6hourUpEv>
			break;
    1092:	42 c0       	rjmp	.+132    	; 0x1118 <__stack+0x19>
		case 'u':
			tempDegree=((DynamicTubeDriver*)m_pDevices[NUM_DYNAMIC_DRIVER])->setBright(tempDegree+1);
    1094:	54 d2       	rcall	.+1192   	; 0x153e <_ZN9ClockTime8minuteUpEv>
    1096:	40 c0       	rjmp	.+128    	; 0x1118 <__stack+0x19>
    1098:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <_ZZ11__vector_30E10tempDegree>
    109c:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <_ZZ11__vector_30E10tempDegree+0x1>
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	c9 01       	movw	r24, r18
    10a6:	18 de       	rcall	.-976    	; 0xcd8 <_ZN17DynamicTubeDriver9setBrightEi>
    10a8:	68 2f       	mov	r22, r24
    10aa:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <_ZZ11__vector_30E10tempDegree>
			((UART*)m_pDevices[NUM_UART])->putChar('0'+tempDegree);
    10ae:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <_ZZ11__vector_30E10tempDegree+0x1>
    10b2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <m_pDevices>
    10b6:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <m_pDevices+0x1>
    10ba:	60 5d       	subi	r22, 0xD0	; 208
    10bc:	dc 01       	movw	r26, r24
    10be:	ed 91       	ld	r30, X+
    10c0:	fc 91       	ld	r31, X
    10c2:	04 84       	ldd	r0, Z+12	; 0x0c
    10c4:	f5 85       	ldd	r31, Z+13	; 0x0d
			break;
    10c6:	e0 2d       	mov	r30, r0
		case 'd':
			tempDegree=((DynamicTubeDriver*)m_pDevices[NUM_DYNAMIC_DRIVER])->setBright(tempDegree-1);
    10c8:	09 95       	icall
    10ca:	26 c0       	rjmp	.+76     	; 0x1118 <__stack+0x19>
    10cc:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <_ZZ11__vector_30E10tempDegree>
    10d0:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <_ZZ11__vector_30E10tempDegree+0x1>
    10d4:	61 50       	subi	r22, 0x01	; 1
    10d6:	71 09       	sbc	r23, r1
    10d8:	c9 01       	movw	r24, r18
    10da:	fe dd       	rcall	.-1028   	; 0xcd8 <_ZN17DynamicTubeDriver9setBrightEi>
    10dc:	68 2f       	mov	r22, r24
    10de:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <_ZZ11__vector_30E10tempDegree>
			((UART*)m_pDevices[NUM_UART])->putChar('0'+tempDegree);
    10e2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <_ZZ11__vector_30E10tempDegree+0x1>
    10e6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <m_pDevices>
    10ea:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <m_pDevices+0x1>
    10ee:	60 5d       	subi	r22, 0xD0	; 208
    10f0:	dc 01       	movw	r26, r24
    10f2:	ed 91       	ld	r30, X+
    10f4:	fc 91       	ld	r31, X
    10f6:	04 84       	ldd	r0, Z+12	; 0x0c
    10f8:	f5 85       	ldd	r31, Z+13	; 0x0d
			break;
    10fa:	e0 2d       	mov	r30, r0
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':((Driver74141 *)m_pDevices[NUM_71414_DRIVER])->setOutput(chKey-'0');
    10fc:	09 95       	icall
    10fe:	0c c0       	rjmp	.+24     	; 0x1118 <__stack+0x19>
    1100:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <m_pDevices+0x6>
    1104:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <m_pDevices+0x7>
    1108:	60 53       	subi	r22, 0x30	; 48
    110a:	dc 01       	movw	r26, r24
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	02 84       	ldd	r0, Z+10	; 0x0a
    1112:	f3 85       	ldd	r31, Z+11	; 0x0b
			break;
		
	}
}
    1114:	e0 2d       	mov	r30, r0
    1116:	09 95       	icall
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	0f 90       	pop	r0
    1132:	0b be       	out	0x3b, r0	; 59
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <_ZN4UARTC1Ev>:


// default constructor
UART::UART()
    113e:	fc 01       	movw	r30, r24
	void *m_pCallbackParam;
	driverCallback m_callback;
public:
	InterDevices()
	{
		m_pParam[0]=m_pParam[1]=m_pParam[2]=m_pCallbackParam=0;
    1140:	11 86       	std	Z+9, r1	; 0x09
    1142:	10 86       	std	Z+8, r1	; 0x08
    1144:	17 82       	std	Z+7, r1	; 0x07
    1146:	16 82       	std	Z+6, r1	; 0x06
    1148:	15 82       	std	Z+5, r1	; 0x05
    114a:	14 82       	std	Z+4, r1	; 0x04
    114c:	13 82       	std	Z+3, r1	; 0x03
    114e:	12 82       	std	Z+2, r1	; 0x02
		m_callback = 0;
    1150:	13 86       	std	Z+11, r1	; 0x0b
    1152:	12 86       	std	Z+10, r1	; 0x0a
    1154:	82 ed       	ldi	r24, 0xD2	; 210
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
    115c:	08 95       	ret

0000115e <_Z13TimerCallbackPv>:
    115e:	d2 d1       	rcall	.+932    	; 0x1504 <_ZN9ClockTime7FlyTimeEv>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	08 95       	ret

00001166 <_Z8Dev_initv>:
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	f8 94       	cli
    116c:	cc eb       	ldi	r28, 0xBC	; 188
    116e:	d2 e0       	ldi	r29, 0x02	; 2
    1170:	88 81       	ld	r24, Y
    1172:	99 81       	ldd	r25, Y+1	; 0x01
    1174:	dc 01       	movw	r26, r24
    1176:	ed 91       	ld	r30, X+
    1178:	fc 91       	ld	r31, X
    117a:	04 80       	ldd	r0, Z+4	; 0x04
    117c:	f5 81       	ldd	r31, Z+5	; 0x05
    117e:	e0 2d       	mov	r30, r0
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	09 95       	icall
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	dc 01       	movw	r26, r24
    1194:	ed 91       	ld	r30, X+
    1196:	fc 91       	ld	r31, X
    1198:	04 80       	ldd	r0, Z+4	; 0x04
    119a:	f5 81       	ldd	r31, Z+5	; 0x05
    119c:	e0 2d       	mov	r30, r0
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	09 95       	icall
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	dc 01       	movw	r26, r24
    11b2:	ed 91       	ld	r30, X+
    11b4:	fc 91       	ld	r31, X
    11b6:	04 80       	ldd	r0, Z+4	; 0x04
    11b8:	f5 81       	ldd	r31, Z+5	; 0x05
    11ba:	e0 2d       	mov	r30, r0
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	09 95       	icall
    11ca:	8e 81       	ldd	r24, Y+6	; 0x06
    11cc:	9f 81       	ldd	r25, Y+7	; 0x07
    11ce:	dc 01       	movw	r26, r24
    11d0:	ed 91       	ld	r30, X+
    11d2:	fc 91       	ld	r31, X
    11d4:	04 80       	ldd	r0, Z+4	; 0x04
    11d6:	f5 81       	ldd	r31, Z+5	; 0x05
    11d8:	e0 2d       	mov	r30, r0
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	09 95       	icall
    11e8:	88 85       	ldd	r24, Y+8	; 0x08
    11ea:	99 85       	ldd	r25, Y+9	; 0x09
    11ec:	dc 01       	movw	r26, r24
    11ee:	ed 91       	ld	r30, X+
    11f0:	fc 91       	ld	r31, X
    11f2:	04 80       	ldd	r0, Z+4	; 0x04
    11f4:	f5 81       	ldd	r31, Z+5	; 0x05
    11f6:	e0 2d       	mov	r30, r0
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	09 95       	icall
    1206:	8a 85       	ldd	r24, Y+10	; 0x0a
    1208:	9b 85       	ldd	r25, Y+11	; 0x0b
    120a:	dc 01       	movw	r26, r24
    120c:	ed 91       	ld	r30, X+
    120e:	fc 91       	ld	r31, X
    1210:	04 80       	ldd	r0, Z+4	; 0x04
    1212:	f5 81       	ldd	r31, Z+5	; 0x05
    1214:	e0 2d       	mov	r30, r0
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	09 95       	icall
    1224:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <pRealTimeClock>
    1228:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <pRealTimeClock+0x1>
    122c:	67 d8       	rcall	.-3890   	; 0x2fc <_ZN6absTWI4initEv>
    122e:	78 94       	sei
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <main>:
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	c5 5f       	subi	r28, 0xF5	; 245
    1240:	d1 09       	sbc	r29, r1
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	2f ef       	ldi	r18, 0xFF	; 255
    124e:	89 e6       	ldi	r24, 0x69	; 105
    1250:	98 e1       	ldi	r25, 0x18	; 24
    1252:	21 50       	subi	r18, 0x01	; 1
    1254:	80 40       	sbci	r24, 0x00	; 0
    1256:	90 40       	sbci	r25, 0x00	; 0
    1258:	e1 f7       	brne	.-8      	; 0x1252 <main+0x1c>
    125a:	00 c0       	rjmp	.+0      	; 0x125c <main+0x26>
    125c:	00 00       	nop
    125e:	8e 01       	movw	r16, r28
    1260:	0f 5f       	subi	r16, 0xFF	; 255
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	c8 01       	movw	r24, r16
    1266:	6b df       	rcall	.-298    	; 0x113e <_ZN4UARTC1Ev>
    1268:	5e 01       	movw	r10, r28
    126a:	2d e0       	ldi	r18, 0x0D	; 13
    126c:	a2 0e       	add	r10, r18
    126e:	b1 1c       	adc	r11, r1
    1270:	c5 01       	movw	r24, r10
    1272:	91 de       	rcall	.-734    	; 0xf96 <_ZN10TimeTickerC1Ev>
    1274:	7e 01       	movw	r14, r28
    1276:	89 e1       	ldi	r24, 0x19	; 25
    1278:	e8 0e       	add	r14, r24
    127a:	f1 1c       	adc	r15, r1
    127c:	c7 01       	movw	r24, r14
    127e:	ee d9       	rcall	.-3108   	; 0x65c <_ZN6DS3231C1Ev>
    1280:	4e 01       	movw	r8, r28
    1282:	9c e1       	ldi	r25, 0x1C	; 28
    1284:	89 0e       	add	r8, r25
    1286:	91 1c       	adc	r9, r1
    1288:	c4 01       	movw	r24, r8
    128a:	35 d1       	rcall	.+618    	; 0x14f6 <_ZN9ClockTimeC1Ev>
    128c:	6e 01       	movw	r12, r28
    128e:	20 e2       	ldi	r18, 0x20	; 32
    1290:	c2 0e       	add	r12, r18
    1292:	d1 1c       	adc	r13, r1
    1294:	c6 01       	movw	r24, r12
    1296:	cb db       	rcall	.-2154   	; 0xa2e <_ZN17DynamicTubeDriverC1Ev>
    1298:	3e 01       	movw	r6, r28
    129a:	85 e3       	ldi	r24, 0x35	; 53
    129c:	68 0e       	add	r6, r24
    129e:	71 1c       	adc	r7, r1
    12a0:	c3 01       	movw	r24, r6
    12a2:	c9 d9       	rcall	.-3182   	; 0x636 <_ZN11Driver74141C1Ev>
    12a4:	2e 01       	movw	r4, r28
    12a6:	91 e4       	ldi	r25, 0x41	; 65
    12a8:	49 0e       	add	r4, r25
    12aa:	51 1c       	adc	r5, r1
    12ac:	c2 01       	movw	r24, r4
    12ae:	51 d8       	rcall	.-3934   	; 0x352 <_ZN13BrightControlC1Ev>
    12b0:	1e 01       	movw	r2, r28
    12b2:	2f e4       	ldi	r18, 0x4F	; 79
    12b4:	22 0e       	add	r2, r18
    12b6:	31 1c       	adc	r3, r1
    12b8:	c1 01       	movw	r24, r2
    12ba:	7f dd       	rcall	.-1282   	; 0xdba <_ZN13SwitchControlC1Ev>
    12bc:	f0 92 b9 02 	sts	0x02B9, r15	; 0x8002b9 <pRealTimeClock+0x1>
    12c0:	e0 92 b8 02 	sts	0x02B8, r14	; 0x8002b8 <pRealTimeClock>
    12c4:	90 92 bb 02 	sts	0x02BB, r9	; 0x8002bb <m_pclockTime+0x1>
    12c8:	80 92 ba 02 	sts	0x02BA, r8	; 0x8002ba <m_pclockTime>
    12cc:	ec eb       	ldi	r30, 0xBC	; 188
    12ce:	f2 e0       	ldi	r31, 0x02	; 2
    12d0:	11 83       	std	Z+1, r17	; 0x01
    12d2:	00 83       	st	Z, r16
    12d4:	b3 82       	std	Z+3, r11	; 0x03
    12d6:	a2 82       	std	Z+2, r10	; 0x02
    12d8:	d5 82       	std	Z+5, r13	; 0x05
    12da:	c4 82       	std	Z+4, r12	; 0x04
    12dc:	77 82       	std	Z+7, r7	; 0x07
    12de:	66 82       	std	Z+6, r6	; 0x06
    12e0:	51 86       	std	Z+9, r5	; 0x09
    12e2:	40 86       	std	Z+8, r4	; 0x08
    12e4:	33 86       	std	Z+11, r3	; 0x0b
    12e6:	22 86       	std	Z+10, r2	; 0x0a
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	99 e6       	ldi	r25, 0x69	; 105
    12ec:	28 e1       	ldi	r18, 0x18	; 24
    12ee:	81 50       	subi	r24, 0x01	; 1
    12f0:	90 40       	sbci	r25, 0x00	; 0
    12f2:	20 40       	sbci	r18, 0x00	; 0
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <main+0xb8>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <main+0xc2>
    12f8:	00 00       	nop
    12fa:	35 df       	rcall	.-406    	; 0x1166 <_Z8Dev_initv>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	99 e6       	ldi	r25, 0x69	; 105
    1300:	28 e1       	ldi	r18, 0x18	; 24
    1302:	81 50       	subi	r24, 0x01	; 1
    1304:	90 40       	sbci	r25, 0x00	; 0
    1306:	20 40       	sbci	r18, 0x00	; 0
    1308:	e1 f7       	brne	.-8      	; 0x1302 <main+0xcc>
    130a:	00 c0       	rjmp	.+0      	; 0x130c <main+0xd6>
    130c:	00 00       	nop
    130e:	88 e6       	ldi	r24, 0x68	; 104
    1310:	8b 8f       	std	Y+27, r24	; 0x1b
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	cf 50       	subi	r28, 0x0F	; 15
    1318:	df 4f       	sbci	r29, 0xFF	; 255
    131a:	99 83       	std	Y+1, r25	; 0x01
    131c:	88 83       	st	Y, r24
    131e:	c1 5f       	subi	r28, 0xF1	; 241
    1320:	d0 40       	sbci	r29, 0x00	; 0
    1322:	62 ee       	ldi	r22, 0xE2	; 226
    1324:	71 e0       	ldi	r23, 0x01	; 1
    1326:	c8 01       	movw	r24, r16
    1328:	68 de       	rcall	.-816    	; 0xffa <_ZN4UART9putStringEPc>
    132a:	6c e1       	ldi	r22, 0x1C	; 28
    132c:	72 e0       	ldi	r23, 0x02	; 2
    132e:	c8 01       	movw	r24, r16
    1330:	64 de       	rcall	.-824    	; 0xffa <_ZN4UART9putStringEPc>
    1332:	66 ee       	ldi	r22, 0xE6	; 230
    1334:	71 e0       	ldi	r23, 0x01	; 1
    1336:	c8 01       	movw	r24, r16
    1338:	60 de       	rcall	.-832    	; 0xffa <_ZN4UART9putStringEPc>
    133a:	c7 01       	movw	r24, r14
    133c:	0d db       	rcall	.-2534   	; 0x958 <_ZN6DS32318set1HzOnEv>
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	91 ee       	ldi	r25, 0xE1	; 225
    1342:	24 e0       	ldi	r18, 0x04	; 4
    1344:	81 50       	subi	r24, 0x01	; 1
    1346:	90 40       	sbci	r25, 0x00	; 0
    1348:	20 40       	sbci	r18, 0x00	; 0
    134a:	e1 f7       	brne	.-8      	; 0x1344 <main+0x10e>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <main+0x118>
    134e:	00 00       	nop
    1350:	00 51       	subi	r16, 0x10	; 16
    1352:	1f 4f       	sbci	r17, 0xFF	; 255
    1354:	23 e0       	ldi	r18, 0x03	; 3
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	be 01       	movw	r22, r28
    135e:	6d 50       	subi	r22, 0x0D	; 13
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <pRealTimeClock>
    1366:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <pRealTimeClock+0x1>
    136a:	83 d9       	rcall	.-3322   	; 0x672 <_ZN6DS32318readRegsEPhiiPi>
    136c:	89 2b       	or	r24, r25
    136e:	09 f0       	breq	.+2      	; 0x1372 <main+0x13c>
    1370:	8e c0       	rjmp	.+284    	; 0x148e <main+0x258>
    1372:	cd 50       	subi	r28, 0x0D	; 13
    1374:	df 4f       	sbci	r29, 0xFF	; 255
    1376:	88 81       	ld	r24, Y
    1378:	c3 5f       	subi	r28, 0xF3	; 243
    137a:	d0 40       	sbci	r29, 0x00	; 0
    137c:	98 2f       	mov	r25, r24
    137e:	92 95       	swap	r25
    1380:	9f 70       	andi	r25, 0x0F	; 15
    1382:	99 0f       	add	r25, r25
    1384:	29 2f       	mov	r18, r25
    1386:	22 0f       	add	r18, r18
    1388:	22 0f       	add	r18, r18
    138a:	92 0f       	add	r25, r18
    138c:	8f 70       	andi	r24, 0x0F	; 15
    138e:	98 0f       	add	r25, r24
    1390:	cc 50       	subi	r28, 0x0C	; 12
    1392:	df 4f       	sbci	r29, 0xFF	; 255
    1394:	88 81       	ld	r24, Y
    1396:	c4 5f       	subi	r28, 0xF4	; 244
    1398:	d0 40       	sbci	r29, 0x00	; 0
    139a:	28 2f       	mov	r18, r24
    139c:	22 95       	swap	r18
    139e:	2f 70       	andi	r18, 0x0F	; 15
    13a0:	22 0f       	add	r18, r18
    13a2:	32 2f       	mov	r19, r18
    13a4:	33 0f       	add	r19, r19
    13a6:	33 0f       	add	r19, r19
    13a8:	23 0f       	add	r18, r19
    13aa:	8f 70       	andi	r24, 0x0F	; 15
    13ac:	28 0f       	add	r18, r24
    13ae:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
    13b2:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
    13b6:	cb 50       	subi	r28, 0x0B	; 11
    13b8:	df 4f       	sbci	r29, 0xFF	; 255
    13ba:	88 81       	ld	r24, Y
    13bc:	c5 5f       	subi	r28, 0xF5	; 245
    13be:	d0 40       	sbci	r29, 0x00	; 0
    13c0:	85 fb       	bst	r24, 5
    13c2:	33 27       	eor	r19, r19
    13c4:	30 f9       	bld	r19, 0
    13c6:	33 0f       	add	r19, r19
    13c8:	33 0f       	add	r19, r19
    13ca:	53 2f       	mov	r21, r19
    13cc:	55 0f       	add	r21, r21
    13ce:	55 0f       	add	r21, r21
    13d0:	53 0f       	add	r21, r19
    13d2:	84 fb       	bst	r24, 4
    13d4:	33 27       	eor	r19, r19
    13d6:	30 f9       	bld	r19, 0
    13d8:	33 0f       	add	r19, r19
    13da:	43 2f       	mov	r20, r19
    13dc:	44 0f       	add	r20, r20
    13de:	44 0f       	add	r20, r20
    13e0:	34 0f       	add	r19, r20
    13e2:	35 0f       	add	r19, r21
    13e4:	8f 70       	andi	r24, 0x0F	; 15
    13e6:	83 0f       	add	r24, r19
    13e8:	81 83       	std	Z+1, r24	; 0x01
    13ea:	22 83       	std	Z+2, r18	; 0x02
    13ec:	93 83       	std	Z+3, r25	; 0x03
    13ee:	cb 50       	subi	r28, 0x0B	; 11
    13f0:	df 4f       	sbci	r29, 0xFF	; 255
    13f2:	88 81       	ld	r24, Y
    13f4:	c5 5f       	subi	r28, 0xF5	; 245
    13f6:	d0 40       	sbci	r29, 0x00	; 0
    13f8:	1f 92       	push	r1
    13fa:	8f 93       	push	r24
    13fc:	cc 50       	subi	r28, 0x0C	; 12
    13fe:	df 4f       	sbci	r29, 0xFF	; 255
    1400:	88 81       	ld	r24, Y
    1402:	c4 5f       	subi	r28, 0xF4	; 244
    1404:	d0 40       	sbci	r29, 0x00	; 0
    1406:	1f 92       	push	r1
    1408:	8f 93       	push	r24
    140a:	cd 50       	subi	r28, 0x0D	; 13
    140c:	df 4f       	sbci	r29, 0xFF	; 255
    140e:	88 81       	ld	r24, Y
    1410:	c3 5f       	subi	r28, 0xF3	; 243
    1412:	d0 40       	sbci	r29, 0x00	; 0
    1414:	1f 92       	push	r1
    1416:	8f 93       	push	r24
    1418:	82 e5       	ldi	r24, 0x52	; 82
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	9f 93       	push	r25
    141e:	8f 93       	push	r24
    1420:	06 59       	subi	r16, 0x96	; 150
    1422:	11 09       	sbc	r17, r1
    1424:	1f 93       	push	r17
    1426:	0f 93       	push	r16
    1428:	e0 d0       	rcall	.+448    	; 0x15ea <sprintf>
    142a:	b8 01       	movw	r22, r16
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	e4 dd       	rcall	.-1080   	; 0xffa <_ZN4UART9putStringEPc>
    1432:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <m_pclockTime>
    1436:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <m_pclockTime+0x1>
    143a:	83 81       	ldd	r24, Z+3	; 0x03
    143c:	1f 92       	push	r1
    143e:	8f 93       	push	r24
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	1f 92       	push	r1
    1444:	8f 93       	push	r24
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	1f 92       	push	r1
    144a:	8f 93       	push	r24
    144c:	8b e7       	ldi	r24, 0x7B	; 123
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	9f 93       	push	r25
    1452:	8f 93       	push	r24
    1454:	1f 93       	push	r17
    1456:	0f 93       	push	r16
    1458:	c8 d0       	rcall	.+400    	; 0x15ea <sprintf>
    145a:	b8 01       	movw	r22, r16
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	cc dd       	rcall	.-1128   	; 0xffa <_ZN4UART9putStringEPc>
    1462:	a4 01       	movw	r20, r8
    1464:	6f ea       	ldi	r22, 0xAF	; 175
    1466:	78 e0       	ldi	r23, 0x08	; 8
    1468:	c5 01       	movw	r24, r10
    146a:	49 dc       	rcall	.-1902   	; 0xcfe <_ZN12InterDevices11regCallbackEPFiPvES0_>
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	91 ee       	ldi	r25, 0xE1	; 225
    1470:	24 e0       	ldi	r18, 0x04	; 4
    1472:	81 50       	subi	r24, 0x01	; 1
    1474:	90 40       	sbci	r25, 0x00	; 0
    1476:	20 40       	sbci	r18, 0x00	; 0
    1478:	e1 f7       	brne	.-8      	; 0x1472 <main+0x23c>
    147a:	00 c0       	rjmp	.+0      	; 0x147c <main+0x246>
    147c:	00 00       	nop
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	01 e0       	ldi	r16, 0x01	; 1
    148a:	10 e0       	ldi	r17, 0x00	; 0
    148c:	2b c0       	rjmp	.+86     	; 0x14e4 <main+0x2ae>
    148e:	6e e9       	ldi	r22, 0x9E	; 158
    1490:	72 e0       	ldi	r23, 0x02	; 2
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	b1 dd       	rcall	.-1182   	; 0xffa <_ZN4UART9putStringEPc>
    1498:	ff cf       	rjmp	.-2      	; 0x1498 <main+0x262>
    149a:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <g_UpdateHOURFlag>
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	49 f4       	brne	.+18     	; 0x14b4 <main+0x27e>
    14a2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <pRealTimeClock>
    14aa:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <pRealTimeClock+0x1>
    14ae:	80 da       	rcall	.-2816   	; 0x9b0 <_ZN6DS323110updateHourEi>
    14b0:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <g_UpdateHOURFlag>
    14b4:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <g_UpdateMINUTEFlag>
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	49 f4       	brne	.+18     	; 0x14ce <main+0x298>
    14bc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <pRealTimeClock>
    14c4:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <pRealTimeClock+0x1>
    14c8:	87 da       	rcall	.-2802   	; 0x9d8 <_ZN6DS323112updateMinuteEi>
    14ca:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <g_UpdateMINUTEFlag>
    14ce:	ce 01       	movw	r24, r28
    14d0:	8f 5b       	subi	r24, 0xBF	; 191
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN13BrightControl9getDegreeEv>
    14d8:	bc 01       	movw	r22, r24
    14da:	ce 01       	movw	r24, r28
    14dc:	80 96       	adiw	r24, 0x20	; 32
    14de:	fc db       	rcall	.-2056   	; 0xcd8 <_ZN17DynamicTubeDriver9setBrightEi>
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	ce 01       	movw	r24, r28
    14e6:	80 96       	adiw	r24, 0x20	; 32
    14e8:	c2 da       	rcall	.-2684   	; 0xa6e <_ZN17DynamicTubeDriver13driveNextTubeEv>
    14ea:	0f 5f       	subi	r16, 0xFF	; 255
    14ec:	1f 4f       	sbci	r17, 0xFF	; 255
    14ee:	0f 34       	cpi	r16, 0x4F	; 79
    14f0:	11 05       	cpc	r17, r1
    14f2:	c1 f7       	brne	.-16     	; 0x14e4 <main+0x2ae>
    14f4:	d2 cf       	rjmp	.-92     	; 0x149a <main+0x264>

000014f6 <_ZN9ClockTimeC1Ev>:
	m_timeValue.Hour = m_timeValue.Minute = m_timeValue.Second = 0;
	
} //ClockTime

// default destructor
ClockTime::~ClockTime()
    14f6:	fc 01       	movw	r30, r24
    14f8:	88 e1       	ldi	r24, 0x18	; 24
    14fa:	80 83       	st	Z, r24
    14fc:	13 82       	std	Z+3, r1	; 0x03
    14fe:	12 82       	std	Z+2, r1	; 0x02
    1500:	11 82       	std	Z+1, r1	; 0x01
    1502:	08 95       	ret

00001504 <_ZN9ClockTime7FlyTimeEv>:
{
} //~ClockTime

void ClockTime::FlyTime()
{
    1504:	fc 01       	movw	r30, r24
	if(m_timeValue.Second == 59)
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	9b 33       	cpi	r25, 0x3B	; 59
    150a:	b1 f4       	brne	.+44     	; 0x1538 <_ZN9ClockTime7FlyTimeEv+0x34>
	{
		if(m_timeValue.Minute == 59)
    150c:	82 81       	ldd	r24, Z+2	; 0x02
    150e:	8b 33       	cpi	r24, 0x3B	; 59
    1510:	79 f4       	brne	.+30     	; 0x1530 <_ZN9ClockTime7FlyTimeEv+0x2c>
		{
			if(m_timeValue.Hour == (m_MaximumHour-1)) // Maximum hour 
    1512:	21 81       	ldd	r18, Z+1	; 0x01
    1514:	42 2f       	mov	r20, r18
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	48 17       	cp	r20, r24
    1520:	59 07       	cpc	r21, r25
    1522:	11 f4       	brne	.+4      	; 0x1528 <_ZN9ClockTime7FlyTimeEv+0x24>
			{
				m_timeValue.Hour = 0;
    1524:	11 82       	std	Z+1, r1	; 0x01
    1526:	02 c0       	rjmp	.+4      	; 0x152c <_ZN9ClockTime7FlyTimeEv+0x28>
				
			}
			else
			{
				m_timeValue.Hour++;
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	21 83       	std	Z+1, r18	; 0x01
			}
			m_timeValue.Minute = 0;
    152c:	12 82       	std	Z+2, r1	; 0x02
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <_ZN9ClockTime7FlyTimeEv+0x30>
		}
		else
		{
			m_timeValue.Minute++;	
    1530:	8f 5f       	subi	r24, 0xFF	; 255
    1532:	82 83       	std	Z+2, r24	; 0x02
		}
		m_timeValue.Second = 0	;	
    1534:	13 82       	std	Z+3, r1	; 0x03
    1536:	08 95       	ret
	}
	else
		m_timeValue.Second++;
    1538:	9f 5f       	subi	r25, 0xFF	; 255
    153a:	93 83       	std	Z+3, r25	; 0x03
    153c:	08 95       	ret

0000153e <_ZN9ClockTime8minuteUpEv>:
}

void ClockTime::minuteUp()
{
    153e:	fc 01       	movw	r30, r24

		
		if(m_timeValue.Minute == 59)
    1540:	92 81       	ldd	r25, Z+2	; 0x02
    1542:	9b 33       	cpi	r25, 0x3B	; 59
    1544:	79 f4       	brne	.+30     	; 0x1564 <_ZN9ClockTime8minuteUpEv+0x26>
		{
			if(m_timeValue.Hour == m_MaximumHour-1)
    1546:	21 81       	ldd	r18, Z+1	; 0x01
    1548:	42 2f       	mov	r20, r18
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	48 17       	cp	r20, r24
    1554:	59 07       	cpc	r21, r25
    1556:	11 f4       	brne	.+4      	; 0x155c <_ZN9ClockTime8minuteUpEv+0x1e>
				m_timeValue.Hour = 0;
    1558:	11 82       	std	Z+1, r1	; 0x01
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <_ZN9ClockTime8minuteUpEv+0x22>
			else
				m_timeValue.Hour++;
    155c:	2f 5f       	subi	r18, 0xFF	; 255
    155e:	21 83       	std	Z+1, r18	; 0x01
			m_timeValue.Minute = 0;
    1560:	12 82       	std	Z+2, r1	; 0x02
    1562:	08 95       	ret
		}
		else
			m_timeValue.Minute++;
    1564:	9f 5f       	subi	r25, 0xFF	; 255
    1566:	92 83       	std	Z+2, r25	; 0x02
    1568:	08 95       	ret

0000156a <_ZN9ClockTime6hourUpEv>:
}
void ClockTime::hourUp()
{
    156a:	fc 01       	movw	r30, r24

	if(m_timeValue.Hour == m_MaximumHour-1)
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	49 2f       	mov	r20, r25
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	20 81       	ld	r18, Z
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	21 50       	subi	r18, 0x01	; 1
    1578:	31 09       	sbc	r19, r1
    157a:	42 17       	cp	r20, r18
    157c:	53 07       	cpc	r21, r19
    157e:	11 f4       	brne	.+4      	; 0x1584 <_ZN9ClockTime6hourUpEv+0x1a>
		m_timeValue.Hour = 0;
    1580:	11 82       	std	Z+1, r1	; 0x01
    1582:	08 95       	ret
	else
		m_timeValue.Hour++;	
    1584:	9f 5f       	subi	r25, 0xFF	; 255
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	08 95       	ret

0000158a <__divmodhi4>:
    158a:	97 fb       	bst	r25, 7
    158c:	07 2e       	mov	r0, r23
    158e:	16 f4       	brtc	.+4      	; 0x1594 <__divmodhi4+0xa>
    1590:	00 94       	com	r0
    1592:	06 d0       	rcall	.+12     	; 0x15a0 <__divmodhi4_neg1>
    1594:	77 fd       	sbrc	r23, 7
    1596:	08 d0       	rcall	.+16     	; 0x15a8 <__divmodhi4_neg2>
    1598:	14 d0       	rcall	.+40     	; 0x15c2 <__udivmodhi4>
    159a:	07 fc       	sbrc	r0, 7
    159c:	05 d0       	rcall	.+10     	; 0x15a8 <__divmodhi4_neg2>
    159e:	3e f4       	brtc	.+14     	; 0x15ae <__divmodhi4_exit>

000015a0 <__divmodhi4_neg1>:
    15a0:	90 95       	com	r25
    15a2:	81 95       	neg	r24
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	08 95       	ret

000015a8 <__divmodhi4_neg2>:
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255

000015ae <__divmodhi4_exit>:
    15ae:	08 95       	ret

000015b0 <__tablejump2__>:
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	00 24       	eor	r0, r0
    15b6:	00 1c       	adc	r0, r0
    15b8:	0b be       	out	0x3b, r0	; 59
    15ba:	07 90       	elpm	r0, Z+
    15bc:	f6 91       	elpm	r31, Z
    15be:	e0 2d       	mov	r30, r0
    15c0:	09 94       	ijmp

000015c2 <__udivmodhi4>:
    15c2:	aa 1b       	sub	r26, r26
    15c4:	bb 1b       	sub	r27, r27
    15c6:	51 e1       	ldi	r21, 0x11	; 17
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <__udivmodhi4_ep>

000015ca <__udivmodhi4_loop>:
    15ca:	aa 1f       	adc	r26, r26
    15cc:	bb 1f       	adc	r27, r27
    15ce:	a6 17       	cp	r26, r22
    15d0:	b7 07       	cpc	r27, r23
    15d2:	10 f0       	brcs	.+4      	; 0x15d8 <__udivmodhi4_ep>
    15d4:	a6 1b       	sub	r26, r22
    15d6:	b7 0b       	sbc	r27, r23

000015d8 <__udivmodhi4_ep>:
    15d8:	88 1f       	adc	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	5a 95       	dec	r21
    15de:	a9 f7       	brne	.-22     	; 0x15ca <__udivmodhi4_loop>
    15e0:	80 95       	com	r24
    15e2:	90 95       	com	r25
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	08 95       	ret

000015ea <sprintf>:
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	2e 97       	sbiw	r28, 0x0e	; 14
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	0d 89       	ldd	r16, Y+21	; 0x15
    1604:	1e 89       	ldd	r17, Y+22	; 0x16
    1606:	86 e0       	ldi	r24, 0x06	; 6
    1608:	8c 83       	std	Y+4, r24	; 0x04
    160a:	1a 83       	std	Y+2, r17	; 0x02
    160c:	09 83       	std	Y+1, r16	; 0x01
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	9f e7       	ldi	r25, 0x7F	; 127
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	ae 01       	movw	r20, r28
    1618:	47 5e       	subi	r20, 0xE7	; 231
    161a:	5f 4f       	sbci	r21, 0xFF	; 255
    161c:	6f 89       	ldd	r22, Y+23	; 0x17
    161e:	78 8d       	ldd	r23, Y+24	; 0x18
    1620:	ce 01       	movw	r24, r28
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	10 d0       	rcall	.+32     	; 0x1646 <vfprintf>
    1626:	ef 81       	ldd	r30, Y+7	; 0x07
    1628:	f8 85       	ldd	r31, Y+8	; 0x08
    162a:	e0 0f       	add	r30, r16
    162c:	f1 1f       	adc	r31, r17
    162e:	10 82       	st	Z, r1
    1630:	2e 96       	adiw	r28, 0x0e	; 14
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	08 95       	ret

00001646 <vfprintf>:
    1646:	2f 92       	push	r2
    1648:	3f 92       	push	r3
    164a:	4f 92       	push	r4
    164c:	5f 92       	push	r5
    164e:	6f 92       	push	r6
    1650:	7f 92       	push	r7
    1652:	8f 92       	push	r8
    1654:	9f 92       	push	r9
    1656:	af 92       	push	r10
    1658:	bf 92       	push	r11
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	2b 97       	sbiw	r28, 0x0b	; 11
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	6c 01       	movw	r12, r24
    167c:	7b 01       	movw	r14, r22
    167e:	8a 01       	movw	r16, r20
    1680:	fc 01       	movw	r30, r24
    1682:	17 82       	std	Z+7, r1	; 0x07
    1684:	16 82       	std	Z+6, r1	; 0x06
    1686:	83 81       	ldd	r24, Z+3	; 0x03
    1688:	81 ff       	sbrs	r24, 1
    168a:	bf c1       	rjmp	.+894    	; 0x1a0a <vfprintf+0x3c4>
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	3c 01       	movw	r6, r24
    1692:	f6 01       	movw	r30, r12
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	f7 01       	movw	r30, r14
    1698:	93 fd       	sbrc	r25, 3
    169a:	85 91       	lpm	r24, Z+
    169c:	93 ff       	sbrs	r25, 3
    169e:	81 91       	ld	r24, Z+
    16a0:	7f 01       	movw	r14, r30
    16a2:	88 23       	and	r24, r24
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <vfprintf+0x62>
    16a6:	ad c1       	rjmp	.+858    	; 0x1a02 <vfprintf+0x3bc>
    16a8:	85 32       	cpi	r24, 0x25	; 37
    16aa:	39 f4       	brne	.+14     	; 0x16ba <vfprintf+0x74>
    16ac:	93 fd       	sbrc	r25, 3
    16ae:	85 91       	lpm	r24, Z+
    16b0:	93 ff       	sbrs	r25, 3
    16b2:	81 91       	ld	r24, Z+
    16b4:	7f 01       	movw	r14, r30
    16b6:	85 32       	cpi	r24, 0x25	; 37
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <vfprintf+0x7c>
    16ba:	b6 01       	movw	r22, r12
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	d6 d1       	rcall	.+940    	; 0x1a6c <fputc>
    16c0:	e8 cf       	rjmp	.-48     	; 0x1692 <vfprintf+0x4c>
    16c2:	91 2c       	mov	r9, r1
    16c4:	21 2c       	mov	r2, r1
    16c6:	31 2c       	mov	r3, r1
    16c8:	ff e1       	ldi	r31, 0x1F	; 31
    16ca:	f3 15       	cp	r31, r3
    16cc:	d8 f0       	brcs	.+54     	; 0x1704 <vfprintf+0xbe>
    16ce:	8b 32       	cpi	r24, 0x2B	; 43
    16d0:	79 f0       	breq	.+30     	; 0x16f0 <vfprintf+0xaa>
    16d2:	38 f4       	brcc	.+14     	; 0x16e2 <vfprintf+0x9c>
    16d4:	80 32       	cpi	r24, 0x20	; 32
    16d6:	79 f0       	breq	.+30     	; 0x16f6 <vfprintf+0xb0>
    16d8:	83 32       	cpi	r24, 0x23	; 35
    16da:	a1 f4       	brne	.+40     	; 0x1704 <vfprintf+0xbe>
    16dc:	23 2d       	mov	r18, r3
    16de:	20 61       	ori	r18, 0x10	; 16
    16e0:	1d c0       	rjmp	.+58     	; 0x171c <vfprintf+0xd6>
    16e2:	8d 32       	cpi	r24, 0x2D	; 45
    16e4:	61 f0       	breq	.+24     	; 0x16fe <vfprintf+0xb8>
    16e6:	80 33       	cpi	r24, 0x30	; 48
    16e8:	69 f4       	brne	.+26     	; 0x1704 <vfprintf+0xbe>
    16ea:	23 2d       	mov	r18, r3
    16ec:	21 60       	ori	r18, 0x01	; 1
    16ee:	16 c0       	rjmp	.+44     	; 0x171c <vfprintf+0xd6>
    16f0:	83 2d       	mov	r24, r3
    16f2:	82 60       	ori	r24, 0x02	; 2
    16f4:	38 2e       	mov	r3, r24
    16f6:	e3 2d       	mov	r30, r3
    16f8:	e4 60       	ori	r30, 0x04	; 4
    16fa:	3e 2e       	mov	r3, r30
    16fc:	2a c0       	rjmp	.+84     	; 0x1752 <vfprintf+0x10c>
    16fe:	f3 2d       	mov	r31, r3
    1700:	f8 60       	ori	r31, 0x08	; 8
    1702:	1d c0       	rjmp	.+58     	; 0x173e <vfprintf+0xf8>
    1704:	37 fc       	sbrc	r3, 7
    1706:	2d c0       	rjmp	.+90     	; 0x1762 <vfprintf+0x11c>
    1708:	20 ed       	ldi	r18, 0xD0	; 208
    170a:	28 0f       	add	r18, r24
    170c:	2a 30       	cpi	r18, 0x0A	; 10
    170e:	40 f0       	brcs	.+16     	; 0x1720 <vfprintf+0xda>
    1710:	8e 32       	cpi	r24, 0x2E	; 46
    1712:	b9 f4       	brne	.+46     	; 0x1742 <vfprintf+0xfc>
    1714:	36 fc       	sbrc	r3, 6
    1716:	75 c1       	rjmp	.+746    	; 0x1a02 <vfprintf+0x3bc>
    1718:	23 2d       	mov	r18, r3
    171a:	20 64       	ori	r18, 0x40	; 64
    171c:	32 2e       	mov	r3, r18
    171e:	19 c0       	rjmp	.+50     	; 0x1752 <vfprintf+0x10c>
    1720:	36 fe       	sbrs	r3, 6
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <vfprintf+0xea>
    1724:	8a e0       	ldi	r24, 0x0A	; 10
    1726:	98 9e       	mul	r9, r24
    1728:	20 0d       	add	r18, r0
    172a:	11 24       	eor	r1, r1
    172c:	92 2e       	mov	r9, r18
    172e:	11 c0       	rjmp	.+34     	; 0x1752 <vfprintf+0x10c>
    1730:	ea e0       	ldi	r30, 0x0A	; 10
    1732:	2e 9e       	mul	r2, r30
    1734:	20 0d       	add	r18, r0
    1736:	11 24       	eor	r1, r1
    1738:	22 2e       	mov	r2, r18
    173a:	f3 2d       	mov	r31, r3
    173c:	f0 62       	ori	r31, 0x20	; 32
    173e:	3f 2e       	mov	r3, r31
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <vfprintf+0x10c>
    1742:	8c 36       	cpi	r24, 0x6C	; 108
    1744:	21 f4       	brne	.+8      	; 0x174e <vfprintf+0x108>
    1746:	83 2d       	mov	r24, r3
    1748:	80 68       	ori	r24, 0x80	; 128
    174a:	38 2e       	mov	r3, r24
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0x10c>
    174e:	88 36       	cpi	r24, 0x68	; 104
    1750:	41 f4       	brne	.+16     	; 0x1762 <vfprintf+0x11c>
    1752:	f7 01       	movw	r30, r14
    1754:	93 fd       	sbrc	r25, 3
    1756:	85 91       	lpm	r24, Z+
    1758:	93 ff       	sbrs	r25, 3
    175a:	81 91       	ld	r24, Z+
    175c:	7f 01       	movw	r14, r30
    175e:	81 11       	cpse	r24, r1
    1760:	b3 cf       	rjmp	.-154    	; 0x16c8 <vfprintf+0x82>
    1762:	98 2f       	mov	r25, r24
    1764:	9f 7d       	andi	r25, 0xDF	; 223
    1766:	95 54       	subi	r25, 0x45	; 69
    1768:	93 30       	cpi	r25, 0x03	; 3
    176a:	28 f4       	brcc	.+10     	; 0x1776 <vfprintf+0x130>
    176c:	0c 5f       	subi	r16, 0xFC	; 252
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	9f e3       	ldi	r25, 0x3F	; 63
    1772:	99 83       	std	Y+1, r25	; 0x01
    1774:	0d c0       	rjmp	.+26     	; 0x1790 <vfprintf+0x14a>
    1776:	83 36       	cpi	r24, 0x63	; 99
    1778:	31 f0       	breq	.+12     	; 0x1786 <vfprintf+0x140>
    177a:	83 37       	cpi	r24, 0x73	; 115
    177c:	71 f0       	breq	.+28     	; 0x179a <vfprintf+0x154>
    177e:	83 35       	cpi	r24, 0x53	; 83
    1780:	09 f0       	breq	.+2      	; 0x1784 <vfprintf+0x13e>
    1782:	55 c0       	rjmp	.+170    	; 0x182e <vfprintf+0x1e8>
    1784:	20 c0       	rjmp	.+64     	; 0x17c6 <vfprintf+0x180>
    1786:	f8 01       	movw	r30, r16
    1788:	80 81       	ld	r24, Z
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	0e 5f       	subi	r16, 0xFE	; 254
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	88 24       	eor	r8, r8
    1792:	83 94       	inc	r8
    1794:	91 2c       	mov	r9, r1
    1796:	53 01       	movw	r10, r6
    1798:	12 c0       	rjmp	.+36     	; 0x17be <vfprintf+0x178>
    179a:	28 01       	movw	r4, r16
    179c:	f2 e0       	ldi	r31, 0x02	; 2
    179e:	4f 0e       	add	r4, r31
    17a0:	51 1c       	adc	r5, r1
    17a2:	f8 01       	movw	r30, r16
    17a4:	a0 80       	ld	r10, Z
    17a6:	b1 80       	ldd	r11, Z+1	; 0x01
    17a8:	36 fe       	sbrs	r3, 6
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <vfprintf+0x16c>
    17ac:	69 2d       	mov	r22, r9
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x170>
    17b2:	6f ef       	ldi	r22, 0xFF	; 255
    17b4:	7f ef       	ldi	r23, 0xFF	; 255
    17b6:	c5 01       	movw	r24, r10
    17b8:	4e d1       	rcall	.+668    	; 0x1a56 <strnlen>
    17ba:	4c 01       	movw	r8, r24
    17bc:	82 01       	movw	r16, r4
    17be:	f3 2d       	mov	r31, r3
    17c0:	ff 77       	andi	r31, 0x7F	; 127
    17c2:	3f 2e       	mov	r3, r31
    17c4:	15 c0       	rjmp	.+42     	; 0x17f0 <vfprintf+0x1aa>
    17c6:	28 01       	movw	r4, r16
    17c8:	22 e0       	ldi	r18, 0x02	; 2
    17ca:	42 0e       	add	r4, r18
    17cc:	51 1c       	adc	r5, r1
    17ce:	f8 01       	movw	r30, r16
    17d0:	a0 80       	ld	r10, Z
    17d2:	b1 80       	ldd	r11, Z+1	; 0x01
    17d4:	36 fe       	sbrs	r3, 6
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <vfprintf+0x198>
    17d8:	69 2d       	mov	r22, r9
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x19c>
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	7f ef       	ldi	r23, 0xFF	; 255
    17e2:	c5 01       	movw	r24, r10
    17e4:	2d d1       	rcall	.+602    	; 0x1a40 <strnlen_P>
    17e6:	4c 01       	movw	r8, r24
    17e8:	f3 2d       	mov	r31, r3
    17ea:	f0 68       	ori	r31, 0x80	; 128
    17ec:	3f 2e       	mov	r3, r31
    17ee:	82 01       	movw	r16, r4
    17f0:	33 fc       	sbrc	r3, 3
    17f2:	19 c0       	rjmp	.+50     	; 0x1826 <vfprintf+0x1e0>
    17f4:	82 2d       	mov	r24, r2
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	88 16       	cp	r8, r24
    17fa:	99 06       	cpc	r9, r25
    17fc:	a0 f4       	brcc	.+40     	; 0x1826 <vfprintf+0x1e0>
    17fe:	b6 01       	movw	r22, r12
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	33 d1       	rcall	.+614    	; 0x1a6c <fputc>
    1806:	2a 94       	dec	r2
    1808:	f5 cf       	rjmp	.-22     	; 0x17f4 <vfprintf+0x1ae>
    180a:	f5 01       	movw	r30, r10
    180c:	37 fc       	sbrc	r3, 7
    180e:	85 91       	lpm	r24, Z+
    1810:	37 fe       	sbrs	r3, 7
    1812:	81 91       	ld	r24, Z+
    1814:	5f 01       	movw	r10, r30
    1816:	b6 01       	movw	r22, r12
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	28 d1       	rcall	.+592    	; 0x1a6c <fputc>
    181c:	21 10       	cpse	r2, r1
    181e:	2a 94       	dec	r2
    1820:	21 e0       	ldi	r18, 0x01	; 1
    1822:	82 1a       	sub	r8, r18
    1824:	91 08       	sbc	r9, r1
    1826:	81 14       	cp	r8, r1
    1828:	91 04       	cpc	r9, r1
    182a:	79 f7       	brne	.-34     	; 0x180a <vfprintf+0x1c4>
    182c:	e1 c0       	rjmp	.+450    	; 0x19f0 <vfprintf+0x3aa>
    182e:	84 36       	cpi	r24, 0x64	; 100
    1830:	11 f0       	breq	.+4      	; 0x1836 <vfprintf+0x1f0>
    1832:	89 36       	cpi	r24, 0x69	; 105
    1834:	39 f5       	brne	.+78     	; 0x1884 <vfprintf+0x23e>
    1836:	f8 01       	movw	r30, r16
    1838:	37 fe       	sbrs	r3, 7
    183a:	07 c0       	rjmp	.+14     	; 0x184a <vfprintf+0x204>
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	0c 5f       	subi	r16, 0xFC	; 252
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	08 c0       	rjmp	.+16     	; 0x185a <vfprintf+0x214>
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	07 2e       	mov	r0, r23
    1850:	00 0c       	add	r0, r0
    1852:	88 0b       	sbc	r24, r24
    1854:	99 0b       	sbc	r25, r25
    1856:	0e 5f       	subi	r16, 0xFE	; 254
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	f3 2d       	mov	r31, r3
    185c:	ff 76       	andi	r31, 0x6F	; 111
    185e:	3f 2e       	mov	r3, r31
    1860:	97 ff       	sbrs	r25, 7
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <vfprintf+0x230>
    1864:	90 95       	com	r25
    1866:	80 95       	com	r24
    1868:	70 95       	com	r23
    186a:	61 95       	neg	r22
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	8f 4f       	sbci	r24, 0xFF	; 255
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	f0 68       	ori	r31, 0x80	; 128
    1874:	3f 2e       	mov	r3, r31
    1876:	2a e0       	ldi	r18, 0x0A	; 10
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	a3 01       	movw	r20, r6
    187c:	33 d1       	rcall	.+614    	; 0x1ae4 <__ultoa_invert>
    187e:	88 2e       	mov	r8, r24
    1880:	86 18       	sub	r8, r6
    1882:	44 c0       	rjmp	.+136    	; 0x190c <vfprintf+0x2c6>
    1884:	85 37       	cpi	r24, 0x75	; 117
    1886:	31 f4       	brne	.+12     	; 0x1894 <vfprintf+0x24e>
    1888:	23 2d       	mov	r18, r3
    188a:	2f 7e       	andi	r18, 0xEF	; 239
    188c:	b2 2e       	mov	r11, r18
    188e:	2a e0       	ldi	r18, 0x0A	; 10
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	25 c0       	rjmp	.+74     	; 0x18de <vfprintf+0x298>
    1894:	93 2d       	mov	r25, r3
    1896:	99 7f       	andi	r25, 0xF9	; 249
    1898:	b9 2e       	mov	r11, r25
    189a:	8f 36       	cpi	r24, 0x6F	; 111
    189c:	c1 f0       	breq	.+48     	; 0x18ce <vfprintf+0x288>
    189e:	18 f4       	brcc	.+6      	; 0x18a6 <vfprintf+0x260>
    18a0:	88 35       	cpi	r24, 0x58	; 88
    18a2:	79 f0       	breq	.+30     	; 0x18c2 <vfprintf+0x27c>
    18a4:	ae c0       	rjmp	.+348    	; 0x1a02 <vfprintf+0x3bc>
    18a6:	80 37       	cpi	r24, 0x70	; 112
    18a8:	19 f0       	breq	.+6      	; 0x18b0 <vfprintf+0x26a>
    18aa:	88 37       	cpi	r24, 0x78	; 120
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <vfprintf+0x270>
    18ae:	a9 c0       	rjmp	.+338    	; 0x1a02 <vfprintf+0x3bc>
    18b0:	e9 2f       	mov	r30, r25
    18b2:	e0 61       	ori	r30, 0x10	; 16
    18b4:	be 2e       	mov	r11, r30
    18b6:	b4 fe       	sbrs	r11, 4
    18b8:	0d c0       	rjmp	.+26     	; 0x18d4 <vfprintf+0x28e>
    18ba:	fb 2d       	mov	r31, r11
    18bc:	f4 60       	ori	r31, 0x04	; 4
    18be:	bf 2e       	mov	r11, r31
    18c0:	09 c0       	rjmp	.+18     	; 0x18d4 <vfprintf+0x28e>
    18c2:	34 fe       	sbrs	r3, 4
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <vfprintf+0x294>
    18c6:	29 2f       	mov	r18, r25
    18c8:	26 60       	ori	r18, 0x06	; 6
    18ca:	b2 2e       	mov	r11, r18
    18cc:	06 c0       	rjmp	.+12     	; 0x18da <vfprintf+0x294>
    18ce:	28 e0       	ldi	r18, 0x08	; 8
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <vfprintf+0x298>
    18d4:	20 e1       	ldi	r18, 0x10	; 16
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x298>
    18da:	20 e1       	ldi	r18, 0x10	; 16
    18dc:	32 e0       	ldi	r19, 0x02	; 2
    18de:	f8 01       	movw	r30, r16
    18e0:	b7 fe       	sbrs	r11, 7
    18e2:	07 c0       	rjmp	.+14     	; 0x18f2 <vfprintf+0x2ac>
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	0c 5f       	subi	r16, 0xFC	; 252
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <vfprintf+0x2b8>
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 5f       	subi	r16, 0xFE	; 254
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	a3 01       	movw	r20, r6
    1900:	f1 d0       	rcall	.+482    	; 0x1ae4 <__ultoa_invert>
    1902:	88 2e       	mov	r8, r24
    1904:	86 18       	sub	r8, r6
    1906:	fb 2d       	mov	r31, r11
    1908:	ff 77       	andi	r31, 0x7F	; 127
    190a:	3f 2e       	mov	r3, r31
    190c:	36 fe       	sbrs	r3, 6
    190e:	0d c0       	rjmp	.+26     	; 0x192a <vfprintf+0x2e4>
    1910:	23 2d       	mov	r18, r3
    1912:	2e 7f       	andi	r18, 0xFE	; 254
    1914:	a2 2e       	mov	r10, r18
    1916:	89 14       	cp	r8, r9
    1918:	58 f4       	brcc	.+22     	; 0x1930 <vfprintf+0x2ea>
    191a:	34 fe       	sbrs	r3, 4
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <vfprintf+0x2ee>
    191e:	32 fc       	sbrc	r3, 2
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <vfprintf+0x2ee>
    1922:	83 2d       	mov	r24, r3
    1924:	8e 7e       	andi	r24, 0xEE	; 238
    1926:	a8 2e       	mov	r10, r24
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <vfprintf+0x2ee>
    192a:	b8 2c       	mov	r11, r8
    192c:	a3 2c       	mov	r10, r3
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <vfprintf+0x2f0>
    1930:	b8 2c       	mov	r11, r8
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <vfprintf+0x2f0>
    1934:	b9 2c       	mov	r11, r9
    1936:	a4 fe       	sbrs	r10, 4
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <vfprintf+0x312>
    193a:	fe 01       	movw	r30, r28
    193c:	e8 0d       	add	r30, r8
    193e:	f1 1d       	adc	r31, r1
    1940:	80 81       	ld	r24, Z
    1942:	80 33       	cpi	r24, 0x30	; 48
    1944:	21 f4       	brne	.+8      	; 0x194e <vfprintf+0x308>
    1946:	9a 2d       	mov	r25, r10
    1948:	99 7e       	andi	r25, 0xE9	; 233
    194a:	a9 2e       	mov	r10, r25
    194c:	09 c0       	rjmp	.+18     	; 0x1960 <vfprintf+0x31a>
    194e:	a2 fe       	sbrs	r10, 2
    1950:	06 c0       	rjmp	.+12     	; 0x195e <vfprintf+0x318>
    1952:	b3 94       	inc	r11
    1954:	b3 94       	inc	r11
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <vfprintf+0x31a>
    1958:	8a 2d       	mov	r24, r10
    195a:	86 78       	andi	r24, 0x86	; 134
    195c:	09 f0       	breq	.+2      	; 0x1960 <vfprintf+0x31a>
    195e:	b3 94       	inc	r11
    1960:	a3 fc       	sbrc	r10, 3
    1962:	10 c0       	rjmp	.+32     	; 0x1984 <vfprintf+0x33e>
    1964:	a0 fe       	sbrs	r10, 0
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <vfprintf+0x32e>
    1968:	b2 14       	cp	r11, r2
    196a:	80 f4       	brcc	.+32     	; 0x198c <vfprintf+0x346>
    196c:	28 0c       	add	r2, r8
    196e:	92 2c       	mov	r9, r2
    1970:	9b 18       	sub	r9, r11
    1972:	0d c0       	rjmp	.+26     	; 0x198e <vfprintf+0x348>
    1974:	b2 14       	cp	r11, r2
    1976:	58 f4       	brcc	.+22     	; 0x198e <vfprintf+0x348>
    1978:	b6 01       	movw	r22, r12
    197a:	80 e2       	ldi	r24, 0x20	; 32
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	76 d0       	rcall	.+236    	; 0x1a6c <fputc>
    1980:	b3 94       	inc	r11
    1982:	f8 cf       	rjmp	.-16     	; 0x1974 <vfprintf+0x32e>
    1984:	b2 14       	cp	r11, r2
    1986:	18 f4       	brcc	.+6      	; 0x198e <vfprintf+0x348>
    1988:	2b 18       	sub	r2, r11
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <vfprintf+0x34a>
    198c:	98 2c       	mov	r9, r8
    198e:	21 2c       	mov	r2, r1
    1990:	a4 fe       	sbrs	r10, 4
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <vfprintf+0x36c>
    1994:	b6 01       	movw	r22, r12
    1996:	80 e3       	ldi	r24, 0x30	; 48
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	68 d0       	rcall	.+208    	; 0x1a6c <fputc>
    199c:	a2 fe       	sbrs	r10, 2
    199e:	16 c0       	rjmp	.+44     	; 0x19cc <vfprintf+0x386>
    19a0:	a1 fc       	sbrc	r10, 1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <vfprintf+0x364>
    19a4:	88 e7       	ldi	r24, 0x78	; 120
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <vfprintf+0x368>
    19aa:	88 e5       	ldi	r24, 0x58	; 88
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	b6 01       	movw	r22, r12
    19b0:	0c c0       	rjmp	.+24     	; 0x19ca <vfprintf+0x384>
    19b2:	8a 2d       	mov	r24, r10
    19b4:	86 78       	andi	r24, 0x86	; 134
    19b6:	51 f0       	breq	.+20     	; 0x19cc <vfprintf+0x386>
    19b8:	a1 fe       	sbrs	r10, 1
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <vfprintf+0x37a>
    19bc:	8b e2       	ldi	r24, 0x2B	; 43
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <vfprintf+0x37c>
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	a7 fc       	sbrc	r10, 7
    19c4:	8d e2       	ldi	r24, 0x2D	; 45
    19c6:	b6 01       	movw	r22, r12
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	50 d0       	rcall	.+160    	; 0x1a6c <fputc>
    19cc:	89 14       	cp	r8, r9
    19ce:	30 f4       	brcc	.+12     	; 0x19dc <vfprintf+0x396>
    19d0:	b6 01       	movw	r22, r12
    19d2:	80 e3       	ldi	r24, 0x30	; 48
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	4a d0       	rcall	.+148    	; 0x1a6c <fputc>
    19d8:	9a 94       	dec	r9
    19da:	f8 cf       	rjmp	.-16     	; 0x19cc <vfprintf+0x386>
    19dc:	8a 94       	dec	r8
    19de:	f3 01       	movw	r30, r6
    19e0:	e8 0d       	add	r30, r8
    19e2:	f1 1d       	adc	r31, r1
    19e4:	80 81       	ld	r24, Z
    19e6:	b6 01       	movw	r22, r12
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	40 d0       	rcall	.+128    	; 0x1a6c <fputc>
    19ec:	81 10       	cpse	r8, r1
    19ee:	f6 cf       	rjmp	.-20     	; 0x19dc <vfprintf+0x396>
    19f0:	22 20       	and	r2, r2
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <vfprintf+0x3b0>
    19f4:	4e ce       	rjmp	.-868    	; 0x1692 <vfprintf+0x4c>
    19f6:	b6 01       	movw	r22, r12
    19f8:	80 e2       	ldi	r24, 0x20	; 32
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	37 d0       	rcall	.+110    	; 0x1a6c <fputc>
    19fe:	2a 94       	dec	r2
    1a00:	f7 cf       	rjmp	.-18     	; 0x19f0 <vfprintf+0x3aa>
    1a02:	f6 01       	movw	r30, r12
    1a04:	86 81       	ldd	r24, Z+6	; 0x06
    1a06:	97 81       	ldd	r25, Z+7	; 0x07
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <vfprintf+0x3c8>
    1a0a:	8f ef       	ldi	r24, 0xFF	; 255
    1a0c:	9f ef       	ldi	r25, 0xFF	; 255
    1a0e:	2b 96       	adiw	r28, 0x0b	; 11
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	df 90       	pop	r13
    1a28:	cf 90       	pop	r12
    1a2a:	bf 90       	pop	r11
    1a2c:	af 90       	pop	r10
    1a2e:	9f 90       	pop	r9
    1a30:	8f 90       	pop	r8
    1a32:	7f 90       	pop	r7
    1a34:	6f 90       	pop	r6
    1a36:	5f 90       	pop	r5
    1a38:	4f 90       	pop	r4
    1a3a:	3f 90       	pop	r3
    1a3c:	2f 90       	pop	r2
    1a3e:	08 95       	ret

00001a40 <strnlen_P>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	05 90       	lpm	r0, Z+
    1a44:	61 50       	subi	r22, 0x01	; 1
    1a46:	70 40       	sbci	r23, 0x00	; 0
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen_P+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <strnlen>:
    1a56:	fc 01       	movw	r30, r24
    1a58:	61 50       	subi	r22, 0x01	; 1
    1a5a:	70 40       	sbci	r23, 0x00	; 0
    1a5c:	01 90       	ld	r0, Z+
    1a5e:	01 10       	cpse	r0, r1
    1a60:	d8 f7       	brcc	.-10     	; 0x1a58 <strnlen+0x2>
    1a62:	80 95       	com	r24
    1a64:	90 95       	com	r25
    1a66:	8e 0f       	add	r24, r30
    1a68:	9f 1f       	adc	r25, r31
    1a6a:	08 95       	ret

00001a6c <fputc>:
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	fb 01       	movw	r30, r22
    1a76:	23 81       	ldd	r18, Z+3	; 0x03
    1a78:	21 fd       	sbrc	r18, 1
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <fputc+0x16>
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	9f ef       	ldi	r25, 0xFF	; 255
    1a80:	2c c0       	rjmp	.+88     	; 0x1ada <fputc+0x6e>
    1a82:	22 ff       	sbrs	r18, 2
    1a84:	16 c0       	rjmp	.+44     	; 0x1ab2 <fputc+0x46>
    1a86:	46 81       	ldd	r20, Z+6	; 0x06
    1a88:	57 81       	ldd	r21, Z+7	; 0x07
    1a8a:	24 81       	ldd	r18, Z+4	; 0x04
    1a8c:	35 81       	ldd	r19, Z+5	; 0x05
    1a8e:	42 17       	cp	r20, r18
    1a90:	53 07       	cpc	r21, r19
    1a92:	44 f4       	brge	.+16     	; 0x1aa4 <fputc+0x38>
    1a94:	a0 81       	ld	r26, Z
    1a96:	b1 81       	ldd	r27, Z+1	; 0x01
    1a98:	9d 01       	movw	r18, r26
    1a9a:	2f 5f       	subi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	31 83       	std	Z+1, r19	; 0x01
    1aa0:	20 83       	st	Z, r18
    1aa2:	8c 93       	st	X, r24
    1aa4:	26 81       	ldd	r18, Z+6	; 0x06
    1aa6:	37 81       	ldd	r19, Z+7	; 0x07
    1aa8:	2f 5f       	subi	r18, 0xFF	; 255
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	37 83       	std	Z+7, r19	; 0x07
    1aae:	26 83       	std	Z+6, r18	; 0x06
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <fputc+0x6e>
    1ab2:	8b 01       	movw	r16, r22
    1ab4:	ec 01       	movw	r28, r24
    1ab6:	fb 01       	movw	r30, r22
    1ab8:	00 84       	ldd	r0, Z+8	; 0x08
    1aba:	f1 85       	ldd	r31, Z+9	; 0x09
    1abc:	e0 2d       	mov	r30, r0
    1abe:	09 95       	icall
    1ac0:	89 2b       	or	r24, r25
    1ac2:	e1 f6       	brne	.-72     	; 0x1a7c <fputc+0x10>
    1ac4:	d8 01       	movw	r26, r16
    1ac6:	16 96       	adiw	r26, 0x06	; 6
    1ac8:	8d 91       	ld	r24, X+
    1aca:	9c 91       	ld	r25, X
    1acc:	17 97       	sbiw	r26, 0x07	; 7
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	17 96       	adiw	r26, 0x07	; 7
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
    1ad6:	16 97       	sbiw	r26, 0x06	; 6
    1ad8:	ce 01       	movw	r24, r28
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <__ultoa_invert>:
    1ae4:	fa 01       	movw	r30, r20
    1ae6:	aa 27       	eor	r26, r26
    1ae8:	28 30       	cpi	r18, 0x08	; 8
    1aea:	51 f1       	breq	.+84     	; 0x1b40 <__ultoa_invert+0x5c>
    1aec:	20 31       	cpi	r18, 0x10	; 16
    1aee:	81 f1       	breq	.+96     	; 0x1b50 <__ultoa_invert+0x6c>
    1af0:	e8 94       	clt
    1af2:	6f 93       	push	r22
    1af4:	6e 7f       	andi	r22, 0xFE	; 254
    1af6:	6e 5f       	subi	r22, 0xFE	; 254
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	af 4f       	sbci	r26, 0xFF	; 255
    1b00:	b1 e0       	ldi	r27, 0x01	; 1
    1b02:	3e d0       	rcall	.+124    	; 0x1b80 <__ultoa_invert+0x9c>
    1b04:	b4 e0       	ldi	r27, 0x04	; 4
    1b06:	3c d0       	rcall	.+120    	; 0x1b80 <__ultoa_invert+0x9c>
    1b08:	67 0f       	add	r22, r23
    1b0a:	78 1f       	adc	r23, r24
    1b0c:	89 1f       	adc	r24, r25
    1b0e:	9a 1f       	adc	r25, r26
    1b10:	a1 1d       	adc	r26, r1
    1b12:	68 0f       	add	r22, r24
    1b14:	79 1f       	adc	r23, r25
    1b16:	8a 1f       	adc	r24, r26
    1b18:	91 1d       	adc	r25, r1
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	6a 0f       	add	r22, r26
    1b1e:	71 1d       	adc	r23, r1
    1b20:	81 1d       	adc	r24, r1
    1b22:	91 1d       	adc	r25, r1
    1b24:	a1 1d       	adc	r26, r1
    1b26:	20 d0       	rcall	.+64     	; 0x1b68 <__ultoa_invert+0x84>
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <__ultoa_invert+0x48>
    1b2a:	68 94       	set
    1b2c:	3f 91       	pop	r19
    1b2e:	2a e0       	ldi	r18, 0x0A	; 10
    1b30:	26 9f       	mul	r18, r22
    1b32:	11 24       	eor	r1, r1
    1b34:	30 19       	sub	r19, r0
    1b36:	30 5d       	subi	r19, 0xD0	; 208
    1b38:	31 93       	st	Z+, r19
    1b3a:	de f6       	brtc	.-74     	; 0x1af2 <__ultoa_invert+0xe>
    1b3c:	cf 01       	movw	r24, r30
    1b3e:	08 95       	ret
    1b40:	46 2f       	mov	r20, r22
    1b42:	47 70       	andi	r20, 0x07	; 7
    1b44:	40 5d       	subi	r20, 0xD0	; 208
    1b46:	41 93       	st	Z+, r20
    1b48:	b3 e0       	ldi	r27, 0x03	; 3
    1b4a:	0f d0       	rcall	.+30     	; 0x1b6a <__ultoa_invert+0x86>
    1b4c:	c9 f7       	brne	.-14     	; 0x1b40 <__ultoa_invert+0x5c>
    1b4e:	f6 cf       	rjmp	.-20     	; 0x1b3c <__ultoa_invert+0x58>
    1b50:	46 2f       	mov	r20, r22
    1b52:	4f 70       	andi	r20, 0x0F	; 15
    1b54:	40 5d       	subi	r20, 0xD0	; 208
    1b56:	4a 33       	cpi	r20, 0x3A	; 58
    1b58:	18 f0       	brcs	.+6      	; 0x1b60 <__ultoa_invert+0x7c>
    1b5a:	49 5d       	subi	r20, 0xD9	; 217
    1b5c:	31 fd       	sbrc	r19, 1
    1b5e:	40 52       	subi	r20, 0x20	; 32
    1b60:	41 93       	st	Z+, r20
    1b62:	02 d0       	rcall	.+4      	; 0x1b68 <__ultoa_invert+0x84>
    1b64:	a9 f7       	brne	.-22     	; 0x1b50 <__ultoa_invert+0x6c>
    1b66:	ea cf       	rjmp	.-44     	; 0x1b3c <__ultoa_invert+0x58>
    1b68:	b4 e0       	ldi	r27, 0x04	; 4
    1b6a:	a6 95       	lsr	r26
    1b6c:	97 95       	ror	r25
    1b6e:	87 95       	ror	r24
    1b70:	77 95       	ror	r23
    1b72:	67 95       	ror	r22
    1b74:	ba 95       	dec	r27
    1b76:	c9 f7       	brne	.-14     	; 0x1b6a <__ultoa_invert+0x86>
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	61 05       	cpc	r22, r1
    1b7c:	71 05       	cpc	r23, r1
    1b7e:	08 95       	ret
    1b80:	9b 01       	movw	r18, r22
    1b82:	ac 01       	movw	r20, r24
    1b84:	0a 2e       	mov	r0, r26
    1b86:	06 94       	lsr	r0
    1b88:	57 95       	ror	r21
    1b8a:	47 95       	ror	r20
    1b8c:	37 95       	ror	r19
    1b8e:	27 95       	ror	r18
    1b90:	ba 95       	dec	r27
    1b92:	c9 f7       	brne	.-14     	; 0x1b86 <__ultoa_invert+0xa2>
    1b94:	62 0f       	add	r22, r18
    1b96:	73 1f       	adc	r23, r19
    1b98:	84 1f       	adc	r24, r20
    1b9a:	95 1f       	adc	r25, r21
    1b9c:	a0 1d       	adc	r26, r0
    1b9e:	08 95       	ret

00001ba0 <_exit>:
    1ba0:	f8 94       	cli

00001ba2 <__stop_program>:
    1ba2:	ff cf       	rjmp	.-2      	; 0x1ba2 <__stop_program>
