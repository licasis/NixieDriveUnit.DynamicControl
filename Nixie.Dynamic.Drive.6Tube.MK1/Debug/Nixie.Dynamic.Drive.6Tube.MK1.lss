
Nixie.Dynamic.Drive.6Tube.MK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  000018f6  0000198a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800288  00800288  00001b12  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054e8  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021b2  00000000  00000000  00007430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018dc  00000000  00000000  000095e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000089c  00000000  00000000  0000aec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001768  00000000  00000000  0000b75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000235f  00000000  00000000  0000cec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000f223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
       2:	00 00       	nop
       4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
       6:	00 00       	nop
       8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
       a:	00 00       	nop
       c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
       e:	00 00       	nop
      10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
      12:	00 00       	nop
      14:	3c c6       	rjmp	.+3192   	; 0xc8e <__vector_5>
      16:	00 00       	nop
      18:	dc c5       	rjmp	.+3000   	; 0xbd2 <__vector_6>
      1a:	00 00       	nop
      1c:	93 c5       	rjmp	.+2854   	; 0xb44 <__vector_7>
      1e:	00 00       	nop
      20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
      22:	00 00       	nop
      24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c5       	rjmp	.+2734   	; 0xad8 <__vector_10>
      2a:	00 00       	nop
      2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
      2e:	00 00       	nop
      30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
      32:	00 00       	nop
      34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
      36:	00 00       	nop
      38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
      3e:	00 00       	nop
      40:	2d c5       	rjmp	.+2650   	; 0xa9c <__vector_16>
      42:	00 00       	nop
      44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
      46:	00 00       	nop
      48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
      4e:	00 00       	nop
      50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
      52:	00 00       	nop
      54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
      56:	00 00       	nop
      58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
      5e:	00 00       	nop
      60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
      62:	00 00       	nop
      64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
      66:	00 00       	nop
      68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
      6e:	00 00       	nop
      70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
      72:	00 00       	nop
      74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c6       	rjmp	.+3336   	; 0xd82 <__vector_30>
      7a:	00 00       	nop
      7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
      7e:	00 00       	nop
      80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
      82:	00 00       	nop
      84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
      86:	00 00       	nop
      88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fa 03       	fmulsu	r23, r18
      8e:	08 04       	cpc	r0, r8
      90:	16 04       	cpc	r1, r6
      92:	24 04       	cpc	r2, r4
      94:	32 04       	cpc	r3, r2
      96:	40 04       	cpc	r4, r0
      98:	4e 04       	cpc	r4, r14
      9a:	5c 04       	cpc	r5, r12
      9c:	6a 04       	cpc	r6, r10
      9e:	78 04       	cpc	r7, r8

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d0 e1       	ldi	r29, 0x10	; 16
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	12 e0       	ldi	r17, 0x02	; 2
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e6 ef       	ldi	r30, 0xF6	; 246
      b4:	f8 e1       	ldi	r31, 0x18	; 24
      b6:	00 e0       	ldi	r16, 0x00	; 0
      b8:	0b bf       	out	0x3b, r16	; 59
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x14>
      bc:	07 90       	elpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a8 38       	cpi	r26, 0x88	; 136
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0x10>

000000c6 <__do_clear_bss>:
      c6:	23 e0       	ldi	r18, 0x03	; 3
      c8:	a8 e8       	ldi	r26, 0x88	; 136
      ca:	b2 e0       	ldi	r27, 0x02	; 2
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 35       	cpi	r26, 0x5C	; 92
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	5c d7       	rcall	.+3768   	; 0xf90 <main>
      d8:	0c 94 79 0c 	jmp	0x18f2	; 0x18f2 <_exit>

000000dc <__bad_interrupt>:
      dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_ZN6absTWI15_sequence_startEv>:
{
	
} //absTWI

// default destructor
absTWI::~absTWI()
      de:	84 ea       	ldi	r24, 0xA4	; 164
      e0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      e4:	e4 e7       	ldi	r30, 0x74	; 116
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	88 23       	and	r24, r24
      ec:	ec f7       	brge	.-6      	; 0xe8 <_ZN6absTWI15_sequence_startEv+0xa>
      ee:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
      f2:	88 7f       	andi	r24, 0xF8	; 248
      f4:	88 30       	cpi	r24, 0x08	; 8
      f6:	11 f0       	breq	.+4      	; 0xfc <_ZN6absTWI15_sequence_startEv+0x1e>
      f8:	80 31       	cpi	r24, 0x10	; 16
      fa:	19 f4       	brne	.+6      	; 0x102 <_ZN6absTWI15_sequence_startEv+0x24>
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	08 95       	ret
     102:	8f ef       	ldi	r24, 0xFF	; 255
     104:	9f ef       	ldi	r25, 0xFF	; 255
     106:	08 95       	ret

00000108 <_ZN6absTWI14_sequence_stopEv>:
     108:	84 e9       	ldi	r24, 0x94	; 148
     10a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	08 95       	ret

00000114 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE>:
     114:	66 0f       	add	r22, r22
     116:	77 1f       	adc	r23, r23
     118:	64 2b       	or	r22, r20
     11a:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     11e:	84 e8       	ldi	r24, 0x84	; 132
     120:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     124:	8f e1       	ldi	r24, 0x1F	; 31
     126:	9e e4       	ldi	r25, 0x4E	; 78
     128:	e4 e7       	ldi	r30, 0x74	; 116
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x1e>
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	90 f0       	brcs	.+36     	; 0x156 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x42>
     132:	20 81       	ld	r18, Z
     134:	22 23       	and	r18, r18
     136:	dc f7       	brge	.-10     	; 0x12e <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x1a>
     138:	18 16       	cp	r1, r24
     13a:	19 06       	cpc	r1, r25
     13c:	7c f4       	brge	.+30     	; 0x15c <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x48>
     13e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     142:	88 7f       	andi	r24, 0xF8	; 248
     144:	88 31       	cpi	r24, 0x18	; 24
     146:	69 f0       	breq	.+26     	; 0x162 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x4e>
     148:	80 34       	cpi	r24, 0x40	; 64
     14a:	59 f0       	breq	.+22     	; 0x162 <_ZN6absTWI17_sequence_addressEiNS_6OPCodeE+0x4e>
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	91 95       	neg	r25
     150:	81 95       	neg	r24
     152:	91 09       	sbc	r25, r1
     154:	08 95       	ret
     156:	8b ef       	ldi	r24, 0xFB	; 251
     158:	9f ef       	ldi	r25, 0xFF	; 255
     15a:	08 95       	ret
     15c:	8b ef       	ldi	r24, 0xFB	; 251
     15e:	9f ef       	ldi	r25, 0xFF	; 255
     160:	08 95       	ret
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	08 95       	ret

00000168 <_ZN6absTWI18_sequence_readDataEPhi>:
     168:	45 2b       	or	r20, r21
     16a:	21 f0       	breq	.+8      	; 0x174 <_ZN6absTWI18_sequence_readDataEPhi+0xc>
     16c:	84 e8       	ldi	r24, 0x84	; 132
     16e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     172:	03 c0       	rjmp	.+6      	; 0x17a <_ZN6absTWI18_sequence_readDataEPhi+0x12>
     174:	84 ec       	ldi	r24, 0xC4	; 196
     176:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     17a:	8f e1       	ldi	r24, 0x1F	; 31
     17c:	9e e4       	ldi	r25, 0x4E	; 78
     17e:	e4 e7       	ldi	r30, 0x74	; 116
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	02 c0       	rjmp	.+4      	; 0x188 <_ZN6absTWI18_sequence_readDataEPhi+0x20>
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	c8 f0       	brcs	.+50     	; 0x1ba <_ZN6absTWI18_sequence_readDataEPhi+0x52>
     188:	20 81       	ld	r18, Z
     18a:	22 23       	and	r18, r18
     18c:	dc f7       	brge	.-10     	; 0x184 <_ZN6absTWI18_sequence_readDataEPhi+0x1c>
     18e:	18 16       	cp	r1, r24
     190:	19 06       	cpc	r1, r25
     192:	b4 f4       	brge	.+44     	; 0x1c0 <_ZN6absTWI18_sequence_readDataEPhi+0x58>
     194:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     198:	88 7f       	andi	r24, 0xF8	; 248
     19a:	80 35       	cpi	r24, 0x50	; 80
     19c:	11 f0       	breq	.+4      	; 0x1a2 <_ZN6absTWI18_sequence_readDataEPhi+0x3a>
     19e:	88 35       	cpi	r24, 0x58	; 88
     1a0:	39 f4       	brne	.+14     	; 0x1b0 <_ZN6absTWI18_sequence_readDataEPhi+0x48>
     1a2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     1a6:	fb 01       	movw	r30, r22
     1a8:	80 83       	st	Z, r24
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	08 95       	ret
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	91 95       	neg	r25
     1b4:	81 95       	neg	r24
     1b6:	91 09       	sbc	r25, r1
     1b8:	08 95       	ret
     1ba:	8b ef       	ldi	r24, 0xFB	; 251
     1bc:	9f ef       	ldi	r25, 0xFF	; 255
     1be:	08 95       	ret
     1c0:	8b ef       	ldi	r24, 0xFB	; 251
     1c2:	9f ef       	ldi	r25, 0xFF	; 255
     1c4:	08 95       	ret

000001c6 <_ZN6absTWI19_sequence_writeDataEh>:
     1c6:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     1ca:	84 e8       	ldi	r24, 0x84	; 132
     1cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     1d0:	e4 e7       	ldi	r30, 0x74	; 116
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	88 23       	and	r24, r24
     1d8:	ec f7       	brge	.-6      	; 0x1d4 <_ZN6absTWI19_sequence_writeDataEh+0xe>
     1da:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     1de:	88 7f       	andi	r24, 0xF8	; 248
     1e0:	88 32       	cpi	r24, 0x28	; 40
     1e2:	29 f0       	breq	.+10     	; 0x1ee <_ZN6absTWI19_sequence_writeDataEh+0x28>
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	91 95       	neg	r25
     1e8:	81 95       	neg	r24
     1ea:	91 09       	sbc	r25, r1
     1ec:	08 95       	ret
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 95       	ret

000001f4 <_ZN6absTWI4readEPhj>:
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__data_end>
     208:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__data_end+0x1>
     20c:	23 2b       	or	r18, r19
     20e:	09 f4       	brne	.+2      	; 0x212 <_ZN6absTWI4readEPhj+0x1e>
     210:	48 c0       	rjmp	.+144    	; 0x2a2 <_ZN6absTWI4readEPhj+0xae>
     212:	fc 01       	movw	r30, r24
     214:	22 81       	ldd	r18, Z+2	; 0x02
     216:	20 38       	cpi	r18, 0x80	; 128
     218:	09 f4       	brne	.+2      	; 0x21c <_ZN6absTWI4readEPhj+0x28>
     21a:	46 c0       	rjmp	.+140    	; 0x2a8 <_ZN6absTWI4readEPhj+0xb4>
     21c:	41 15       	cp	r20, r1
     21e:	51 05       	cpc	r21, r1
     220:	09 f4       	brne	.+2      	; 0x224 <_ZN6absTWI4readEPhj+0x30>
     222:	45 c0       	rjmp	.+138    	; 0x2ae <_ZN6absTWI4readEPhj+0xba>
     224:	6a 01       	movw	r12, r20
     226:	7b 01       	movw	r14, r22
     228:	ec 01       	movw	r28, r24
     22a:	01 90       	ld	r0, Z+
     22c:	f0 81       	ld	r31, Z
     22e:	e0 2d       	mov	r30, r0
     230:	04 80       	ldd	r0, Z+4	; 0x04
     232:	f5 81       	ldd	r31, Z+5	; 0x05
     234:	e0 2d       	mov	r30, r0
     236:	09 95       	icall
     238:	8c 01       	movw	r16, r24
     23a:	89 2b       	or	r24, r25
     23c:	51 f0       	breq	.+20     	; 0x252 <_ZN6absTWI4readEPhj+0x5e>
     23e:	e8 81       	ld	r30, Y
     240:	f9 81       	ldd	r31, Y+1	; 0x01
     242:	06 80       	ldd	r0, Z+6	; 0x06
     244:	f7 81       	ldd	r31, Z+7	; 0x07
     246:	e0 2d       	mov	r30, r0
     248:	ce 01       	movw	r24, r28
     24a:	09 95       	icall
     24c:	80 2f       	mov	r24, r16
     24e:	91 2f       	mov	r25, r17
     250:	30 c0       	rjmp	.+96     	; 0x2b2 <_ZN6absTWI4readEPhj+0xbe>
     252:	6a 81       	ldd	r22, Y+2	; 0x02
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	e8 81       	ld	r30, Y
     258:	f9 81       	ldd	r31, Y+1	; 0x01
     25a:	00 84       	ldd	r0, Z+8	; 0x08
     25c:	f1 85       	ldd	r31, Z+9	; 0x09
     25e:	e0 2d       	mov	r30, r0
     260:	41 e0       	ldi	r20, 0x01	; 1
     262:	ce 01       	movw	r24, r28
     264:	09 95       	icall
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	21 f5       	brne	.+72     	; 0x2b2 <_ZN6absTWI4readEPhj+0xbe>
     26a:	87 01       	movw	r16, r14
     26c:	ec 0c       	add	r14, r12
     26e:	fd 1c       	adc	r15, r13
     270:	e8 81       	ld	r30, Y
     272:	f9 81       	ldd	r31, Y+1	; 0x01
     274:	02 84       	ldd	r0, Z+10	; 0x0a
     276:	f3 85       	ldd	r31, Z+11	; 0x0b
     278:	e0 2d       	mov	r30, r0
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	b8 01       	movw	r22, r16
     280:	ce 01       	movw	r24, r28
     282:	09 95       	icall
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	a9 f4       	brne	.+42     	; 0x2b2 <_ZN6absTWI4readEPhj+0xbe>
     288:	0f 5f       	subi	r16, 0xFF	; 255
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	e0 16       	cp	r14, r16
     28e:	f1 06       	cpc	r15, r17
     290:	79 f7       	brne	.-34     	; 0x270 <_ZN6absTWI4readEPhj+0x7c>
     292:	e8 81       	ld	r30, Y
     294:	f9 81       	ldd	r31, Y+1	; 0x01
     296:	06 80       	ldd	r0, Z+6	; 0x06
     298:	f7 81       	ldd	r31, Z+7	; 0x07
     29a:	e0 2d       	mov	r30, r0
     29c:	ce 01       	movw	r24, r28
     29e:	09 95       	icall
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <_ZN6absTWI4readEPhj+0xbe>
     2a2:	8c ef       	ldi	r24, 0xFC	; 252
     2a4:	9f ef       	ldi	r25, 0xFF	; 255
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <_ZN6absTWI4readEPhj+0xbe>
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	9f ef       	ldi	r25, 0xFF	; 255
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <_ZN6absTWI4readEPhj+0xbe>
     2ae:	88 e3       	ldi	r24, 0x38	; 56
     2b0:	9f ef       	ldi	r25, 0xFF	; 255
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	08 95       	ret

000002c4 <_ZN6absTWI5writeEPhj>:
     2c4:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__data_end>
     2c8:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__data_end+0x1>
     2cc:	23 2b       	or	r18, r19
     2ce:	39 f0       	breq	.+14     	; 0x2de <_ZN6absTWI5writeEPhj+0x1a>
     2d0:	fc 01       	movw	r30, r24
     2d2:	82 81       	ldd	r24, Z+2	; 0x02
     2d4:	80 38       	cpi	r24, 0x80	; 128
     2d6:	31 f0       	breq	.+12     	; 0x2e4 <_ZN6absTWI5writeEPhj+0x20>
     2d8:	8c e9       	ldi	r24, 0x9C	; 156
     2da:	9f ef       	ldi	r25, 0xFF	; 255
     2dc:	08 95       	ret
     2de:	8c ef       	ldi	r24, 0xFC	; 252
     2e0:	9f ef       	ldi	r25, 0xFF	; 255
     2e2:	08 95       	ret
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	9f ef       	ldi	r25, 0xFF	; 255
     2e8:	08 95       	ret

000002ea <_ZN6absTWIC1Ev>:
     2ea:	26 e0       	ldi	r18, 0x06	; 6
     2ec:	31 e0       	ldi	r19, 0x01	; 1
     2ee:	fc 01       	movw	r30, r24
     2f0:	31 83       	std	Z+1, r19	; 0x01
     2f2:	20 83       	st	Z, r18
     2f4:	20 e8       	ldi	r18, 0x80	; 128
     2f6:	22 83       	std	Z+2, r18	; 0x02
     2f8:	08 95       	ret

000002fa <_ZN6absTWI4initEv>:
	
} //~absTWI

int absTWI::init()
{
	if(m_isInited != 0)
     2fa:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__data_end>
     2fe:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__data_end+0x1>
     302:	21 15       	cp	r18, r1
     304:	31 05       	cpc	r19, r1
     306:	b9 f4       	brne	.+46     	; 0x336 <_ZN6absTWI4initEv+0x3c>
		return TWI_ERROR_INITIALIZED_ALREADY;
		
	DDRD |= 0x03; // set 1 at DDRD[0:1]
     308:	91 b3       	in	r25, 0x11	; 17
     30a:	93 60       	ori	r25, 0x03	; 3
     30c:	91 bb       	out	0x11, r25	; 17
    PORTD &= ~(1);
     30e:	90 98       	cbi	0x12, 0	; 18
	PORTD |= (1);
     310:	90 9a       	sbi	0x12, 0	; 18
	
	TWSR |= (1 << TWPS0);
     312:	e1 e7       	ldi	r30, 0x71	; 113
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	90 81       	ld	r25, Z
     318:	91 60       	ori	r25, 0x01	; 1
     31a:	90 83       	st	Z, r25
	TWBR = 0x12;
     31c:	82 e1       	ldi	r24, 0x12	; 18
     31e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TWCR = 1 <<TWEN;
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	m_isInited = 1;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__data_end+0x1>
     330:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
	return TWI_ERROR_OK;
     334:	02 c0       	rjmp	.+4      	; 0x33a <_ZN6absTWI4initEv+0x40>
} //~absTWI

int absTWI::init()
{
	if(m_isInited != 0)
		return TWI_ERROR_INITIALIZED_ALREADY;
     336:	2d ef       	ldi	r18, 0xFD	; 253
     338:	3f ef       	ldi	r19, 0xFF	; 255
	TWSR |= (1 << TWPS0);
	TWBR = 0x12;
	TWCR = 1 <<TWEN;
	m_isInited = 1;
	return TWI_ERROR_OK;
}
     33a:	c9 01       	movw	r24, r18
     33c:	08 95       	ret

0000033e <_ZN13BrightControlD1Ev>:
BrightControl::BrightControl():m_currentDegree(1)
{
} //BrightControl

// default destructor
BrightControl::~BrightControl()
     33e:	08 95       	ret

00000340 <_ZN13BrightControl4initEPvS0_S0_>:

	//std::free(p);
}
void BrightControl::init(void *param1,void *param2,void *param3)
{
	DDR_BRIGHT_CONTROL &= ~(1); // input mode for PORTF0
     340:	e1 e6       	ldi	r30, 0x61	; 97
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	8e 7f       	andi	r24, 0xFE	; 254
     348:	80 83       	st	Z, r24
     34a:	08 95       	ret

0000034c <_ZN13BrightControl6handleEv>:
	
}
void BrightControl::handle()
{
     34c:	08 95       	ret

0000034e <_ZN13BrightControlD0Ev>:
BrightControl::BrightControl():m_currentDegree(1)
{
} //BrightControl

// default destructor
BrightControl::~BrightControl()
     34e:	08 95       	ret

00000350 <_ZN13BrightControlC1Ev>:
#define PIN_BRIGHT_CONTROL PINF0
#define PORT_BRIGHT_CONTROL PORTF
// default constructor
int DegreeRangeLowTable[10]={0,100,200,300,400,500,600,700,800,900};
int DegreeRangeHighTable[10]={100,200,300,400,500,600,700,800,900,1024};
BrightControl::BrightControl():m_currentDegree(1)
     350:	fc 01       	movw	r30, r24
	void *m_pCallbackParam;
	driverCallback m_callback;
public:
	InterDevices()
	{
		m_pParam[0]=m_pParam[1]=m_pParam[2]=m_pCallbackParam=0;
     352:	11 86       	std	Z+9, r1	; 0x09
     354:	10 86       	std	Z+8, r1	; 0x08
     356:	17 82       	std	Z+7, r1	; 0x07
     358:	16 82       	std	Z+6, r1	; 0x06
     35a:	15 82       	std	Z+5, r1	; 0x05
     35c:	14 82       	std	Z+4, r1	; 0x04
     35e:	13 82       	std	Z+3, r1	; 0x03
     360:	12 82       	std	Z+2, r1	; 0x02
		m_callback = 0;
     362:	13 86       	std	Z+11, r1	; 0x0b
     364:	12 86       	std	Z+10, r1	; 0x0a
     366:	88 e1       	ldi	r24, 0x18	; 24
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	91 83       	std	Z+1, r25	; 0x01
     36c:	80 83       	st	Z, r24
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	95 87       	std	Z+13, r25	; 0x0d
     374:	84 87       	std	Z+12, r24	; 0x0c
     376:	08 95       	ret

00000378 <_ZN11Driver74141D1Ev>:
Driver74141::Driver74141()
{
} //Driver74141

// default destructor
Driver74141::~Driver74141()
     378:	08 95       	ret

0000037a <_ZN11Driver741414initEPvS0_S0_>:
	//std::free(p);
}

void Driver74141::init(void *param1,void *param2,void *param3)
{
		IO_DDR_FOR_74141  |= 0x0F;
     37a:	8a b3       	in	r24, 0x1a	; 26
     37c:	8f 60       	ori	r24, 0x0F	; 15
     37e:	8a bb       	out	0x1a, r24	; 26
		IO_PORT_FOR_74141 |= 0x0F;
     380:	8b b3       	in	r24, 0x1b	; 27
     382:	8f 60       	ori	r24, 0x0F	; 15
     384:	8b bb       	out	0x1b, r24	; 27
     386:	08 95       	ret

00000388 <_ZN11Driver741416handleEv>:
}
void Driver74141::handle()
{
     388:	08 95       	ret

0000038a <_ZN11Driver741419setOutputEh>:
	
	#if 1

	//IO_PORT_FOR_74141 = ~(0x0F);  // clear low 4  bits first
	//IO_PORT_FOR_74141 |= (value & 0x0F); // then set 4 bit as its new value
	IO_PORT_FOR_74141 =value; // then set 4 bit as its new value
     38a:	6b bb       	out	0x1b, r22	; 27
     38c:	08 95       	ret

0000038e <_ZN11Driver74141D0Ev>:
Driver74141::Driver74141()
{
} //Driver74141

// default destructor
Driver74141::~Driver74141()
     38e:	08 95       	ret

00000390 <_ZN11Driver74141C1Ev>:
#include "../Objects/ClockTime.h"
#include <util/delay.h>

#include <stdio.h>
// default constructor
Driver74141::Driver74141()
     390:	fc 01       	movw	r30, r24
	void *m_pCallbackParam;
	driverCallback m_callback;
public:
	InterDevices()
	{
		m_pParam[0]=m_pParam[1]=m_pParam[2]=m_pCallbackParam=0;
     392:	11 86       	std	Z+9, r1	; 0x09
     394:	10 86       	std	Z+8, r1	; 0x08
     396:	17 82       	std	Z+7, r1	; 0x07
     398:	16 82       	std	Z+6, r1	; 0x06
     39a:	15 82       	std	Z+5, r1	; 0x05
     39c:	14 82       	std	Z+4, r1	; 0x04
     39e:	13 82       	std	Z+3, r1	; 0x03
     3a0:	12 82       	std	Z+2, r1	; 0x02
		m_callback = 0;
     3a2:	13 86       	std	Z+11, r1	; 0x0b
     3a4:	12 86       	std	Z+10, r1	; 0x0a
     3a6:	86 e2       	ldi	r24, 0x26	; 38
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	91 83       	std	Z+1, r25	; 0x01
     3ac:	80 83       	st	Z, r24
     3ae:	08 95       	ret

000003b0 <_ZN6DS32314readEPhj>:
}
int DS3231::setMinute(int)
{
	
	return TWI_ERROR_OK;
}
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	08 95       	ret

000003b6 <_ZN6DS3231C1Ev>:
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
     3bc:	96 df       	rcall	.-212    	; 0x2ea <_ZN6absTWIC1Ev>
     3be:	8e e6       	ldi	r24, 0x6E	; 110
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	99 83       	std	Y+1, r25	; 0x01
     3c4:	88 83       	st	Y, r24
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <_ZN6DS32318readRegsEPhiiPi>:
     3cc:	6f 92       	push	r6
     3ce:	7f 92       	push	r7
     3d0:	8f 92       	push	r8
     3d2:	9f 92       	push	r9
     3d4:	af 92       	push	r10
     3d6:	bf 92       	push	r11
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	e2 e1       	ldi	r30, 0x12	; 18
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	7f 01       	movw	r14, r30
     3ee:	e4 1a       	sub	r14, r20
     3f0:	f5 0a       	sbc	r15, r21
     3f2:	2e 15       	cp	r18, r14
     3f4:	3f 05       	cpc	r19, r15
     3f6:	0c f4       	brge	.+2      	; 0x3fa <_ZN6DS32318readRegsEPhiiPi+0x2e>
     3f8:	79 01       	movw	r14, r18
     3fa:	d8 01       	movw	r26, r16
     3fc:	ed 92       	st	X+, r14
     3fe:	fc 92       	st	X, r15
     400:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__data_end>
     404:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__data_end+0x1>
     408:	23 2b       	or	r18, r19
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	bf c0       	rjmp	.+382    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     40e:	fc 01       	movw	r30, r24
     410:	22 81       	ldd	r18, Z+2	; 0x02
     412:	20 38       	cpi	r18, 0x80	; 128
     414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	bd c0       	rjmp	.+378    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     418:	8a 01       	movw	r16, r20
     41a:	d7 2e       	mov	r13, r23
     41c:	c6 2e       	mov	r12, r22
     41e:	ec 01       	movw	r28, r24
     420:	78 2e       	mov	r7, r24
     422:	6d 2e       	mov	r6, r29
     424:	01 90       	ld	r0, Z+
     426:	f0 81       	ld	r31, Z
     428:	e0 2d       	mov	r30, r0
     42a:	04 80       	ldd	r0, Z+4	; 0x04
     42c:	f5 81       	ldd	r31, Z+5	; 0x05
     42e:	e0 2d       	mov	r30, r0
     430:	09 95       	icall
     432:	89 2b       	or	r24, r25
     434:	a9 f0       	breq	.+42     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     436:	e8 81       	ld	r30, Y
     438:	f9 81       	ldd	r31, Y+1	; 0x01
     43a:	06 80       	ldd	r0, Z+6	; 0x06
     43c:	f7 81       	ldd	r31, Z+7	; 0x07
     43e:	e0 2d       	mov	r30, r0
     440:	ce 01       	movw	r24, r28
     442:	09 95       	icall
     444:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <m_pDevices>
     448:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <m_pDevices+0x1>
     44c:	dc 01       	movw	r26, r24
     44e:	ed 91       	ld	r30, X+
     450:	fc 91       	ld	r31, X
     452:	06 84       	ldd	r0, Z+14	; 0x0e
     454:	f7 85       	ldd	r31, Z+15	; 0x0f
     456:	e0 2d       	mov	r30, r0
     458:	62 e3       	ldi	r22, 0x32	; 50
     45a:	71 e0       	ldi	r23, 0x01	; 1
     45c:	09 95       	icall
     45e:	ff cf       	rjmp	.-2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     460:	6a 81       	ldd	r22, Y+2	; 0x02
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	e8 81       	ld	r30, Y
     466:	f9 81       	ldd	r31, Y+1	; 0x01
     468:	00 84       	ldd	r0, Z+8	; 0x08
     46a:	f1 85       	ldd	r31, Z+9	; 0x09
     46c:	e0 2d       	mov	r30, r0
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	ce 01       	movw	r24, r28
     472:	09 95       	icall
     474:	89 2b       	or	r24, r25
     476:	71 f0       	breq	.+28     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     478:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <m_pDevices>
     47c:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <m_pDevices+0x1>
     480:	dc 01       	movw	r26, r24
     482:	ed 91       	ld	r30, X+
     484:	fc 91       	ld	r31, X
     486:	06 84       	ldd	r0, Z+14	; 0x0e
     488:	f7 85       	ldd	r31, Z+15	; 0x0f
     48a:	e0 2d       	mov	r30, r0
     48c:	60 e4       	ldi	r22, 0x40	; 64
     48e:	71 e0       	ldi	r23, 0x01	; 1
     490:	09 95       	icall
     492:	ff cf       	rjmp	.-2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     494:	e8 81       	ld	r30, Y
     496:	f9 81       	ldd	r31, Y+1	; 0x01
     498:	04 84       	ldd	r0, Z+12	; 0x0c
     49a:	f5 85       	ldd	r31, Z+13	; 0x0d
     49c:	e0 2d       	mov	r30, r0
     49e:	60 2f       	mov	r22, r16
     4a0:	ce 01       	movw	r24, r28
     4a2:	09 95       	icall
     4a4:	89 2b       	or	r24, r25
     4a6:	a9 f0       	breq	.+42     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4a8:	e8 81       	ld	r30, Y
     4aa:	f9 81       	ldd	r31, Y+1	; 0x01
     4ac:	06 80       	ldd	r0, Z+6	; 0x06
     4ae:	f7 81       	ldd	r31, Z+7	; 0x07
     4b0:	e0 2d       	mov	r30, r0
     4b2:	ce 01       	movw	r24, r28
     4b4:	09 95       	icall
     4b6:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <m_pDevices>
     4ba:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <m_pDevices+0x1>
     4be:	dc 01       	movw	r26, r24
     4c0:	ed 91       	ld	r30, X+
     4c2:	fc 91       	ld	r31, X
     4c4:	06 84       	ldd	r0, Z+14	; 0x0e
     4c6:	f7 85       	ldd	r31, Z+15	; 0x0f
     4c8:	e0 2d       	mov	r30, r0
     4ca:	6e e4       	ldi	r22, 0x4E	; 78
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	09 95       	icall
     4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d2:	e8 81       	ld	r30, Y
     4d4:	f9 81       	ldd	r31, Y+1	; 0x01
     4d6:	04 80       	ldd	r0, Z+4	; 0x04
     4d8:	f5 81       	ldd	r31, Z+5	; 0x05
     4da:	e0 2d       	mov	r30, r0
     4dc:	ce 01       	movw	r24, r28
     4de:	09 95       	icall
     4e0:	8c 01       	movw	r16, r24
     4e2:	89 2b       	or	r24, r25
     4e4:	51 f0       	breq	.+20     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4e6:	e8 81       	ld	r30, Y
     4e8:	f9 81       	ldd	r31, Y+1	; 0x01
     4ea:	06 80       	ldd	r0, Z+6	; 0x06
     4ec:	f7 81       	ldd	r31, Z+7	; 0x07
     4ee:	e0 2d       	mov	r30, r0
     4f0:	ce 01       	movw	r24, r28
     4f2:	09 95       	icall
     4f4:	80 2f       	mov	r24, r16
     4f6:	91 2f       	mov	r25, r17
     4f8:	4e c0       	rjmp	.+156    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     4fa:	6a 81       	ldd	r22, Y+2	; 0x02
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e8 81       	ld	r30, Y
     500:	f9 81       	ldd	r31, Y+1	; 0x01
     502:	00 84       	ldd	r0, Z+8	; 0x08
     504:	f1 85       	ldd	r31, Z+9	; 0x09
     506:	e0 2d       	mov	r30, r0
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	ce 01       	movw	r24, r28
     50c:	09 95       	icall
     50e:	89 2b       	or	r24, r25
     510:	21 f4       	brne	.+8      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     512:	1e 14       	cp	r1, r14
     514:	1f 04       	cpc	r1, r15
     516:	7c f0       	brlt	.+30     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     518:	31 c0       	rjmp	.+98     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     51a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <m_pDevices>
     51e:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <m_pDevices+0x1>
     522:	dc 01       	movw	r26, r24
     524:	ed 91       	ld	r30, X+
     526:	fc 91       	ld	r31, X
     528:	06 84       	ldd	r0, Z+14	; 0x0e
     52a:	f7 85       	ldd	r31, Z+15	; 0x0f
     52c:	e0 2d       	mov	r30, r0
     52e:	6c e5       	ldi	r22, 0x5C	; 92
     530:	71 e0       	ldi	r23, 0x01	; 1
     532:	09 95       	icall
     534:	ff cf       	rjmp	.-2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     536:	0c 2d       	mov	r16, r12
     538:	1d 2d       	mov	r17, r13
     53a:	c1 2c       	mov	r12, r1
     53c:	d1 2c       	mov	r13, r1
     53e:	88 24       	eor	r8, r8
     540:	83 94       	inc	r8
     542:	91 2c       	mov	r9, r1
     544:	a1 2c       	mov	r10, r1
     546:	b1 2c       	mov	r11, r1
     548:	bf ef       	ldi	r27, 0xFF	; 255
     54a:	cb 1a       	sub	r12, r27
     54c:	db 0a       	sbc	r13, r27
     54e:	48 2d       	mov	r20, r8
     550:	59 2d       	mov	r21, r9
     552:	ec 14       	cp	r14, r12
     554:	fd 04       	cpc	r15, r13
     556:	11 f0       	breq	.+4      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     558:	4a 2d       	mov	r20, r10
     55a:	5b 2d       	mov	r21, r11
     55c:	e8 81       	ld	r30, Y
     55e:	f9 81       	ldd	r31, Y+1	; 0x01
     560:	02 84       	ldd	r0, Z+10	; 0x0a
     562:	f3 85       	ldd	r31, Z+11	; 0x0b
     564:	e0 2d       	mov	r30, r0
     566:	b8 01       	movw	r22, r16
     568:	87 2d       	mov	r24, r7
     56a:	96 2d       	mov	r25, r6
     56c:	09 95       	icall
     56e:	0f 5f       	subi	r16, 0xFF	; 255
     570:	1f 4f       	sbci	r17, 0xFF	; 255
     572:	ec 14       	cp	r14, r12
     574:	fd 04       	cpc	r15, r13
     576:	41 f7       	brne	.-48     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     578:	00 97       	sbiw	r24, 0x00	; 0
     57a:	69 f4       	brne	.+26     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     57c:	e8 81       	ld	r30, Y
     57e:	f9 81       	ldd	r31, Y+1	; 0x01
     580:	06 80       	ldd	r0, Z+6	; 0x06
     582:	f7 81       	ldd	r31, Z+7	; 0x07
     584:	e0 2d       	mov	r30, r0
     586:	ce 01       	movw	r24, r28
     588:	09 95       	icall
     58a:	05 c0       	rjmp	.+10     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     58c:	8c ef       	ldi	r24, 0xFC	; 252
     58e:	9f ef       	ldi	r25, 0xFF	; 255
     590:	02 c0       	rjmp	.+4      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     592:	8f ef       	ldi	r24, 0xFF	; 255
     594:	9f ef       	ldi	r25, 0xFF	; 255
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	08 95       	ret

000005b4 <_ZN6DS32318writeRegEih>:
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__data_end>
     5c4:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__data_end+0x1>
     5c8:	23 2b       	or	r18, r19
     5ca:	09 f4       	brne	.+2      	; 0x5ce <_ZN6DS32318writeRegEih+0x1a>
     5cc:	66 c0       	rjmp	.+204    	; 0x69a <_ZN6DS32318writeRegEih+0xe6>
     5ce:	fc 01       	movw	r30, r24
     5d0:	22 81       	ldd	r18, Z+2	; 0x02
     5d2:	20 38       	cpi	r18, 0x80	; 128
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <_ZN6DS32318writeRegEih+0x24>
     5d6:	64 c0       	rjmp	.+200    	; 0x6a0 <_ZN6DS32318writeRegEih+0xec>
     5d8:	e4 2e       	mov	r14, r20
     5da:	f6 2e       	mov	r15, r22
     5dc:	ec 01       	movw	r28, r24
     5de:	01 90       	ld	r0, Z+
     5e0:	f0 81       	ld	r31, Z
     5e2:	e0 2d       	mov	r30, r0
     5e4:	04 80       	ldd	r0, Z+4	; 0x04
     5e6:	f5 81       	ldd	r31, Z+5	; 0x05
     5e8:	e0 2d       	mov	r30, r0
     5ea:	09 95       	icall
     5ec:	8c 01       	movw	r16, r24
     5ee:	89 2b       	or	r24, r25
     5f0:	51 f0       	breq	.+20     	; 0x606 <_ZN6DS32318writeRegEih+0x52>
     5f2:	e8 81       	ld	r30, Y
     5f4:	f9 81       	ldd	r31, Y+1	; 0x01
     5f6:	06 80       	ldd	r0, Z+6	; 0x06
     5f8:	f7 81       	ldd	r31, Z+7	; 0x07
     5fa:	e0 2d       	mov	r30, r0
     5fc:	ce 01       	movw	r24, r28
     5fe:	09 95       	icall
     600:	80 2f       	mov	r24, r16
     602:	91 2f       	mov	r25, r17
     604:	4f c0       	rjmp	.+158    	; 0x6a4 <_ZN6DS32318writeRegEih+0xf0>
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	68 2f       	mov	r22, r24
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	e8 81       	ld	r30, Y
     60e:	f9 81       	ldd	r31, Y+1	; 0x01
     610:	00 84       	ldd	r0, Z+8	; 0x08
     612:	f1 85       	ldd	r31, Z+9	; 0x09
     614:	e0 2d       	mov	r30, r0
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	ce 01       	movw	r24, r28
     61a:	09 95       	icall
     61c:	8c 01       	movw	r16, r24
     61e:	89 2b       	or	r24, r25
     620:	51 f0       	breq	.+20     	; 0x636 <_ZN6DS32318writeRegEih+0x82>
     622:	e8 81       	ld	r30, Y
     624:	f9 81       	ldd	r31, Y+1	; 0x01
     626:	06 80       	ldd	r0, Z+6	; 0x06
     628:	f7 81       	ldd	r31, Z+7	; 0x07
     62a:	e0 2d       	mov	r30, r0
     62c:	ce 01       	movw	r24, r28
     62e:	09 95       	icall
     630:	80 2f       	mov	r24, r16
     632:	91 2f       	mov	r25, r17
     634:	37 c0       	rjmp	.+110    	; 0x6a4 <_ZN6DS32318writeRegEih+0xf0>
     636:	e8 81       	ld	r30, Y
     638:	f9 81       	ldd	r31, Y+1	; 0x01
     63a:	04 84       	ldd	r0, Z+12	; 0x0c
     63c:	f5 85       	ldd	r31, Z+13	; 0x0d
     63e:	e0 2d       	mov	r30, r0
     640:	6f 2d       	mov	r22, r15
     642:	ce 01       	movw	r24, r28
     644:	09 95       	icall
     646:	8c 01       	movw	r16, r24
     648:	89 2b       	or	r24, r25
     64a:	51 f0       	breq	.+20     	; 0x660 <_ZN6DS32318writeRegEih+0xac>
     64c:	e8 81       	ld	r30, Y
     64e:	f9 81       	ldd	r31, Y+1	; 0x01
     650:	06 80       	ldd	r0, Z+6	; 0x06
     652:	f7 81       	ldd	r31, Z+7	; 0x07
     654:	e0 2d       	mov	r30, r0
     656:	ce 01       	movw	r24, r28
     658:	09 95       	icall
     65a:	80 2f       	mov	r24, r16
     65c:	91 2f       	mov	r25, r17
     65e:	22 c0       	rjmp	.+68     	; 0x6a4 <_ZN6DS32318writeRegEih+0xf0>
     660:	e8 81       	ld	r30, Y
     662:	f9 81       	ldd	r31, Y+1	; 0x01
     664:	04 84       	ldd	r0, Z+12	; 0x0c
     666:	f5 85       	ldd	r31, Z+13	; 0x0d
     668:	e0 2d       	mov	r30, r0
     66a:	6e 2d       	mov	r22, r14
     66c:	ce 01       	movw	r24, r28
     66e:	09 95       	icall
     670:	8c 01       	movw	r16, r24
     672:	89 2b       	or	r24, r25
     674:	51 f0       	breq	.+20     	; 0x68a <_ZN6DS32318writeRegEih+0xd6>
     676:	e8 81       	ld	r30, Y
     678:	f9 81       	ldd	r31, Y+1	; 0x01
     67a:	06 80       	ldd	r0, Z+6	; 0x06
     67c:	f7 81       	ldd	r31, Z+7	; 0x07
     67e:	e0 2d       	mov	r30, r0
     680:	ce 01       	movw	r24, r28
     682:	09 95       	icall
     684:	80 2f       	mov	r24, r16
     686:	91 2f       	mov	r25, r17
     688:	0d c0       	rjmp	.+26     	; 0x6a4 <_ZN6DS32318writeRegEih+0xf0>
     68a:	e8 81       	ld	r30, Y
     68c:	f9 81       	ldd	r31, Y+1	; 0x01
     68e:	06 80       	ldd	r0, Z+6	; 0x06
     690:	f7 81       	ldd	r31, Z+7	; 0x07
     692:	e0 2d       	mov	r30, r0
     694:	ce 01       	movw	r24, r28
     696:	09 95       	icall
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <_ZN6DS32318writeRegEih+0xf0>
     69a:	8c ef       	ldi	r24, 0xFC	; 252
     69c:	9f ef       	ldi	r25, 0xFF	; 255
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <_ZN6DS32318writeRegEih+0xf0>
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	9f ef       	ldi	r25, 0xFF	; 255
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	08 95       	ret

000006b2 <_ZN6DS32318set1HzOnEv>:
int DS3231::set1HzOn()
{
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <_ZN6DS32318set1HzOnEv+0xe>
     6c0:	1f 92       	push	r1
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	7c 01       	movw	r14, r24
	unsigned char data;
	int readsize = -1;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	9f ef       	ldi	r25, 0xFF	; 255
     6cc:	9b 83       	std	Y+3, r25	; 0x03
     6ce:	8a 83       	std	Y+2, r24	; 0x02
	readRegs(&data,_DS_CONTROL_REGISTER_ADDR,1,&readsize);
     6d0:	8e 01       	movw	r16, r28
     6d2:	0e 5f       	subi	r16, 0xFE	; 254
     6d4:	1f 4f       	sbci	r17, 0xFF	; 255
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	4e e0       	ldi	r20, 0x0E	; 14
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	be 01       	movw	r22, r28
     6e0:	6f 5f       	subi	r22, 0xFF	; 255
     6e2:	7f 4f       	sbci	r23, 0xFF	; 255
     6e4:	c7 01       	movw	r24, r14
     6e6:	72 de       	rcall	.-796    	; 0x3cc <_ZN6DS32318readRegsEPhiiPi>
	data &= (~(1<<2 | 1<<3 |1<<4 ));
     6e8:	49 81       	ldd	r20, Y+1	; 0x01
     6ea:	43 7e       	andi	r20, 0xE3	; 227
     6ec:	49 83       	std	Y+1, r20	; 0x01
	return writeReg(_DS_CONTROL_REGISTER_ADDR,data);
     6ee:	6e e0       	ldi	r22, 0x0E	; 14
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	c7 01       	movw	r24, r14
     6f4:	5f df       	rcall	.-322    	; 0x5b4 <_ZN6DS32318writeRegEih>
}
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	08 95       	ret

0000070a <_ZN6DS323110updateHourEi>:
	//sprintf(Buffer,"updateHour start  = %d \r\n",value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	unsigned char data=0x00;
	//sprintf(Buffer,"updateHour end-0 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	if(value >=20)
     70a:	64 31       	cpi	r22, 0x14	; 20
     70c:	71 05       	cpc	r23, r1
     70e:	24 f0       	brlt	.+8      	; 0x718 <_ZN6DS323110updateHourEi+0xe>
	{
		data|=1<<5;
		value -=20;
     710:	64 51       	subi	r22, 0x14	; 20
     712:	71 09       	sbc	r23, r1
	unsigned char data=0x00;
	//sprintf(Buffer,"updateHour end-0 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	if(value >=20)
	{
		data|=1<<5;
     714:	40 e2       	ldi	r20, 0x20	; 32
     716:	01 c0       	rjmp	.+2      	; 0x71a <_ZN6DS323110updateHourEi+0x10>
int DS3231::updateHour(int value)
{
	char Buffer[100];
	//sprintf(Buffer,"updateHour start  = %d \r\n",value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	unsigned char data=0x00;
     718:	40 e0       	ldi	r20, 0x00	; 0
		data|=1<<5;
		value -=20;
	}
	//sprintf(Buffer,"updateHour end-1 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	if(value >= 10)
     71a:	6a 30       	cpi	r22, 0x0A	; 10
     71c:	71 05       	cpc	r23, r1
     71e:	1c f0       	brlt	.+6      	; 0x726 <_ZN6DS323110updateHourEi+0x1c>
	{
		data|=1<<4;
     720:	40 61       	ori	r20, 0x10	; 16
		value -=10;
     722:	6a 50       	subi	r22, 0x0A	; 10
     724:	71 09       	sbc	r23, r1
	}
	//sprintf(Buffer,"updateHour end-2 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	data|=(0x0F&value);
     726:	6f 70       	andi	r22, 0x0F	; 15
     728:	46 2b       	or	r20, r22
	//sprintf(Buffer,"updateHour end-3 0x%02x  , value = %d\r\n",data,value);
	//((UART*)m_pDevices[NUM_UART])->putString(Buffer);
	return writeReg(_DS_HOUR_REGISTER_ADDR,data);
     72a:	62 e0       	ldi	r22, 0x02	; 2
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	42 cf       	rjmp	.-380    	; 0x5b4 <_ZN6DS32318writeRegEih>
		
}
     730:	08 95       	ret

00000732 <_ZN6DS323112updateMinuteEi>:
int DS3231::updateMinute(int value)
{
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	8c 01       	movw	r16, r24
     73c:	fb 01       	movw	r30, r22

	unsigned char high;
	unsigned char low;
	low = (value %10);
     73e:	ca e0       	ldi	r28, 0x0A	; 10
     740:	d0 e0       	ldi	r29, 0x00	; 0
     742:	cb 01       	movw	r24, r22
     744:	be 01       	movw	r22, r28
     746:	ca d5       	rcall	.+2964   	; 0x12dc <__divmodhi4>
     748:	28 2f       	mov	r18, r24
	high = ((value - low)/10)<<4;
	low = high|low;
	return writeReg(_DS_MINUTE_REGISTER_ADDR,low);
     74a:	cf 01       	movw	r24, r30
     74c:	82 1b       	sub	r24, r18
     74e:	91 09       	sbc	r25, r1
     750:	be 01       	movw	r22, r28
     752:	c4 d5       	rcall	.+2952   	; 0x12dc <__divmodhi4>
     754:	46 2f       	mov	r20, r22
     756:	42 95       	swap	r20
     758:	40 7f       	andi	r20, 0xF0	; 240
     75a:	42 2b       	or	r20, r18
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	c8 01       	movw	r24, r16
     762:	28 df       	rcall	.-432    	; 0x5b4 <_ZN6DS32318writeRegEih>
	
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	08 95       	ret

0000076e <_ZN17DynamicTubeDriverD1Ev>:
// default destructor
DynamicTubeDriver::~DynamicTubeDriver()
{
} //~DynamicTubeDriver
void DynamicTubeDriver::operator delete(void * p) // or delete(void *, std::size_t)
{
     76e:	08 95       	ret

00000770 <_ZN17DynamicTubeDriver4initEPvS0_S0_>:
     770:	26 e0       	ldi	r18, 0x06	; 6
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	88 0f       	add	r24, r24
     778:	81 60       	ori	r24, 0x01	; 1
     77a:	21 50       	subi	r18, 0x01	; 1
     77c:	31 09       	sbc	r19, r1
     77e:	d9 f7       	brne	.-10     	; 0x776 <_ZN17DynamicTubeDriver4initEPvS0_S0_+0x6>
     780:	84 bb       	out	0x14, r24	; 20
     782:	15 ba       	out	0x15, r1	; 21
     784:	08 95       	ret

00000786 <_ZN17DynamicTubeDriverD0Ev>:
     786:	08 95       	ret

00000788 <_ZN17DynamicTubeDriverC1Ev>:
     788:	fc 01       	movw	r30, r24
     78a:	11 86       	std	Z+9, r1	; 0x09
     78c:	10 86       	std	Z+8, r1	; 0x08
     78e:	17 82       	std	Z+7, r1	; 0x07
     790:	16 82       	std	Z+6, r1	; 0x06
     792:	15 82       	std	Z+5, r1	; 0x05
     794:	14 82       	std	Z+4, r1	; 0x04
     796:	13 82       	std	Z+3, r1	; 0x03
     798:	12 82       	std	Z+2, r1	; 0x02
     79a:	13 86       	std	Z+11, r1	; 0x0b
     79c:	12 86       	std	Z+10, r1	; 0x0a
     79e:	80 e8       	ldi	r24, 0x80	; 128
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	91 83       	std	Z+1, r25	; 0x01
     7a4:	80 83       	st	Z, r24
     7a6:	14 8a       	std	Z+20, r1	; 0x14
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	84 87       	std	Z+12, r24	; 0x0c
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	85 87       	std	Z+13, r24	; 0x0d
     7b0:	86 87       	std	Z+14, r24	; 0x0e
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	87 87       	std	Z+15, r24	; 0x0f
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	80 8b       	std	Z+16, r24	; 0x10
     7ba:	88 e0       	ldi	r24, 0x08	; 8
     7bc:	81 8b       	std	Z+17, r24	; 0x11
     7be:	80 e2       	ldi	r24, 0x20	; 32
     7c0:	82 8b       	std	Z+18, r24	; 0x12
     7c2:	80 e1       	ldi	r24, 0x10	; 16
     7c4:	83 8b       	std	Z+19, r24	; 0x13
     7c6:	08 95       	ret

000007c8 <_ZN17DynamicTubeDriver13driveNextTubeEv>:
	}
	IO_DDR_FOR_DYNAMIC_SWITCH = temp;
	IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
}
void DynamicTubeDriver::driveNextTube()
{
     7c8:	dc 01       	movw	r26, r24
		
		
	
		
		
		IO_PORT_FOR_DYNAMIC_SWITCH = m_tube[m_currentTube] ;
     7ca:	54 96       	adiw	r26, 0x14	; 20
     7cc:	8c 91       	ld	r24, X
     7ce:	54 97       	sbiw	r26, 0x14	; 20
     7d0:	fd 01       	movw	r30, r26
     7d2:	e8 0f       	add	r30, r24
     7d4:	f1 1d       	adc	r31, r1
     7d6:	86 85       	ldd	r24, Z+14	; 0x0e
     7d8:	85 bb       	out	0x15, r24	; 21
		_delay_us(10000); 
		IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
		
#else

		switch(m_brightDegree)
     7da:	1c 96       	adiw	r26, 0x0c	; 12
     7dc:	ec 91       	ld	r30, X
     7de:	1c 97       	sbiw	r26, 0x0c	; 12
     7e0:	4e 2f       	mov	r20, r30
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	4a 30       	cpi	r20, 0x0A	; 10
     7e6:	51 05       	cpc	r21, r1
     7e8:	08 f0       	brcs	.+2      	; 0x7ec <_ZN17DynamicTubeDriver13driveNextTubeEv+0x24>
     7ea:	8f c0       	rjmp	.+286    	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     7ec:	fa 01       	movw	r30, r20
     7ee:	ea 5b       	subi	r30, 0xBA	; 186
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	87 c5       	rjmp	.+2830   	; 0x1302 <__tablejump2__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f4:	8f ea       	ldi	r24, 0xAF	; 175
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x30>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <_ZN17DynamicTubeDriver13driveNextTubeEv+0x36>
     7fe:	00 00       	nop
		{
			case Level0:
				_delay_us(LvOn0); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     800:	15 ba       	out	0x15, r1	; 21
     802:	8f ed       	ldi	r24, 0xDF	; 223
     804:	9e e2       	ldi	r25, 0x2E	; 46
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x3e>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <_ZN17DynamicTubeDriver13driveNextTubeEv+0x44>
     80c:	00 00       	nop
     80e:	7d c0       	rjmp	.+250    	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     810:	8f e5       	ldi	r24, 0x5F	; 95
     812:	99 e0       	ldi	r25, 0x09	; 9
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x4c>
     818:	00 c0       	rjmp	.+0      	; 0x81a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x52>
     81a:	00 00       	nop
				_delay_us(LvOff0); 
				break;
			case Level1:
				_delay_us(LvOn1); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     81c:	15 ba       	out	0x15, r1	; 21
     81e:	8f e2       	ldi	r24, 0x2F	; 47
     820:	9a e2       	ldi	r25, 0x2A	; 42
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x5a>
     826:	00 c0       	rjmp	.+0      	; 0x828 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x60>
     828:	00 00       	nop
     82a:	6f c0       	rjmp	.+222    	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     82c:	8f e0       	ldi	r24, 0x0F	; 15
     82e:	9e e0       	ldi	r25, 0x0E	; 14
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x68>
     834:	00 c0       	rjmp	.+0      	; 0x836 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x6e>
     836:	00 00       	nop
				_delay_us(LvOff1);
				break;
			case Level2:
				_delay_us(LvOn2); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     838:	15 ba       	out	0x15, r1	; 21
     83a:	8f e7       	ldi	r24, 0x7F	; 127
     83c:	95 e2       	ldi	r25, 0x25	; 37
     83e:	01 97       	sbiw	r24, 0x01	; 1
     840:	f1 f7       	brne	.-4      	; 0x83e <_ZN17DynamicTubeDriver13driveNextTubeEv+0x76>
     842:	00 c0       	rjmp	.+0      	; 0x844 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x7c>
     844:	00 00       	nop
     846:	61 c0       	rjmp	.+194    	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     848:	8f eb       	ldi	r24, 0xBF	; 191
     84a:	92 e1       	ldi	r25, 0x12	; 18
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <_ZN17DynamicTubeDriver13driveNextTubeEv+0x84>
     850:	00 c0       	rjmp	.+0      	; 0x852 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x8a>
     852:	00 00       	nop
				_delay_us(LvOff2);
				break;
			case Level3:
				_delay_us(LvOn3); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     854:	15 ba       	out	0x15, r1	; 21
     856:	8f ec       	ldi	r24, 0xCF	; 207
     858:	90 e2       	ldi	r25, 0x20	; 32
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x92>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x98>
     860:	00 00       	nop
     862:	53 c0       	rjmp	.+166    	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     864:	8f e6       	ldi	r24, 0x6F	; 111
     866:	97 e1       	ldi	r25, 0x17	; 23
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xa0>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <_ZN17DynamicTubeDriver13driveNextTubeEv+0xa6>
     86e:	00 00       	nop
				_delay_us(LvOff3);
				break;
			case Level4:
				_delay_us(LvOn4); 	
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     870:	15 ba       	out	0x15, r1	; 21
     872:	8f e1       	ldi	r24, 0x1F	; 31
     874:	9c e1       	ldi	r25, 0x1C	; 28
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xae>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <_ZN17DynamicTubeDriver13driveNextTubeEv+0xb4>
     87c:	00 00       	nop
     87e:	45 c0       	rjmp	.+138    	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     880:	8f e1       	ldi	r24, 0x1F	; 31
     882:	9c e1       	ldi	r25, 0x1C	; 28
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	f1 f7       	brne	.-4      	; 0x884 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xbc>
     888:	00 c0       	rjmp	.+0      	; 0x88a <_ZN17DynamicTubeDriver13driveNextTubeEv+0xc2>
     88a:	00 00       	nop
				_delay_us(LvOff4);
				break;
			case Level5:
				_delay_us(LvOn5);
				IO_PORT_FOR_DYNAMIC_SWITCH =  0x00;
     88c:	15 ba       	out	0x15, r1	; 21
     88e:	8f e6       	ldi	r24, 0x6F	; 111
     890:	97 e1       	ldi	r25, 0x17	; 23
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xca>
     896:	00 c0       	rjmp	.+0      	; 0x898 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xd0>
     898:	00 00       	nop
     89a:	37 c0       	rjmp	.+110    	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     89c:	8f ec       	ldi	r24, 0xCF	; 207
     89e:	90 e2       	ldi	r25, 0x20	; 32
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xd8>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xde>
     8a6:	00 00       	nop
				_delay_us(LvOff5);
				break;
			case Level6:
				_delay_us(LvOn6);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     8a8:	15 ba       	out	0x15, r1	; 21
     8aa:	8f eb       	ldi	r24, 0xBF	; 191
     8ac:	92 e1       	ldi	r25, 0x12	; 18
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <_ZN17DynamicTubeDriver13driveNextTubeEv+0xe6>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xec>
     8b4:	00 00       	nop
     8b6:	29 c0       	rjmp	.+82     	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     8b8:	8f e7       	ldi	r24, 0x7F	; 127
     8ba:	95 e2       	ldi	r25, 0x25	; 37
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <_ZN17DynamicTubeDriver13driveNextTubeEv+0xf4>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <_ZN17DynamicTubeDriver13driveNextTubeEv+0xfa>
     8c2:	00 00       	nop
				_delay_us(LvOff6);
				break;
			
			case Level7:
				_delay_us(LvOn7);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     8c4:	15 ba       	out	0x15, r1	; 21
     8c6:	8f e0       	ldi	r24, 0x0F	; 15
     8c8:	9e e0       	ldi	r25, 0x0E	; 14
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <_ZN17DynamicTubeDriver13driveNextTubeEv+0x102>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x108>
     8d0:	00 00       	nop
     8d2:	1b c0       	rjmp	.+54     	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     8d4:	8f e2       	ldi	r24, 0x2F	; 47
     8d6:	9a e2       	ldi	r25, 0x2A	; 42
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x110>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <_ZN17DynamicTubeDriver13driveNextTubeEv+0x116>
     8de:	00 00       	nop
				_delay_us(LvOff7);
				break;
			
			case Level8:
				_delay_us(LvOn8);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     8e0:	15 ba       	out	0x15, r1	; 21
     8e2:	8f e5       	ldi	r24, 0x5F	; 95
     8e4:	99 e0       	ldi	r25, 0x09	; 9
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x11e>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <_ZN17DynamicTubeDriver13driveNextTubeEv+0x124>
     8ec:	00 00       	nop
     8ee:	0d c0       	rjmp	.+26     	; 0x90a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x142>
     8f0:	8f ed       	ldi	r24, 0xDF	; 223
     8f2:	9e e2       	ldi	r25, 0x2E	; 46
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x12c>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <_ZN17DynamicTubeDriver13driveNextTubeEv+0x132>
     8fa:	00 00       	nop
				_delay_us(LvOff8);
				break;
			
			case Level9:
				_delay_us(LvOn9);
				IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
     8fc:	15 ba       	out	0x15, r1	; 21
     8fe:	8f ea       	ldi	r24, 0xAF	; 175
     900:	94 e0       	ldi	r25, 0x04	; 4
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x13a>
     906:	00 c0       	rjmp	.+0      	; 0x908 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x140>
     908:	00 00       	nop
				//_delay_us(LvOff9);
				break;
					
		}
#endif
		m_currentTube++;
     90a:	54 96       	adiw	r26, 0x14	; 20
     90c:	9c 91       	ld	r25, X
     90e:	54 97       	sbiw	r26, 0x14	; 20
     910:	9f 5f       	subi	r25, 0xFF	; 255
     912:	54 96       	adiw	r26, 0x14	; 20
     914:	9c 93       	st	X, r25
     916:	54 97       	sbiw	r26, 0x14	; 20
#if 1
		if(!(m_currentTube ^ 6))
     918:	96 30       	cpi	r25, 0x06	; 6
     91a:	19 f4       	brne	.+6      	; 0x922 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x15a>
			m_currentTube = 0;
     91c:	54 96       	adiw	r26, 0x14	; 20
     91e:	1c 92       	st	X, r1
     920:	10 c0       	rjmp	.+32     	; 0x942 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x17a>
#else
		if(m_currentTube== 6)
		m_currentTube = 0;
#endif				
		// Setup next tube here , because Tube was turned off and had cooling time at least 300ns  already. So, it don't need any cooltime anymore 
		switch(m_currentTube)
     922:	92 30       	cpi	r25, 0x02	; 2
     924:	79 f1       	breq	.+94     	; 0x984 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x1bc>
     926:	28 f4       	brcc	.+10     	; 0x932 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x16a>
     928:	99 23       	and	r25, r25
     92a:	59 f0       	breq	.+22     	; 0x942 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x17a>
     92c:	91 30       	cpi	r25, 0x01	; 1
     92e:	b1 f0       	breq	.+44     	; 0x95c <_ZN17DynamicTubeDriver13driveNextTubeEv+0x194>
     930:	6b c0       	rjmp	.+214    	; 0xa08 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x240>
     932:	94 30       	cpi	r25, 0x04	; 4
     934:	09 f4       	brne	.+2      	; 0x938 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x170>
     936:	47 c0       	rjmp	.+142    	; 0x9c6 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x1fe>
     938:	90 f1       	brcs	.+100    	; 0x99e <_ZN17DynamicTubeDriver13driveNextTubeEv+0x1d6>
     93a:	95 30       	cpi	r25, 0x05	; 5
     93c:	09 f4       	brne	.+2      	; 0x940 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x178>
     93e:	50 c0       	rjmp	.+160    	; 0x9e0 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x218>
     940:	63 c0       	rjmp	.+198    	; 0xa08 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x240>
										{	
											m_timeValue.Hour = H;\
											m_timeValue.Minute = M;\
											m_timeValue.Second = S;
										};
	Digit getTimeHour(){return m_timeValue.Hour;};
     942:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
     946:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
		{
			case 0:
				drive_value = m_pclockTime->getTimeHour()/10;
     94a:	81 81       	ldd	r24, Z+1	; 0x01
     94c:	6d ec       	ldi	r22, 0xCD	; 205
     94e:	86 9f       	mul	r24, r22
     950:	61 2d       	mov	r22, r1
     952:	11 24       	eor	r1, r1
     954:	66 95       	lsr	r22
     956:	66 95       	lsr	r22
     958:	66 95       	lsr	r22
				break;
     95a:	57 c0       	rjmp	.+174    	; 0xa0a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
     95c:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
     960:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
			case 1:
				drive_value =	m_pclockTime->getTimeHour()%10;
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	6d ec       	ldi	r22, 0xCD	; 205
     968:	96 9f       	mul	r25, r22
     96a:	61 2d       	mov	r22, r1
     96c:	11 24       	eor	r1, r1
     96e:	66 95       	lsr	r22
     970:	66 95       	lsr	r22
     972:	66 95       	lsr	r22
     974:	66 0f       	add	r22, r22
     976:	86 2f       	mov	r24, r22
     978:	88 0f       	add	r24, r24
     97a:	88 0f       	add	r24, r24
     97c:	68 0f       	add	r22, r24
     97e:	96 1b       	sub	r25, r22
     980:	69 2f       	mov	r22, r25
				break;
     982:	43 c0       	rjmp	.+134    	; 0xa0a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
	Digit getTimeMinute(){return m_timeValue.Minute;};
     984:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
     988:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
			case 2:
				drive_value = m_pclockTime->getTimeMinute()/10;
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	6d ec       	ldi	r22, 0xCD	; 205
     990:	86 9f       	mul	r24, r22
     992:	61 2d       	mov	r22, r1
     994:	11 24       	eor	r1, r1
     996:	66 95       	lsr	r22
     998:	66 95       	lsr	r22
     99a:	66 95       	lsr	r22
				break;
     99c:	36 c0       	rjmp	.+108    	; 0xa0a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
     99e:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
     9a2:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
			case 3:
				drive_value = (m_pclockTime->getTimeMinute())%10;
     9a6:	92 81       	ldd	r25, Z+2	; 0x02
     9a8:	6d ec       	ldi	r22, 0xCD	; 205
     9aa:	96 9f       	mul	r25, r22
     9ac:	61 2d       	mov	r22, r1
     9ae:	11 24       	eor	r1, r1
     9b0:	66 95       	lsr	r22
     9b2:	66 95       	lsr	r22
     9b4:	66 95       	lsr	r22
     9b6:	66 0f       	add	r22, r22
     9b8:	86 2f       	mov	r24, r22
     9ba:	88 0f       	add	r24, r24
     9bc:	88 0f       	add	r24, r24
     9be:	68 0f       	add	r22, r24
     9c0:	96 1b       	sub	r25, r22
     9c2:	69 2f       	mov	r22, r25
				break;
     9c4:	22 c0       	rjmp	.+68     	; 0xa0a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
	Digit getTimeSecond(){return m_timeValue.Second;};
     9c6:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
     9ca:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
			case 4:
				drive_value = m_pclockTime->getTimeSecond()/10;
     9ce:	83 81       	ldd	r24, Z+3	; 0x03
     9d0:	6d ec       	ldi	r22, 0xCD	; 205
     9d2:	86 9f       	mul	r24, r22
     9d4:	61 2d       	mov	r22, r1
     9d6:	11 24       	eor	r1, r1
     9d8:	66 95       	lsr	r22
     9da:	66 95       	lsr	r22
     9dc:	66 95       	lsr	r22
				break;
     9de:	15 c0       	rjmp	.+42     	; 0xa0a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
     9e0:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
     9e4:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
			case 5:
				drive_value = (m_pclockTime->getTimeSecond() )%10;
     9e8:	93 81       	ldd	r25, Z+3	; 0x03
     9ea:	6d ec       	ldi	r22, 0xCD	; 205
     9ec:	96 9f       	mul	r25, r22
     9ee:	61 2d       	mov	r22, r1
     9f0:	11 24       	eor	r1, r1
     9f2:	66 95       	lsr	r22
     9f4:	66 95       	lsr	r22
     9f6:	66 95       	lsr	r22
     9f8:	66 0f       	add	r22, r22
     9fa:	86 2f       	mov	r24, r22
     9fc:	88 0f       	add	r24, r24
     9fe:	88 0f       	add	r24, r24
     a00:	68 0f       	add	r22, r24
     a02:	96 1b       	sub	r25, r22
     a04:	69 2f       	mov	r22, r25
				break;
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x242>
	IO_DDR_FOR_DYNAMIC_SWITCH = temp;
	IO_PORT_FOR_DYNAMIC_SWITCH = 0x00;
}
void DynamicTubeDriver::driveNextTube()
{
	char drive_value=0xff;
     a08:	6f ef       	ldi	r22, 0xFF	; 255
				break;
				
		}	
		//((UART*)m_pDevices[NUM_UART])->putChar((drive_value+'0'));
		//((UART*)m_pDevices[NUM_UART])->putChar(('\n'));
		((Driver74141 *)m_pDevices[NUM_71414_DRIVER])->setOutput(drive_value);
     a0a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <m_pDevices+0x6>
     a0e:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <m_pDevices+0x7>
     a12:	dc 01       	movw	r26, r24
     a14:	ed 91       	ld	r30, X+
     a16:	fc 91       	ld	r31, X
     a18:	02 84       	ldd	r0, Z+10	; 0x0a
     a1a:	f3 85       	ldd	r31, Z+11	; 0x0b
     a1c:	e0 2d       	mov	r30, r0
     a1e:	09 95       	icall
     a20:	8f e1       	ldi	r24, 0x1F	; 31
     a22:	93 e0       	ldi	r25, 0x03	; 3
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <_ZN17DynamicTubeDriver13driveNextTubeEv+0x25c>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <_ZN17DynamicTubeDriver13driveNextTubeEv+0x262>
     a2a:	00 00       	nop
     a2c:	08 95       	ret

00000a2e <_ZN17DynamicTubeDriver6handleEv>:
		 //= (m_currentTube+1)%(TUBE_COUNT);
		
		
}
void DynamicTubeDriver::handle()
{
     a2e:	cc ce       	rjmp	.-616    	; 0x7c8 <_ZN17DynamicTubeDriver13driveNextTubeEv>
     a30:	08 95       	ret

00000a32 <_ZN17DynamicTubeDriver9setBrightEi>:
     a32:	69 30       	cpi	r22, 0x09	; 9
     a34:	71 05       	cpc	r23, r1
     a36:	24 f0       	brlt	.+8      	; 0xa40 <_ZN17DynamicTubeDriver9setBrightEi+0xe>
     a38:	29 e0       	ldi	r18, 0x09	; 9
     a3a:	fc 01       	movw	r30, r24
     a3c:	24 87       	std	Z+12, r18	; 0x0c
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <_ZN17DynamicTubeDriver9setBrightEi+0x1e>
     a40:	16 16       	cp	r1, r22
     a42:	17 06       	cpc	r1, r23
     a44:	1c f0       	brlt	.+6      	; 0xa4c <_ZN17DynamicTubeDriver9setBrightEi+0x1a>
     a46:	fc 01       	movw	r30, r24
     a48:	14 86       	std	Z+12, r1	; 0x0c
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <_ZN17DynamicTubeDriver9setBrightEi+0x1e>
     a4c:	fc 01       	movw	r30, r24
     a4e:	64 87       	std	Z+12, r22	; 0x0c
     a50:	fc 01       	movw	r30, r24
     a52:	84 85       	ldd	r24, Z+12	; 0x0c
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	08 95       	ret

00000a58 <_ZN12InterDevices11regCallbackEPFiPvES0_>:
 */ 
#include "InterDevices.h"

void InterDevices::regCallback(driverCallback callee,void *pData)
{
	m_pCallbackParam = pData;
     a58:	fc 01       	movw	r30, r24
     a5a:	51 87       	std	Z+9, r21	; 0x09
     a5c:	40 87       	std	Z+8, r20	; 0x08
	m_callback = callee;
     a5e:	73 87       	std	Z+11, r23	; 0x0b
     a60:	62 87       	std	Z+10, r22	; 0x0a
     a62:	08 95       	ret

00000a64 <_ZN13SwitchControlD1Ev>:
// default destructor
SwitchControl::~SwitchControl()
{
} //~SwitchControl
void SwitchControl::operator delete(void * p) // or delete(void *, std::size_t)
{
     a64:	08 95       	ret

00000a66 <_ZN13SwitchControl4initEPvS0_S0_>:
     a66:	82 b1       	in	r24, 0x02	; 2
     a68:	8f 79       	andi	r24, 0x9F	; 159
     a6a:	82 b9       	out	0x02, r24	; 2
     a6c:	83 b1       	in	r24, 0x03	; 3
     a6e:	80 66       	ori	r24, 0x60	; 96
     a70:	83 b9       	out	0x03, r24	; 3
     a72:	8a b7       	in	r24, 0x3a	; 58
     a74:	88 60       	ori	r24, 0x08	; 8
     a76:	8a bf       	out	0x3a, r24	; 58
     a78:	8a b7       	in	r24, 0x3a	; 58
     a7a:	80 62       	ori	r24, 0x20	; 32
     a7c:	8a bf       	out	0x3a, r24	; 58
     a7e:	89 b7       	in	r24, 0x39	; 57
     a80:	80 66       	ori	r24, 0x60	; 96
     a82:	89 bf       	out	0x39, r24	; 57
     a84:	87 e0       	ldi	r24, 0x07	; 7
     a86:	83 bf       	out	0x33, r24	; 51
     a88:	85 bd       	out	0x25, r24	; 37
     a8a:	87 b7       	in	r24, 0x37	; 55
     a8c:	8e 7f       	andi	r24, 0xFE	; 254
     a8e:	87 bf       	out	0x37, r24	; 55
     a90:	87 b7       	in	r24, 0x37	; 55
     a92:	8f 7b       	andi	r24, 0xBF	; 191
     a94:	87 bf       	out	0x37, r24	; 55
     a96:	08 95       	ret

00000a98 <_ZN13SwitchControl6handleEv>:
     a98:	08 95       	ret

00000a9a <_ZN13SwitchControlD0Ev>:
     a9a:	08 95       	ret

00000a9c <__vector_16>:
     a9c:	1f 92       	push	r1
     a9e:	0f 92       	push	r0
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	0f 92       	push	r0
     aa4:	11 24       	eor	r1, r1
     aa6:	8f 93       	push	r24
     aa8:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <g_DebouncingTimerMINUTECounter>
     aac:	8f 30       	cpi	r24, 0x0F	; 15
     aae:	48 f0       	brcs	.+18     	; 0xac2 <__vector_16+0x26>
     ab0:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <g_DebouncingMINUTEFlag>
     ab4:	87 b7       	in	r24, 0x37	; 55
     ab6:	8e 7f       	andi	r24, 0xFE	; 254
     ab8:	87 bf       	out	0x37, r24	; 55
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <g_UpdateMINUTEFlag>
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__vector_16+0x30>
     ac2:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <g_DebouncingTimerMINUTECounter>
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <g_DebouncingTimerMINUTECounter>
     acc:	8f 91       	pop	r24
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_10>:
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	8f 93       	push	r24
     ae4:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_DebouncingTimerHOURCounter>
     ae8:	8f 30       	cpi	r24, 0x0F	; 15
     aea:	48 f0       	brcs	.+18     	; 0xafe <__vector_10+0x26>
     aec:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <g_DebouncingHOURFlag>
     af0:	87 b7       	in	r24, 0x37	; 55
     af2:	8f 7b       	andi	r24, 0xBF	; 191
     af4:	87 bf       	out	0x37, r24	; 55
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_UpdateHOURFlag>
     afc:	05 c0       	rjmp	.+10     	; 0xb08 <__vector_10+0x30>
     afe:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_DebouncingTimerHOURCounter>
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <g_DebouncingTimerHOURCounter>
     b08:	8f 91       	pop	r24
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <_ZN13SwitchControlC1Ev>:
     b14:	fc 01       	movw	r30, r24
     b16:	11 86       	std	Z+9, r1	; 0x09
     b18:	10 86       	std	Z+8, r1	; 0x08
     b1a:	17 82       	std	Z+7, r1	; 0x07
     b1c:	16 82       	std	Z+6, r1	; 0x06
     b1e:	15 82       	std	Z+5, r1	; 0x05
     b20:	14 82       	std	Z+4, r1	; 0x04
     b22:	13 82       	std	Z+3, r1	; 0x03
     b24:	12 82       	std	Z+2, r1	; 0x02
     b26:	13 86       	std	Z+11, r1	; 0x0b
     b28:	12 86       	std	Z+10, r1	; 0x0a
     b2a:	8e e8       	ldi	r24, 0x8E	; 142
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	91 83       	std	Z+1, r25	; 0x01
     b30:	80 83       	st	Z, r24
     b32:	08 95       	ret

00000b34 <_ZN13SwitchControl6hourUpEv>:
{

}
void SwitchControl::hourUp()
{
	if(m_pclockTime != NULL)
     b34:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <m_pclockTime>
     b38:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <m_pclockTime+0x1>
     b3c:	00 97       	sbiw	r24, 0x00	; 0
		m_pclockTime->hourUp();
     b3e:	09 f0       	breq	.+2      	; 0xb42 <_ZN13SwitchControl6hourUpEv+0xe>
     b40:	bd c3       	rjmp	.+1914   	; 0x12bc <_ZN9ClockTime6hourUpEv>
     b42:	08 95       	ret

00000b44 <__vector_7>:
			g_UpdateMINUTEFlag = 1;
	}
	
}
ISR(INT6_vect)
{
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	0b b6       	in	r0, 0x3b	; 59
     b50:	0f 92       	push	r0
     b52:	2f 93       	push	r18
     b54:	3f 93       	push	r19
     b56:	4f 93       	push	r20
     b58:	5f 93       	push	r21
     b5a:	6f 93       	push	r22
     b5c:	7f 93       	push	r23
     b5e:	8f 93       	push	r24
     b60:	9f 93       	push	r25
     b62:	af 93       	push	r26
     b64:	bf 93       	push	r27
     b66:	cf 93       	push	r28
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31
	if(g_DebouncingHOURFlag==0)
     b6c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <g_DebouncingHOURFlag>
     b70:	81 11       	cpse	r24, r1
     b72:	13 c0       	rjmp	.+38     	; 0xb9a <__vector_7+0x56>
	{
		g_DebouncingHOURFlag = 1; // 상태변경
     b74:	c1 e0       	ldi	r28, 0x01	; 1
     b76:	c0 93 8b 02 	sts	0x028B, r28	; 0x80028b <g_DebouncingHOURFlag>
		g_DebouncingTimerHOURCounter = 0 ; //카운터 리셋
     b7a:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <g_DebouncingTimerHOURCounter>
		TCNT2 = 0; // 카운터 레지스터 리셋
     b7e:	14 bc       	out	0x24, r1	; 36
		TIFR &= ~(1<<TOV2); // (혹시나 걸렸을지도 모를....) 기존 Iterrupt flag를 초기화한다
     b80:	86 b7       	in	r24, 0x36	; 54
     b82:	8f 7b       	andi	r24, 0xBF	; 191
     b84:	86 bf       	out	0x36, r24	; 54
		TIMSK |= (1<<TOIE2); // Timer2 Overflow interrupt disable
     b86:	87 b7       	in	r24, 0x37	; 55
     b88:	80 64       	ori	r24, 0x40	; 64
     b8a:	87 bf       	out	0x37, r24	; 55
		((SwitchControl*)m_pDevices[NUM_SWITCH_CONTROL_DRIVER])->hourUp();
     b8c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <m_pDevices+0xa>
     b90:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <m_pDevices+0xb>
     b94:	cf df       	rcall	.-98     	; 0xb34 <_ZN13SwitchControl6hourUpEv>
			g_UpdateHOURFlag = 1;
     b96:	c0 93 8a 02 	sts	0x028A, r28	; 0x80028a <g_UpdateHOURFlag>
	}

}
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	cf 91       	pop	r28
     ba0:	bf 91       	pop	r27
     ba2:	af 91       	pop	r26
     ba4:	9f 91       	pop	r25
     ba6:	8f 91       	pop	r24
     ba8:	7f 91       	pop	r23
     baa:	6f 91       	pop	r22
     bac:	5f 91       	pop	r21
     bae:	4f 91       	pop	r20
     bb0:	3f 91       	pop	r19
     bb2:	2f 91       	pop	r18
     bb4:	0f 90       	pop	r0
     bb6:	0b be       	out	0x3b, r0	; 59
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <_ZN13SwitchControl8MinuteUpEv>:
	if(m_pclockTime != NULL)
		m_pclockTime->hourUp();
}
void SwitchControl::MinuteUp()
{
	if(m_pclockTime != NULL)
     bc2:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <m_pclockTime>
     bc6:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <m_pclockTime+0x1>
     bca:	00 97       	sbiw	r24, 0x00	; 0
		m_pclockTime->minuteUp();
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <_ZN13SwitchControl8MinuteUpEv+0xe>
     bce:	60 c3       	rjmp	.+1728   	; 0x1290 <_ZN9ClockTime8minuteUpEv>
     bd0:	08 95       	ret

00000bd2 <__vector_6>:
#endif

#ifdef USE_INTERRUPT_SW

ISR(INT5_vect)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	0b b6       	in	r0, 0x3b	; 59
     bde:	0f 92       	push	r0
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	cf 93       	push	r28
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31

	if(g_DebouncingMINUTEFlag==0)
     bfa:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_DebouncingMINUTEFlag>
     bfe:	81 11       	cpse	r24, r1
     c00:	13 c0       	rjmp	.+38     	; 0xc28 <__vector_6+0x56>
	{
		g_DebouncingMINUTEFlag = 1; // 상태변경
     c02:	c1 e0       	ldi	r28, 0x01	; 1
     c04:	c0 93 8e 02 	sts	0x028E, r28	; 0x80028e <g_DebouncingMINUTEFlag>
		g_DebouncingTimerMINUTECounter = 0 ; //카운터 리셋
     c08:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <g_DebouncingTimerMINUTECounter>
		TCNT0 = 0; // 카운터 레지스터 리셋
     c0c:	12 be       	out	0x32, r1	; 50
		TIFR &= ~(1<<TOV0); // (혹시나 걸렸을지도 모를....) 기존 Iterrupt flag를 초기화한다
     c0e:	86 b7       	in	r24, 0x36	; 54
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	86 bf       	out	0x36, r24	; 54
		TIMSK |=(1<<TOIE0); // Timer0 Overflow interrupt disable
     c14:	87 b7       	in	r24, 0x37	; 55
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	87 bf       	out	0x37, r24	; 55
		((SwitchControl*)m_pDevices[NUM_SWITCH_CONTROL_DRIVER])->MinuteUp();
     c1a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <m_pDevices+0xa>
     c1e:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <m_pDevices+0xb>
     c22:	cf df       	rcall	.-98     	; 0xbc2 <_ZN13SwitchControl8MinuteUpEv>
			g_UpdateMINUTEFlag = 1;
     c24:	c0 93 8d 02 	sts	0x028D, r28	; 0x80028d <g_UpdateMINUTEFlag>
	}
	
}
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	cf 91       	pop	r28
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0b be       	out	0x3b, r0	; 59
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <_ZN10TimeTickerD1Ev>:
{

} //TimeTicker

// default destructor
TimeTicker::~TimeTicker()
     c50:	08 95       	ret

00000c52 <_ZN10TimeTicker4initEPvS0_S0_>:
{

	//std::free(p);
}
void TimeTicker::init(void *param1,void *param2,void *param3)
{
     c52:	fc 01       	movw	r30, r24
	m_pParam[0] = param1;
     c54:	73 83       	std	Z+3, r23	; 0x03
     c56:	62 83       	std	Z+2, r22	; 0x02
	m_pParam[1] = param2;
     c58:	55 83       	std	Z+5, r21	; 0x05
     c5a:	44 83       	std	Z+4, r20	; 0x04
	m_pParam[2] = param3;
     c5c:	37 83       	std	Z+7, r19	; 0x07
     c5e:	26 83       	std	Z+6, r18	; 0x06
#ifndef USING_INT2
	DDRE &= ~(1<<4);
     c60:	14 98       	cbi	0x02, 4	; 2
	PORTE |= 1<<4;
     c62:	1c 9a       	sbi	0x03, 4	; 3
	EICRB |= (1<< ISC41 |1 << ISC40 ); // falling edge detection
     c64:	8a b7       	in	r24, 0x3a	; 58
     c66:	83 60       	ori	r24, 0x03	; 3
     c68:	8a bf       	out	0x3a, r24	; 58
	EIMSK |=  1<<INT4;
     c6a:	89 b7       	in	r24, 0x39	; 57
     c6c:	80 61       	ori	r24, 0x10	; 16
     c6e:	89 bf       	out	0x39, r24	; 57
     c70:	08 95       	ret

00000c72 <_ZN10TimeTicker6handleEv>:
	EIMSK |=  1<<INT2;
#endif	
}
void TimeTicker::handle()
{
	if(m_callback != 0)
     c72:	dc 01       	movw	r26, r24
     c74:	1a 96       	adiw	r26, 0x0a	; 10
     c76:	ed 91       	ld	r30, X+
     c78:	fc 91       	ld	r31, X
     c7a:	1b 97       	sbiw	r26, 0x0b	; 11
     c7c:	30 97       	sbiw	r30, 0x00	; 0
     c7e:	29 f0       	breq	.+10     	; 0xc8a <_ZN10TimeTicker6handleEv+0x18>
		m_callback(m_pCallbackParam);
     c80:	18 96       	adiw	r26, 0x08	; 8
     c82:	8d 91       	ld	r24, X+
     c84:	9c 91       	ld	r25, X
     c86:	19 97       	sbiw	r26, 0x09	; 9
     c88:	09 95       	icall
     c8a:	08 95       	ret

00000c8c <_ZN10TimeTickerD0Ev>:
{

} //TimeTicker

// default destructor
TimeTicker::~TimeTicker()
     c8c:	08 95       	ret

00000c8e <__vector_5>:
#ifndef USING_INT2
ISR(INT4_vect)
#else
ISR(INT2_vect)
#endif
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	0b b6       	in	r0, 0x3b	; 59
     c9a:	0f 92       	push	r0
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
	m_pDevices[NUM_TIMETICKER]->handle();
     cb4:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <m_pDevices+0x2>
     cb8:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <m_pDevices+0x3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	06 80       	ldd	r0, Z+6	; 0x06
     cc4:	f7 81       	ldd	r31, Z+7	; 0x07
     cc6:	e0 2d       	mov	r30, r0
     cc8:	09 95       	icall
}
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0b be       	out	0x3b, r0	; 59
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <_ZN10TimeTickerC1Ev>:


// default constructor
TimeTicker::TimeTicker()
     cf0:	fc 01       	movw	r30, r24
	void *m_pCallbackParam;
	driverCallback m_callback;
public:
	InterDevices()
	{
		m_pParam[0]=m_pParam[1]=m_pParam[2]=m_pCallbackParam=0;
     cf2:	11 86       	std	Z+9, r1	; 0x09
     cf4:	10 86       	std	Z+8, r1	; 0x08
     cf6:	17 82       	std	Z+7, r1	; 0x07
     cf8:	16 82       	std	Z+6, r1	; 0x06
     cfa:	15 82       	std	Z+5, r1	; 0x05
     cfc:	14 82       	std	Z+4, r1	; 0x04
     cfe:	13 82       	std	Z+3, r1	; 0x03
     d00:	12 82       	std	Z+2, r1	; 0x02
		m_callback = 0;
     d02:	13 86       	std	Z+11, r1	; 0x0b
     d04:	12 86       	std	Z+10, r1	; 0x0a
     d06:	8c e9       	ldi	r24, 0x9C	; 156
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	91 83       	std	Z+1, r25	; 0x01
     d0c:	80 83       	st	Z, r24
     d0e:	08 95       	ret

00000d10 <_ZN4UARTD1Ev>:
UART::UART()
{
} //UART

// default destructor
UART::~UART()
     d10:	08 95       	ret

00000d12 <_ZN4UART4initEPvS0_S0_>:
	#if 1
	//DDRA = 0;
	//PORTA = 0;

	
	DDRD |= 0x1<<3; // 
     d12:	8b 9a       	sbi	0x11, 3	; 17
	DDRD &= (~(0x1<<2));
     d14:	8a 98       	cbi	0x11, 2	; 17
	
	UCSR1A = 0x00; // ready flag clear
     d16:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
//	UCSR1B = 0x18; // rx,tx interrupt enable
	UCSR1B = 0x98; // rx,tx interrupt enable
     d1a:	88 e9       	ldi	r24, 0x98	; 152
     d1c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06; // tx data len 8bit
     d20:	86 e0       	ldi	r24, 0x06	; 6
     d22:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = 0;
     d26:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 8;  //baudrate is 115200
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     d30:	08 95       	ret

00000d32 <_ZN4UART6handleEv>:
	temp = UDR1; // dummy read
	#endif
	
}
void UART::handle()
{
     d32:	08 95       	ret

00000d34 <_ZN4UART7getCharEv>:
	//std::free(p);
}

char UART::getChar()
{
	while(!(UCSR1A&0x80)); // 수신완료될때까지 대기
     d34:	eb e9       	ldi	r30, 0x9B	; 155
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	88 23       	and	r24, r24
     d3c:	ec f7       	brge	.-6      	; 0xd38 <_ZN4UART7getCharEv+0x4>
	return UDR1;
     d3e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
}
     d42:	08 95       	ret

00000d44 <_ZN4UART7putCharEc>:
void UART::putChar(char data)
{
	//PORTA=0x0FF;
	//_delay_ms(10);
	//PORTA = 0x00;
    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
     d44:	eb e9       	ldi	r30, 0x9B	; 155
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	85 ff       	sbrs	r24, 5
     d4c:	fd cf       	rjmp	.-6      	; 0xd48 <_ZN4UART7putCharEc+0x4>
    UDR1 = data;
     d4e:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     d52:	08 95       	ret

00000d54 <_ZN4UART9putStringEPc>:
}
void UART::putString(char *str)
{
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
	int index = 0 ;
	
	while(1)
	{
		if(str[index] == 0)
     d58:	fb 01       	movw	r30, r22
     d5a:	90 81       	ld	r25, Z
     d5c:	99 23       	and	r25, r25
     d5e:	69 f0       	breq	.+26     	; 0xd7a <_ZN4UART9putStringEPc+0x26>
     d60:	db 01       	movw	r26, r22
     d62:	11 96       	adiw	r26, 0x01	; 1
			break;
		else
		{
			    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
     d64:	eb e9       	ldi	r30, 0x9B	; 155
     d66:	f0 e0       	ldi	r31, 0x00	; 0
			    UDR1 = str[index];
     d68:	cc e9       	ldi	r28, 0x9C	; 156
     d6a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(str[index] == 0)
			break;
		else
		{
			    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
     d6c:	80 81       	ld	r24, Z
     d6e:	85 ff       	sbrs	r24, 5
     d70:	fd cf       	rjmp	.-6      	; 0xd6c <_ZN4UART9putStringEPc+0x18>
			    UDR1 = str[index];
     d72:	98 83       	st	Y, r25
{
	int index = 0 ;
	
	while(1)
	{
		if(str[index] == 0)
     d74:	9d 91       	ld	r25, X+
     d76:	91 11       	cpse	r25, r1
     d78:	f9 cf       	rjmp	.-14     	; 0xd6c <_ZN4UART9putStringEPc+0x18>
			    while(!(UCSR1A&0x20)); // 송신데이터를 받을 준비가 될때까지 대기
			    UDR1 = str[index];
		}
		index++;
	}
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <_ZN4UARTD0Ev>:
UART::UART()
{
} //UART

// default destructor
UART::~UART()
     d80:	08 95       	ret

00000d82 <__vector_30>:
#include "Driver74141.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(USART1_RX_vect)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	0b b6       	in	r0, 0x3b	; 59
     d8e:	0f 92       	push	r0
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
	char chKey = UDR1 ;
     da8:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	static int tempDegree = 6;
	
	
	if(m_pclockTime == 0) return;
     dac:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <m_pclockTime>
     db0:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <m_pclockTime+0x1>
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	09 f4       	brne	.+2      	; 0xdba <__vector_30+0x38>
     db8:	5c c0       	rjmp	.+184    	; 0xe72 <__vector_30+0xf0>
	if(m_pDevices[NUM_DYNAMIC_DRIVER] == 0) return;
     dba:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <m_pDevices+0x4>
     dbe:	30 91 99 02 	lds	r19, 0x0299	; 0x800299 <m_pDevices+0x5>
     dc2:	21 15       	cp	r18, r1
     dc4:	31 05       	cpc	r19, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <__vector_30+0x48>
     dc8:	54 c0       	rjmp	.+168    	; 0xe72 <__vector_30+0xf0>
				
	switch(chKey)
     dca:	64 36       	cpi	r22, 0x64	; 100
     dcc:	61 f1       	breq	.+88     	; 0xe26 <__vector_30+0xa4>
     dce:	30 f4       	brcc	.+12     	; 0xddc <__vector_30+0x5a>
     dd0:	80 ed       	ldi	r24, 0xD0	; 208
     dd2:	86 0f       	add	r24, r22
     dd4:	8a 30       	cpi	r24, 0x0A	; 10
     dd6:	08 f4       	brcc	.+2      	; 0xdda <__vector_30+0x58>
     dd8:	40 c0       	rjmp	.+128    	; 0xe5a <__vector_30+0xd8>
     dda:	4b c0       	rjmp	.+150    	; 0xe72 <__vector_30+0xf0>
     ddc:	6d 36       	cpi	r22, 0x6D	; 109
     dde:	39 f0       	breq	.+14     	; 0xdee <__vector_30+0x6c>
     de0:	65 37       	cpi	r22, 0x75	; 117
     de2:	39 f0       	breq	.+14     	; 0xdf2 <__vector_30+0x70>
     de4:	68 36       	cpi	r22, 0x68	; 104
     de6:	09 f0       	breq	.+2      	; 0xdea <__vector_30+0x68>
	{
		case 'h':
			m_pclockTime->hourUp();
			break;
		case 'm':
			m_pclockTime->minuteUp();
     de8:	44 c0       	rjmp	.+136    	; 0xe72 <__vector_30+0xf0>
     dea:	68 d2       	rcall	.+1232   	; 0x12bc <_ZN9ClockTime6hourUpEv>
			break;
     dec:	42 c0       	rjmp	.+132    	; 0xe72 <__vector_30+0xf0>
		case 'u':
			tempDegree=((DynamicTubeDriver*)m_pDevices[NUM_DYNAMIC_DRIVER])->setBright(tempDegree+1);
     dee:	50 d2       	rcall	.+1184   	; 0x1290 <_ZN9ClockTime8minuteUpEv>
     df0:	40 c0       	rjmp	.+128    	; 0xe72 <__vector_30+0xf0>
     df2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     df6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     dfa:	6f 5f       	subi	r22, 0xFF	; 255
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	c9 01       	movw	r24, r18
     e00:	18 de       	rcall	.-976    	; 0xa32 <_ZN17DynamicTubeDriver9setBrightEi>
     e02:	68 2f       	mov	r22, r24
     e04:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			((UART*)m_pDevices[NUM_UART])->putChar('0'+tempDegree);
     e08:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     e0c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <m_pDevices>
     e10:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <m_pDevices+0x1>
     e14:	60 5d       	subi	r22, 0xD0	; 208
     e16:	dc 01       	movw	r26, r24
     e18:	ed 91       	ld	r30, X+
     e1a:	fc 91       	ld	r31, X
     e1c:	04 84       	ldd	r0, Z+12	; 0x0c
     e1e:	f5 85       	ldd	r31, Z+13	; 0x0d
			break;
     e20:	e0 2d       	mov	r30, r0
		case 'd':
			tempDegree=((DynamicTubeDriver*)m_pDevices[NUM_DYNAMIC_DRIVER])->setBright(tempDegree-1);
     e22:	09 95       	icall
     e24:	26 c0       	rjmp	.+76     	; 0xe72 <__vector_30+0xf0>
     e26:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     e2a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     e2e:	61 50       	subi	r22, 0x01	; 1
     e30:	71 09       	sbc	r23, r1
     e32:	c9 01       	movw	r24, r18
     e34:	fe dd       	rcall	.-1028   	; 0xa32 <_ZN17DynamicTubeDriver9setBrightEi>
     e36:	68 2f       	mov	r22, r24
     e38:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			((UART*)m_pDevices[NUM_UART])->putChar('0'+tempDegree);
     e3c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     e40:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <m_pDevices>
     e44:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <m_pDevices+0x1>
     e48:	60 5d       	subi	r22, 0xD0	; 208
     e4a:	dc 01       	movw	r26, r24
     e4c:	ed 91       	ld	r30, X+
     e4e:	fc 91       	ld	r31, X
     e50:	04 84       	ldd	r0, Z+12	; 0x0c
     e52:	f5 85       	ldd	r31, Z+13	; 0x0d
			break;
     e54:	e0 2d       	mov	r30, r0
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':((Driver74141 *)m_pDevices[NUM_71414_DRIVER])->setOutput(chKey-'0');
     e56:	09 95       	icall
     e58:	0c c0       	rjmp	.+24     	; 0xe72 <__vector_30+0xf0>
     e5a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <m_pDevices+0x6>
     e5e:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <m_pDevices+0x7>
     e62:	60 53       	subi	r22, 0x30	; 48
     e64:	dc 01       	movw	r26, r24
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	02 84       	ldd	r0, Z+10	; 0x0a
     e6c:	f3 85       	ldd	r31, Z+11	; 0x0b
			break;
		
	}
}
     e6e:	e0 2d       	mov	r30, r0
     e70:	09 95       	icall
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0b be       	out	0x3b, r0	; 59
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <_ZN4UARTC1Ev>:


// default constructor
UART::UART()
     e98:	fc 01       	movw	r30, r24
	void *m_pCallbackParam;
	driverCallback m_callback;
public:
	InterDevices()
	{
		m_pParam[0]=m_pParam[1]=m_pParam[2]=m_pCallbackParam=0;
     e9a:	11 86       	std	Z+9, r1	; 0x09
     e9c:	10 86       	std	Z+8, r1	; 0x08
     e9e:	17 82       	std	Z+7, r1	; 0x07
     ea0:	16 82       	std	Z+6, r1	; 0x06
     ea2:	15 82       	std	Z+5, r1	; 0x05
     ea4:	14 82       	std	Z+4, r1	; 0x04
     ea6:	13 82       	std	Z+3, r1	; 0x03
     ea8:	12 82       	std	Z+2, r1	; 0x02
		m_callback = 0;
     eaa:	13 86       	std	Z+11, r1	; 0x0b
     eac:	12 86       	std	Z+10, r1	; 0x0a
     eae:	8a ea       	ldi	r24, 0xAA	; 170
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	08 95       	ret

00000eb8 <_Z13TimerCallbackPv>:
     eb8:	ce d1       	rcall	.+924    	; 0x1256 <_ZN9ClockTime7FlyTimeEv>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	08 95       	ret

00000ec0 <_Z8Dev_initv>:
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	f8 94       	cli
     ec6:	c4 e9       	ldi	r28, 0x94	; 148
     ec8:	d2 e0       	ldi	r29, 0x02	; 2
     eca:	88 81       	ld	r24, Y
     ecc:	99 81       	ldd	r25, Y+1	; 0x01
     ece:	dc 01       	movw	r26, r24
     ed0:	ed 91       	ld	r30, X+
     ed2:	fc 91       	ld	r31, X
     ed4:	04 80       	ldd	r0, Z+4	; 0x04
     ed6:	f5 81       	ldd	r31, Z+5	; 0x05
     ed8:	e0 2d       	mov	r30, r0
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	09 95       	icall
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	9b 81       	ldd	r25, Y+3	; 0x03
     eec:	dc 01       	movw	r26, r24
     eee:	ed 91       	ld	r30, X+
     ef0:	fc 91       	ld	r31, X
     ef2:	04 80       	ldd	r0, Z+4	; 0x04
     ef4:	f5 81       	ldd	r31, Z+5	; 0x05
     ef6:	e0 2d       	mov	r30, r0
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	09 95       	icall
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	dc 01       	movw	r26, r24
     f0c:	ed 91       	ld	r30, X+
     f0e:	fc 91       	ld	r31, X
     f10:	04 80       	ldd	r0, Z+4	; 0x04
     f12:	f5 81       	ldd	r31, Z+5	; 0x05
     f14:	e0 2d       	mov	r30, r0
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	09 95       	icall
     f24:	8e 81       	ldd	r24, Y+6	; 0x06
     f26:	9f 81       	ldd	r25, Y+7	; 0x07
     f28:	dc 01       	movw	r26, r24
     f2a:	ed 91       	ld	r30, X+
     f2c:	fc 91       	ld	r31, X
     f2e:	04 80       	ldd	r0, Z+4	; 0x04
     f30:	f5 81       	ldd	r31, Z+5	; 0x05
     f32:	e0 2d       	mov	r30, r0
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	09 95       	icall
     f42:	88 85       	ldd	r24, Y+8	; 0x08
     f44:	99 85       	ldd	r25, Y+9	; 0x09
     f46:	dc 01       	movw	r26, r24
     f48:	ed 91       	ld	r30, X+
     f4a:	fc 91       	ld	r31, X
     f4c:	04 80       	ldd	r0, Z+4	; 0x04
     f4e:	f5 81       	ldd	r31, Z+5	; 0x05
     f50:	e0 2d       	mov	r30, r0
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	09 95       	icall
     f60:	8a 85       	ldd	r24, Y+10	; 0x0a
     f62:	9b 85       	ldd	r25, Y+11	; 0x0b
     f64:	dc 01       	movw	r26, r24
     f66:	ed 91       	ld	r30, X+
     f68:	fc 91       	ld	r31, X
     f6a:	04 80       	ldd	r0, Z+4	; 0x04
     f6c:	f5 81       	ldd	r31, Z+5	; 0x05
     f6e:	e0 2d       	mov	r30, r0
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	09 95       	icall
     f7e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pRealTimeClock>
     f82:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pRealTimeClock+0x1>
     f86:	b9 d9       	rcall	.-3214   	; 0x2fa <_ZN6absTWI4initEv>
     f88:	78 94       	sei
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <main>:
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	c5 5f       	subi	r28, 0xF5	; 245
     f9a:	d1 09       	sbc	r29, r1
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	89 e6       	ldi	r24, 0x69	; 105
     faa:	98 e1       	ldi	r25, 0x18	; 24
     fac:	21 50       	subi	r18, 0x01	; 1
     fae:	80 40       	sbci	r24, 0x00	; 0
     fb0:	90 40       	sbci	r25, 0x00	; 0
     fb2:	e1 f7       	brne	.-8      	; 0xfac <main+0x1c>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <main+0x26>
     fb6:	00 00       	nop
     fb8:	8e 01       	movw	r16, r28
     fba:	0f 5f       	subi	r16, 0xFF	; 255
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	c8 01       	movw	r24, r16
     fc0:	6b df       	rcall	.-298    	; 0xe98 <_ZN4UARTC1Ev>
     fc2:	5e 01       	movw	r10, r28
     fc4:	2d e0       	ldi	r18, 0x0D	; 13
     fc6:	a2 0e       	add	r10, r18
     fc8:	b1 1c       	adc	r11, r1
     fca:	c5 01       	movw	r24, r10
     fcc:	91 de       	rcall	.-734    	; 0xcf0 <_ZN10TimeTickerC1Ev>
     fce:	7e 01       	movw	r14, r28
     fd0:	89 e1       	ldi	r24, 0x19	; 25
     fd2:	e8 0e       	add	r14, r24
     fd4:	f1 1c       	adc	r15, r1
     fd6:	c7 01       	movw	r24, r14
     fd8:	ee d9       	rcall	.-3108   	; 0x3b6 <_ZN6DS3231C1Ev>
     fda:	4e 01       	movw	r8, r28
     fdc:	9c e1       	ldi	r25, 0x1C	; 28
     fde:	89 0e       	add	r8, r25
     fe0:	91 1c       	adc	r9, r1
     fe2:	c4 01       	movw	r24, r8
     fe4:	31 d1       	rcall	.+610    	; 0x1248 <_ZN9ClockTimeC1Ev>
     fe6:	6e 01       	movw	r12, r28
     fe8:	20 e2       	ldi	r18, 0x20	; 32
     fea:	c2 0e       	add	r12, r18
     fec:	d1 1c       	adc	r13, r1
     fee:	c6 01       	movw	r24, r12
     ff0:	cb db       	rcall	.-2154   	; 0x788 <_ZN17DynamicTubeDriverC1Ev>
     ff2:	3e 01       	movw	r6, r28
     ff4:	85 e3       	ldi	r24, 0x35	; 53
     ff6:	68 0e       	add	r6, r24
     ff8:	71 1c       	adc	r7, r1
     ffa:	c3 01       	movw	r24, r6
     ffc:	c9 d9       	rcall	.-3182   	; 0x390 <_ZN11Driver74141C1Ev>
     ffe:	2e 01       	movw	r4, r28
    1000:	91 e4       	ldi	r25, 0x41	; 65
    1002:	49 0e       	add	r4, r25
    1004:	51 1c       	adc	r5, r1
    1006:	c2 01       	movw	r24, r4
    1008:	a3 d9       	rcall	.-3258   	; 0x350 <_ZN13BrightControlC1Ev>
    100a:	1e 01       	movw	r2, r28
    100c:	2f e4       	ldi	r18, 0x4F	; 79
    100e:	22 0e       	add	r2, r18
    1010:	31 1c       	adc	r3, r1
    1012:	c1 01       	movw	r24, r2
    1014:	7f dd       	rcall	.-1282   	; 0xb14 <_ZN13SwitchControlC1Ev>
    1016:	f0 92 91 02 	sts	0x0291, r15	; 0x800291 <pRealTimeClock+0x1>
    101a:	e0 92 90 02 	sts	0x0290, r14	; 0x800290 <pRealTimeClock>
    101e:	90 92 93 02 	sts	0x0293, r9	; 0x800293 <m_pclockTime+0x1>
    1022:	80 92 92 02 	sts	0x0292, r8	; 0x800292 <m_pclockTime>
    1026:	e4 e9       	ldi	r30, 0x94	; 148
    1028:	f2 e0       	ldi	r31, 0x02	; 2
    102a:	11 83       	std	Z+1, r17	; 0x01
    102c:	00 83       	st	Z, r16
    102e:	b3 82       	std	Z+3, r11	; 0x03
    1030:	a2 82       	std	Z+2, r10	; 0x02
    1032:	d5 82       	std	Z+5, r13	; 0x05
    1034:	c4 82       	std	Z+4, r12	; 0x04
    1036:	77 82       	std	Z+7, r7	; 0x07
    1038:	66 82       	std	Z+6, r6	; 0x06
    103a:	51 86       	std	Z+9, r5	; 0x09
    103c:	40 86       	std	Z+8, r4	; 0x08
    103e:	33 86       	std	Z+11, r3	; 0x0b
    1040:	22 86       	std	Z+10, r2	; 0x0a
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	99 e6       	ldi	r25, 0x69	; 105
    1046:	28 e1       	ldi	r18, 0x18	; 24
    1048:	81 50       	subi	r24, 0x01	; 1
    104a:	90 40       	sbci	r25, 0x00	; 0
    104c:	20 40       	sbci	r18, 0x00	; 0
    104e:	e1 f7       	brne	.-8      	; 0x1048 <main+0xb8>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <main+0xc2>
    1052:	00 00       	nop
    1054:	35 df       	rcall	.-406    	; 0xec0 <_Z8Dev_initv>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	99 e6       	ldi	r25, 0x69	; 105
    105a:	28 e1       	ldi	r18, 0x18	; 24
    105c:	81 50       	subi	r24, 0x01	; 1
    105e:	90 40       	sbci	r25, 0x00	; 0
    1060:	20 40       	sbci	r18, 0x00	; 0
    1062:	e1 f7       	brne	.-8      	; 0x105c <main+0xcc>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <main+0xd6>
    1066:	00 00       	nop
    1068:	88 e6       	ldi	r24, 0x68	; 104
    106a:	8b 8f       	std	Y+27, r24	; 0x1b
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	9f ef       	ldi	r25, 0xFF	; 255
    1070:	cf 50       	subi	r28, 0x0F	; 15
    1072:	df 4f       	sbci	r29, 0xFF	; 255
    1074:	99 83       	std	Y+1, r25	; 0x01
    1076:	88 83       	st	Y, r24
    1078:	c1 5f       	subi	r28, 0xF1	; 241
    107a:	d0 40       	sbci	r29, 0x00	; 0
    107c:	6a eb       	ldi	r22, 0xBA	; 186
    107e:	71 e0       	ldi	r23, 0x01	; 1
    1080:	c8 01       	movw	r24, r16
    1082:	68 de       	rcall	.-816    	; 0xd54 <_ZN4UART9putStringEPc>
    1084:	64 ef       	ldi	r22, 0xF4	; 244
    1086:	71 e0       	ldi	r23, 0x01	; 1
    1088:	c8 01       	movw	r24, r16
    108a:	64 de       	rcall	.-824    	; 0xd54 <_ZN4UART9putStringEPc>
    108c:	6e eb       	ldi	r22, 0xBE	; 190
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	c8 01       	movw	r24, r16
    1092:	60 de       	rcall	.-832    	; 0xd54 <_ZN4UART9putStringEPc>
    1094:	c7 01       	movw	r24, r14
    1096:	0d db       	rcall	.-2534   	; 0x6b2 <_ZN6DS32318set1HzOnEv>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	91 ee       	ldi	r25, 0xE1	; 225
    109c:	24 e0       	ldi	r18, 0x04	; 4
    109e:	81 50       	subi	r24, 0x01	; 1
    10a0:	90 40       	sbci	r25, 0x00	; 0
    10a2:	20 40       	sbci	r18, 0x00	; 0
    10a4:	e1 f7       	brne	.-8      	; 0x109e <main+0x10e>
    10a6:	00 c0       	rjmp	.+0      	; 0x10a8 <main+0x118>
    10a8:	00 00       	nop
    10aa:	00 51       	subi	r16, 0x10	; 16
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	23 e0       	ldi	r18, 0x03	; 3
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	be 01       	movw	r22, r28
    10b8:	6d 50       	subi	r22, 0x0D	; 13
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pRealTimeClock>
    10c0:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pRealTimeClock+0x1>
    10c4:	83 d9       	rcall	.-3322   	; 0x3cc <_ZN6DS32318readRegsEPhiiPi>
    10c6:	89 2b       	or	r24, r25
    10c8:	09 f0       	breq	.+2      	; 0x10cc <main+0x13c>
    10ca:	8e c0       	rjmp	.+284    	; 0x11e8 <__stack+0xe9>
    10cc:	cd 50       	subi	r28, 0x0D	; 13
    10ce:	df 4f       	sbci	r29, 0xFF	; 255
    10d0:	88 81       	ld	r24, Y
    10d2:	c3 5f       	subi	r28, 0xF3	; 243
    10d4:	d0 40       	sbci	r29, 0x00	; 0
    10d6:	98 2f       	mov	r25, r24
    10d8:	92 95       	swap	r25
    10da:	9f 70       	andi	r25, 0x0F	; 15
    10dc:	99 0f       	add	r25, r25
    10de:	29 2f       	mov	r18, r25
    10e0:	22 0f       	add	r18, r18
    10e2:	22 0f       	add	r18, r18
    10e4:	92 0f       	add	r25, r18
    10e6:	8f 70       	andi	r24, 0x0F	; 15
    10e8:	98 0f       	add	r25, r24
    10ea:	cc 50       	subi	r28, 0x0C	; 12
    10ec:	df 4f       	sbci	r29, 0xFF	; 255
    10ee:	88 81       	ld	r24, Y
    10f0:	c4 5f       	subi	r28, 0xF4	; 244
    10f2:	d0 40       	sbci	r29, 0x00	; 0
    10f4:	28 2f       	mov	r18, r24
    10f6:	22 95       	swap	r18
    10f8:	2f 70       	andi	r18, 0x0F	; 15
    10fa:	22 0f       	add	r18, r18
    10fc:	32 2f       	mov	r19, r18
    10fe:	33 0f       	add	r19, r19
    1100:	33 0f       	add	r19, r19
    1102:	23 0f       	add	r18, r19
    1104:	8f 70       	andi	r24, 0x0F	; 15
    1106:	28 0f       	add	r18, r24
    1108:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
    110c:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
    1110:	cb 50       	subi	r28, 0x0B	; 11
    1112:	df 4f       	sbci	r29, 0xFF	; 255
    1114:	88 81       	ld	r24, Y
    1116:	c5 5f       	subi	r28, 0xF5	; 245
    1118:	d0 40       	sbci	r29, 0x00	; 0
    111a:	85 fb       	bst	r24, 5
    111c:	33 27       	eor	r19, r19
    111e:	30 f9       	bld	r19, 0
    1120:	33 0f       	add	r19, r19
    1122:	33 0f       	add	r19, r19
    1124:	53 2f       	mov	r21, r19
    1126:	55 0f       	add	r21, r21
    1128:	55 0f       	add	r21, r21
    112a:	53 0f       	add	r21, r19
    112c:	84 fb       	bst	r24, 4
    112e:	33 27       	eor	r19, r19
    1130:	30 f9       	bld	r19, 0
    1132:	33 0f       	add	r19, r19
    1134:	43 2f       	mov	r20, r19
    1136:	44 0f       	add	r20, r20
    1138:	44 0f       	add	r20, r20
    113a:	34 0f       	add	r19, r20
    113c:	35 0f       	add	r19, r21
    113e:	8f 70       	andi	r24, 0x0F	; 15
    1140:	83 0f       	add	r24, r19
    1142:	81 83       	std	Z+1, r24	; 0x01
    1144:	22 83       	std	Z+2, r18	; 0x02
    1146:	93 83       	std	Z+3, r25	; 0x03
    1148:	cb 50       	subi	r28, 0x0B	; 11
    114a:	df 4f       	sbci	r29, 0xFF	; 255
    114c:	88 81       	ld	r24, Y
    114e:	c5 5f       	subi	r28, 0xF5	; 245
    1150:	d0 40       	sbci	r29, 0x00	; 0
    1152:	1f 92       	push	r1
    1154:	8f 93       	push	r24
    1156:	cc 50       	subi	r28, 0x0C	; 12
    1158:	df 4f       	sbci	r29, 0xFF	; 255
    115a:	88 81       	ld	r24, Y
    115c:	c4 5f       	subi	r28, 0xF4	; 244
    115e:	d0 40       	sbci	r29, 0x00	; 0
    1160:	1f 92       	push	r1
    1162:	8f 93       	push	r24
    1164:	cd 50       	subi	r28, 0x0D	; 13
    1166:	df 4f       	sbci	r29, 0xFF	; 255
    1168:	88 81       	ld	r24, Y
    116a:	c3 5f       	subi	r28, 0xF3	; 243
    116c:	d0 40       	sbci	r29, 0x00	; 0
    116e:	1f 92       	push	r1
    1170:	8f 93       	push	r24
    1172:	8a e2       	ldi	r24, 0x2A	; 42
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	06 59       	subi	r16, 0x96	; 150
    117c:	11 09       	sbc	r17, r1
    117e:	1f 93       	push	r17
    1180:	0f 93       	push	r16
    1182:	dc d0       	rcall	.+440    	; 0x133c <sprintf>
    1184:	b8 01       	movw	r22, r16
    1186:	ce 01       	movw	r24, r28
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	e4 dd       	rcall	.-1080   	; 0xd54 <_ZN4UART9putStringEPc>
    118c:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <m_pclockTime>
    1190:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <m_pclockTime+0x1>
    1194:	83 81       	ldd	r24, Z+3	; 0x03
    1196:	1f 92       	push	r1
    1198:	8f 93       	push	r24
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	1f 92       	push	r1
    119e:	8f 93       	push	r24
    11a0:	81 81       	ldd	r24, Z+1	; 0x01
    11a2:	1f 92       	push	r1
    11a4:	8f 93       	push	r24
    11a6:	83 e5       	ldi	r24, 0x53	; 83
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	9f 93       	push	r25
    11ac:	8f 93       	push	r24
    11ae:	1f 93       	push	r17
    11b0:	0f 93       	push	r16
    11b2:	c4 d0       	rcall	.+392    	; 0x133c <sprintf>
    11b4:	b8 01       	movw	r22, r16
    11b6:	ce 01       	movw	r24, r28
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	cc dd       	rcall	.-1128   	; 0xd54 <_ZN4UART9putStringEPc>
    11bc:	a4 01       	movw	r20, r8
    11be:	6c e5       	ldi	r22, 0x5C	; 92
    11c0:	77 e0       	ldi	r23, 0x07	; 7
    11c2:	c5 01       	movw	r24, r10
    11c4:	49 dc       	rcall	.-1902   	; 0xa58 <_ZN12InterDevices11regCallbackEPFiPvES0_>
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	91 ee       	ldi	r25, 0xE1	; 225
    11ca:	24 e0       	ldi	r18, 0x04	; 4
    11cc:	81 50       	subi	r24, 0x01	; 1
    11ce:	90 40       	sbci	r25, 0x00	; 0
    11d0:	20 40       	sbci	r18, 0x00	; 0
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <__stack+0xcd>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <__stack+0xd7>
    11d6:	00 00       	nop
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	01 e0       	ldi	r16, 0x01	; 1
    11e4:	10 e0       	ldi	r17, 0x00	; 0
    11e6:	27 c0       	rjmp	.+78     	; 0x1236 <__stack+0x137>
    11e8:	66 e7       	ldi	r22, 0x76	; 118
    11ea:	72 e0       	ldi	r23, 0x02	; 2
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	b1 dd       	rcall	.-1182   	; 0xd54 <_ZN4UART9putStringEPc>
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stack+0xf3>
    11f4:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <g_UpdateHOURFlag>
    11f8:	88 23       	and	r24, r24
    11fa:	49 f0       	breq	.+18     	; 0x120e <__stack+0x10f>
    11fc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pRealTimeClock>
    1204:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pRealTimeClock+0x1>
    1208:	80 da       	rcall	.-2816   	; 0x70a <_ZN6DS323110updateHourEi>
    120a:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <g_UpdateHOURFlag>
    120e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <g_UpdateMINUTEFlag>
    1212:	88 23       	and	r24, r24
    1214:	49 f0       	breq	.+18     	; 0x1228 <__stack+0x129>
    1216:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pRealTimeClock>
    121e:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pRealTimeClock+0x1>
    1222:	87 da       	rcall	.-2802   	; 0x732 <_ZN6DS323112updateMinuteEi>
    1224:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <g_UpdateMINUTEFlag>
    1228:	63 e0       	ldi	r22, 0x03	; 3
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	ce 01       	movw	r24, r28
    122e:	80 96       	adiw	r24, 0x20	; 32
    1230:	00 dc       	rcall	.-2048   	; 0xa32 <_ZN17DynamicTubeDriver9setBrightEi>
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	ce 01       	movw	r24, r28
    1238:	80 96       	adiw	r24, 0x20	; 32
    123a:	c6 da       	rcall	.-2676   	; 0x7c8 <_ZN17DynamicTubeDriver13driveNextTubeEv>
    123c:	0f 5f       	subi	r16, 0xFF	; 255
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	0f 34       	cpi	r16, 0x4F	; 79
    1242:	11 05       	cpc	r17, r1
    1244:	c1 f7       	brne	.-16     	; 0x1236 <__stack+0x137>
    1246:	d6 cf       	rjmp	.-84     	; 0x11f4 <__stack+0xf5>

00001248 <_ZN9ClockTimeC1Ev>:
	m_timeValue.Hour = m_timeValue.Minute = m_timeValue.Second = 0;
	
} //ClockTime

// default destructor
ClockTime::~ClockTime()
    1248:	fc 01       	movw	r30, r24
    124a:	88 e1       	ldi	r24, 0x18	; 24
    124c:	80 83       	st	Z, r24
    124e:	13 82       	std	Z+3, r1	; 0x03
    1250:	12 82       	std	Z+2, r1	; 0x02
    1252:	11 82       	std	Z+1, r1	; 0x01
    1254:	08 95       	ret

00001256 <_ZN9ClockTime7FlyTimeEv>:
{
} //~ClockTime

void ClockTime::FlyTime()
{
    1256:	fc 01       	movw	r30, r24
	if(m_timeValue.Second == 59)
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	9b 33       	cpi	r25, 0x3B	; 59
    125c:	b1 f4       	brne	.+44     	; 0x128a <_ZN9ClockTime7FlyTimeEv+0x34>
	{
		if(m_timeValue.Minute == 59)
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	8b 33       	cpi	r24, 0x3B	; 59
    1262:	79 f4       	brne	.+30     	; 0x1282 <_ZN9ClockTime7FlyTimeEv+0x2c>
		{
			if(m_timeValue.Hour == (m_MaximumHour-1)) // Maximum hour 
    1264:	21 81       	ldd	r18, Z+1	; 0x01
    1266:	42 2f       	mov	r20, r18
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	48 17       	cp	r20, r24
    1272:	59 07       	cpc	r21, r25
    1274:	11 f4       	brne	.+4      	; 0x127a <_ZN9ClockTime7FlyTimeEv+0x24>
			{
				m_timeValue.Hour = 0;
    1276:	11 82       	std	Z+1, r1	; 0x01
    1278:	02 c0       	rjmp	.+4      	; 0x127e <_ZN9ClockTime7FlyTimeEv+0x28>
				
			}
			else
			{
				m_timeValue.Hour++;
    127a:	2f 5f       	subi	r18, 0xFF	; 255
    127c:	21 83       	std	Z+1, r18	; 0x01
			}
			m_timeValue.Minute = 0;
    127e:	12 82       	std	Z+2, r1	; 0x02
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <_ZN9ClockTime7FlyTimeEv+0x30>
		}
		else
		{
			m_timeValue.Minute++;	
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	82 83       	std	Z+2, r24	; 0x02
		}
		m_timeValue.Second = 0	;	
    1286:	13 82       	std	Z+3, r1	; 0x03
    1288:	08 95       	ret
	}
	else
		m_timeValue.Second++;
    128a:	9f 5f       	subi	r25, 0xFF	; 255
    128c:	93 83       	std	Z+3, r25	; 0x03
    128e:	08 95       	ret

00001290 <_ZN9ClockTime8minuteUpEv>:
}

void ClockTime::minuteUp()
{
    1290:	fc 01       	movw	r30, r24

		
		if(m_timeValue.Minute == 59)
    1292:	92 81       	ldd	r25, Z+2	; 0x02
    1294:	9b 33       	cpi	r25, 0x3B	; 59
    1296:	79 f4       	brne	.+30     	; 0x12b6 <_ZN9ClockTime8minuteUpEv+0x26>
		{
			if(m_timeValue.Hour == m_MaximumHour-1)
    1298:	21 81       	ldd	r18, Z+1	; 0x01
    129a:	42 2f       	mov	r20, r18
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	48 17       	cp	r20, r24
    12a6:	59 07       	cpc	r21, r25
    12a8:	11 f4       	brne	.+4      	; 0x12ae <_ZN9ClockTime8minuteUpEv+0x1e>
				m_timeValue.Hour = 0;
    12aa:	11 82       	std	Z+1, r1	; 0x01
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <_ZN9ClockTime8minuteUpEv+0x22>
			else
				m_timeValue.Hour++;
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	21 83       	std	Z+1, r18	; 0x01
			m_timeValue.Minute = 0;
    12b2:	12 82       	std	Z+2, r1	; 0x02
    12b4:	08 95       	ret
		}
		else
			m_timeValue.Minute++;
    12b6:	9f 5f       	subi	r25, 0xFF	; 255
    12b8:	92 83       	std	Z+2, r25	; 0x02
    12ba:	08 95       	ret

000012bc <_ZN9ClockTime6hourUpEv>:
}
void ClockTime::hourUp()
{
    12bc:	fc 01       	movw	r30, r24

	if(m_timeValue.Hour == m_MaximumHour-1)
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	49 2f       	mov	r20, r25
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	20 81       	ld	r18, Z
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	21 50       	subi	r18, 0x01	; 1
    12ca:	31 09       	sbc	r19, r1
    12cc:	42 17       	cp	r20, r18
    12ce:	53 07       	cpc	r21, r19
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <_ZN9ClockTime6hourUpEv+0x1a>
		m_timeValue.Hour = 0;
    12d2:	11 82       	std	Z+1, r1	; 0x01
    12d4:	08 95       	ret
	else
		m_timeValue.Hour++;	
    12d6:	9f 5f       	subi	r25, 0xFF	; 255
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	08 95       	ret

000012dc <__divmodhi4>:
    12dc:	97 fb       	bst	r25, 7
    12de:	07 2e       	mov	r0, r23
    12e0:	16 f4       	brtc	.+4      	; 0x12e6 <__divmodhi4+0xa>
    12e2:	00 94       	com	r0
    12e4:	06 d0       	rcall	.+12     	; 0x12f2 <__divmodhi4_neg1>
    12e6:	77 fd       	sbrc	r23, 7
    12e8:	08 d0       	rcall	.+16     	; 0x12fa <__divmodhi4_neg2>
    12ea:	14 d0       	rcall	.+40     	; 0x1314 <__udivmodhi4>
    12ec:	07 fc       	sbrc	r0, 7
    12ee:	05 d0       	rcall	.+10     	; 0x12fa <__divmodhi4_neg2>
    12f0:	3e f4       	brtc	.+14     	; 0x1300 <__divmodhi4_exit>

000012f2 <__divmodhi4_neg1>:
    12f2:	90 95       	com	r25
    12f4:	81 95       	neg	r24
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	08 95       	ret

000012fa <__divmodhi4_neg2>:
    12fa:	70 95       	com	r23
    12fc:	61 95       	neg	r22
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001300 <__divmodhi4_exit>:
    1300:	08 95       	ret

00001302 <__tablejump2__>:
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	00 24       	eor	r0, r0
    1308:	00 1c       	adc	r0, r0
    130a:	0b be       	out	0x3b, r0	; 59
    130c:	07 90       	elpm	r0, Z+
    130e:	f6 91       	elpm	r31, Z
    1310:	e0 2d       	mov	r30, r0
    1312:	09 94       	ijmp

00001314 <__udivmodhi4>:
    1314:	aa 1b       	sub	r26, r26
    1316:	bb 1b       	sub	r27, r27
    1318:	51 e1       	ldi	r21, 0x11	; 17
    131a:	07 c0       	rjmp	.+14     	; 0x132a <__udivmodhi4_ep>

0000131c <__udivmodhi4_loop>:
    131c:	aa 1f       	adc	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	a6 17       	cp	r26, r22
    1322:	b7 07       	cpc	r27, r23
    1324:	10 f0       	brcs	.+4      	; 0x132a <__udivmodhi4_ep>
    1326:	a6 1b       	sub	r26, r22
    1328:	b7 0b       	sbc	r27, r23

0000132a <__udivmodhi4_ep>:
    132a:	88 1f       	adc	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	5a 95       	dec	r21
    1330:	a9 f7       	brne	.-22     	; 0x131c <__udivmodhi4_loop>
    1332:	80 95       	com	r24
    1334:	90 95       	com	r25
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	08 95       	ret

0000133c <sprintf>:
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	2e 97       	sbiw	r28, 0x0e	; 14
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	0d 89       	ldd	r16, Y+21	; 0x15
    1356:	1e 89       	ldd	r17, Y+22	; 0x16
    1358:	86 e0       	ldi	r24, 0x06	; 6
    135a:	8c 83       	std	Y+4, r24	; 0x04
    135c:	1a 83       	std	Y+2, r17	; 0x02
    135e:	09 83       	std	Y+1, r16	; 0x01
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f e7       	ldi	r25, 0x7F	; 127
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	ae 01       	movw	r20, r28
    136a:	47 5e       	subi	r20, 0xE7	; 231
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	6f 89       	ldd	r22, Y+23	; 0x17
    1370:	78 8d       	ldd	r23, Y+24	; 0x18
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	10 d0       	rcall	.+32     	; 0x1398 <vfprintf>
    1378:	ef 81       	ldd	r30, Y+7	; 0x07
    137a:	f8 85       	ldd	r31, Y+8	; 0x08
    137c:	e0 0f       	add	r30, r16
    137e:	f1 1f       	adc	r31, r17
    1380:	10 82       	st	Z, r1
    1382:	2e 96       	adiw	r28, 0x0e	; 14
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <vfprintf>:
    1398:	2f 92       	push	r2
    139a:	3f 92       	push	r3
    139c:	4f 92       	push	r4
    139e:	5f 92       	push	r5
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	2b 97       	sbiw	r28, 0x0b	; 11
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	6c 01       	movw	r12, r24
    13ce:	7b 01       	movw	r14, r22
    13d0:	8a 01       	movw	r16, r20
    13d2:	fc 01       	movw	r30, r24
    13d4:	17 82       	std	Z+7, r1	; 0x07
    13d6:	16 82       	std	Z+6, r1	; 0x06
    13d8:	83 81       	ldd	r24, Z+3	; 0x03
    13da:	81 ff       	sbrs	r24, 1
    13dc:	bf c1       	rjmp	.+894    	; 0x175c <vfprintf+0x3c4>
    13de:	ce 01       	movw	r24, r28
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	3c 01       	movw	r6, r24
    13e4:	f6 01       	movw	r30, r12
    13e6:	93 81       	ldd	r25, Z+3	; 0x03
    13e8:	f7 01       	movw	r30, r14
    13ea:	93 fd       	sbrc	r25, 3
    13ec:	85 91       	lpm	r24, Z+
    13ee:	93 ff       	sbrs	r25, 3
    13f0:	81 91       	ld	r24, Z+
    13f2:	7f 01       	movw	r14, r30
    13f4:	88 23       	and	r24, r24
    13f6:	09 f4       	brne	.+2      	; 0x13fa <vfprintf+0x62>
    13f8:	ad c1       	rjmp	.+858    	; 0x1754 <vfprintf+0x3bc>
    13fa:	85 32       	cpi	r24, 0x25	; 37
    13fc:	39 f4       	brne	.+14     	; 0x140c <vfprintf+0x74>
    13fe:	93 fd       	sbrc	r25, 3
    1400:	85 91       	lpm	r24, Z+
    1402:	93 ff       	sbrs	r25, 3
    1404:	81 91       	ld	r24, Z+
    1406:	7f 01       	movw	r14, r30
    1408:	85 32       	cpi	r24, 0x25	; 37
    140a:	21 f4       	brne	.+8      	; 0x1414 <vfprintf+0x7c>
    140c:	b6 01       	movw	r22, r12
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	d6 d1       	rcall	.+940    	; 0x17be <fputc>
    1412:	e8 cf       	rjmp	.-48     	; 0x13e4 <vfprintf+0x4c>
    1414:	91 2c       	mov	r9, r1
    1416:	21 2c       	mov	r2, r1
    1418:	31 2c       	mov	r3, r1
    141a:	ff e1       	ldi	r31, 0x1F	; 31
    141c:	f3 15       	cp	r31, r3
    141e:	d8 f0       	brcs	.+54     	; 0x1456 <vfprintf+0xbe>
    1420:	8b 32       	cpi	r24, 0x2B	; 43
    1422:	79 f0       	breq	.+30     	; 0x1442 <vfprintf+0xaa>
    1424:	38 f4       	brcc	.+14     	; 0x1434 <vfprintf+0x9c>
    1426:	80 32       	cpi	r24, 0x20	; 32
    1428:	79 f0       	breq	.+30     	; 0x1448 <vfprintf+0xb0>
    142a:	83 32       	cpi	r24, 0x23	; 35
    142c:	a1 f4       	brne	.+40     	; 0x1456 <vfprintf+0xbe>
    142e:	23 2d       	mov	r18, r3
    1430:	20 61       	ori	r18, 0x10	; 16
    1432:	1d c0       	rjmp	.+58     	; 0x146e <vfprintf+0xd6>
    1434:	8d 32       	cpi	r24, 0x2D	; 45
    1436:	61 f0       	breq	.+24     	; 0x1450 <vfprintf+0xb8>
    1438:	80 33       	cpi	r24, 0x30	; 48
    143a:	69 f4       	brne	.+26     	; 0x1456 <vfprintf+0xbe>
    143c:	23 2d       	mov	r18, r3
    143e:	21 60       	ori	r18, 0x01	; 1
    1440:	16 c0       	rjmp	.+44     	; 0x146e <vfprintf+0xd6>
    1442:	83 2d       	mov	r24, r3
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	38 2e       	mov	r3, r24
    1448:	e3 2d       	mov	r30, r3
    144a:	e4 60       	ori	r30, 0x04	; 4
    144c:	3e 2e       	mov	r3, r30
    144e:	2a c0       	rjmp	.+84     	; 0x14a4 <vfprintf+0x10c>
    1450:	f3 2d       	mov	r31, r3
    1452:	f8 60       	ori	r31, 0x08	; 8
    1454:	1d c0       	rjmp	.+58     	; 0x1490 <vfprintf+0xf8>
    1456:	37 fc       	sbrc	r3, 7
    1458:	2d c0       	rjmp	.+90     	; 0x14b4 <vfprintf+0x11c>
    145a:	20 ed       	ldi	r18, 0xD0	; 208
    145c:	28 0f       	add	r18, r24
    145e:	2a 30       	cpi	r18, 0x0A	; 10
    1460:	40 f0       	brcs	.+16     	; 0x1472 <vfprintf+0xda>
    1462:	8e 32       	cpi	r24, 0x2E	; 46
    1464:	b9 f4       	brne	.+46     	; 0x1494 <vfprintf+0xfc>
    1466:	36 fc       	sbrc	r3, 6
    1468:	75 c1       	rjmp	.+746    	; 0x1754 <vfprintf+0x3bc>
    146a:	23 2d       	mov	r18, r3
    146c:	20 64       	ori	r18, 0x40	; 64
    146e:	32 2e       	mov	r3, r18
    1470:	19 c0       	rjmp	.+50     	; 0x14a4 <vfprintf+0x10c>
    1472:	36 fe       	sbrs	r3, 6
    1474:	06 c0       	rjmp	.+12     	; 0x1482 <vfprintf+0xea>
    1476:	8a e0       	ldi	r24, 0x0A	; 10
    1478:	98 9e       	mul	r9, r24
    147a:	20 0d       	add	r18, r0
    147c:	11 24       	eor	r1, r1
    147e:	92 2e       	mov	r9, r18
    1480:	11 c0       	rjmp	.+34     	; 0x14a4 <vfprintf+0x10c>
    1482:	ea e0       	ldi	r30, 0x0A	; 10
    1484:	2e 9e       	mul	r2, r30
    1486:	20 0d       	add	r18, r0
    1488:	11 24       	eor	r1, r1
    148a:	22 2e       	mov	r2, r18
    148c:	f3 2d       	mov	r31, r3
    148e:	f0 62       	ori	r31, 0x20	; 32
    1490:	3f 2e       	mov	r3, r31
    1492:	08 c0       	rjmp	.+16     	; 0x14a4 <vfprintf+0x10c>
    1494:	8c 36       	cpi	r24, 0x6C	; 108
    1496:	21 f4       	brne	.+8      	; 0x14a0 <vfprintf+0x108>
    1498:	83 2d       	mov	r24, r3
    149a:	80 68       	ori	r24, 0x80	; 128
    149c:	38 2e       	mov	r3, r24
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <vfprintf+0x10c>
    14a0:	88 36       	cpi	r24, 0x68	; 104
    14a2:	41 f4       	brne	.+16     	; 0x14b4 <vfprintf+0x11c>
    14a4:	f7 01       	movw	r30, r14
    14a6:	93 fd       	sbrc	r25, 3
    14a8:	85 91       	lpm	r24, Z+
    14aa:	93 ff       	sbrs	r25, 3
    14ac:	81 91       	ld	r24, Z+
    14ae:	7f 01       	movw	r14, r30
    14b0:	81 11       	cpse	r24, r1
    14b2:	b3 cf       	rjmp	.-154    	; 0x141a <vfprintf+0x82>
    14b4:	98 2f       	mov	r25, r24
    14b6:	9f 7d       	andi	r25, 0xDF	; 223
    14b8:	95 54       	subi	r25, 0x45	; 69
    14ba:	93 30       	cpi	r25, 0x03	; 3
    14bc:	28 f4       	brcc	.+10     	; 0x14c8 <vfprintf+0x130>
    14be:	0c 5f       	subi	r16, 0xFC	; 252
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	9f e3       	ldi	r25, 0x3F	; 63
    14c4:	99 83       	std	Y+1, r25	; 0x01
    14c6:	0d c0       	rjmp	.+26     	; 0x14e2 <vfprintf+0x14a>
    14c8:	83 36       	cpi	r24, 0x63	; 99
    14ca:	31 f0       	breq	.+12     	; 0x14d8 <vfprintf+0x140>
    14cc:	83 37       	cpi	r24, 0x73	; 115
    14ce:	71 f0       	breq	.+28     	; 0x14ec <vfprintf+0x154>
    14d0:	83 35       	cpi	r24, 0x53	; 83
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <vfprintf+0x13e>
    14d4:	55 c0       	rjmp	.+170    	; 0x1580 <vfprintf+0x1e8>
    14d6:	20 c0       	rjmp	.+64     	; 0x1518 <vfprintf+0x180>
    14d8:	f8 01       	movw	r30, r16
    14da:	80 81       	ld	r24, Z
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	0e 5f       	subi	r16, 0xFE	; 254
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	88 24       	eor	r8, r8
    14e4:	83 94       	inc	r8
    14e6:	91 2c       	mov	r9, r1
    14e8:	53 01       	movw	r10, r6
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <vfprintf+0x178>
    14ec:	28 01       	movw	r4, r16
    14ee:	f2 e0       	ldi	r31, 0x02	; 2
    14f0:	4f 0e       	add	r4, r31
    14f2:	51 1c       	adc	r5, r1
    14f4:	f8 01       	movw	r30, r16
    14f6:	a0 80       	ld	r10, Z
    14f8:	b1 80       	ldd	r11, Z+1	; 0x01
    14fa:	36 fe       	sbrs	r3, 6
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <vfprintf+0x16c>
    14fe:	69 2d       	mov	r22, r9
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <vfprintf+0x170>
    1504:	6f ef       	ldi	r22, 0xFF	; 255
    1506:	7f ef       	ldi	r23, 0xFF	; 255
    1508:	c5 01       	movw	r24, r10
    150a:	4e d1       	rcall	.+668    	; 0x17a8 <strnlen>
    150c:	4c 01       	movw	r8, r24
    150e:	82 01       	movw	r16, r4
    1510:	f3 2d       	mov	r31, r3
    1512:	ff 77       	andi	r31, 0x7F	; 127
    1514:	3f 2e       	mov	r3, r31
    1516:	15 c0       	rjmp	.+42     	; 0x1542 <vfprintf+0x1aa>
    1518:	28 01       	movw	r4, r16
    151a:	22 e0       	ldi	r18, 0x02	; 2
    151c:	42 0e       	add	r4, r18
    151e:	51 1c       	adc	r5, r1
    1520:	f8 01       	movw	r30, r16
    1522:	a0 80       	ld	r10, Z
    1524:	b1 80       	ldd	r11, Z+1	; 0x01
    1526:	36 fe       	sbrs	r3, 6
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <vfprintf+0x198>
    152a:	69 2d       	mov	r22, r9
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x19c>
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	c5 01       	movw	r24, r10
    1536:	2d d1       	rcall	.+602    	; 0x1792 <strnlen_P>
    1538:	4c 01       	movw	r8, r24
    153a:	f3 2d       	mov	r31, r3
    153c:	f0 68       	ori	r31, 0x80	; 128
    153e:	3f 2e       	mov	r3, r31
    1540:	82 01       	movw	r16, r4
    1542:	33 fc       	sbrc	r3, 3
    1544:	19 c0       	rjmp	.+50     	; 0x1578 <vfprintf+0x1e0>
    1546:	82 2d       	mov	r24, r2
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 16       	cp	r8, r24
    154c:	99 06       	cpc	r9, r25
    154e:	a0 f4       	brcc	.+40     	; 0x1578 <vfprintf+0x1e0>
    1550:	b6 01       	movw	r22, r12
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	33 d1       	rcall	.+614    	; 0x17be <fputc>
    1558:	2a 94       	dec	r2
    155a:	f5 cf       	rjmp	.-22     	; 0x1546 <vfprintf+0x1ae>
    155c:	f5 01       	movw	r30, r10
    155e:	37 fc       	sbrc	r3, 7
    1560:	85 91       	lpm	r24, Z+
    1562:	37 fe       	sbrs	r3, 7
    1564:	81 91       	ld	r24, Z+
    1566:	5f 01       	movw	r10, r30
    1568:	b6 01       	movw	r22, r12
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	28 d1       	rcall	.+592    	; 0x17be <fputc>
    156e:	21 10       	cpse	r2, r1
    1570:	2a 94       	dec	r2
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	82 1a       	sub	r8, r18
    1576:	91 08       	sbc	r9, r1
    1578:	81 14       	cp	r8, r1
    157a:	91 04       	cpc	r9, r1
    157c:	79 f7       	brne	.-34     	; 0x155c <vfprintf+0x1c4>
    157e:	e1 c0       	rjmp	.+450    	; 0x1742 <vfprintf+0x3aa>
    1580:	84 36       	cpi	r24, 0x64	; 100
    1582:	11 f0       	breq	.+4      	; 0x1588 <vfprintf+0x1f0>
    1584:	89 36       	cpi	r24, 0x69	; 105
    1586:	39 f5       	brne	.+78     	; 0x15d6 <vfprintf+0x23e>
    1588:	f8 01       	movw	r30, r16
    158a:	37 fe       	sbrs	r3, 7
    158c:	07 c0       	rjmp	.+14     	; 0x159c <vfprintf+0x204>
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	0c 5f       	subi	r16, 0xFC	; 252
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	08 c0       	rjmp	.+16     	; 0x15ac <vfprintf+0x214>
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	07 2e       	mov	r0, r23
    15a2:	00 0c       	add	r0, r0
    15a4:	88 0b       	sbc	r24, r24
    15a6:	99 0b       	sbc	r25, r25
    15a8:	0e 5f       	subi	r16, 0xFE	; 254
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	f3 2d       	mov	r31, r3
    15ae:	ff 76       	andi	r31, 0x6F	; 111
    15b0:	3f 2e       	mov	r3, r31
    15b2:	97 ff       	sbrs	r25, 7
    15b4:	09 c0       	rjmp	.+18     	; 0x15c8 <vfprintf+0x230>
    15b6:	90 95       	com	r25
    15b8:	80 95       	com	r24
    15ba:	70 95       	com	r23
    15bc:	61 95       	neg	r22
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	8f 4f       	sbci	r24, 0xFF	; 255
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	f0 68       	ori	r31, 0x80	; 128
    15c6:	3f 2e       	mov	r3, r31
    15c8:	2a e0       	ldi	r18, 0x0A	; 10
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	a3 01       	movw	r20, r6
    15ce:	33 d1       	rcall	.+614    	; 0x1836 <__ultoa_invert>
    15d0:	88 2e       	mov	r8, r24
    15d2:	86 18       	sub	r8, r6
    15d4:	44 c0       	rjmp	.+136    	; 0x165e <vfprintf+0x2c6>
    15d6:	85 37       	cpi	r24, 0x75	; 117
    15d8:	31 f4       	brne	.+12     	; 0x15e6 <vfprintf+0x24e>
    15da:	23 2d       	mov	r18, r3
    15dc:	2f 7e       	andi	r18, 0xEF	; 239
    15de:	b2 2e       	mov	r11, r18
    15e0:	2a e0       	ldi	r18, 0x0A	; 10
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	25 c0       	rjmp	.+74     	; 0x1630 <vfprintf+0x298>
    15e6:	93 2d       	mov	r25, r3
    15e8:	99 7f       	andi	r25, 0xF9	; 249
    15ea:	b9 2e       	mov	r11, r25
    15ec:	8f 36       	cpi	r24, 0x6F	; 111
    15ee:	c1 f0       	breq	.+48     	; 0x1620 <vfprintf+0x288>
    15f0:	18 f4       	brcc	.+6      	; 0x15f8 <vfprintf+0x260>
    15f2:	88 35       	cpi	r24, 0x58	; 88
    15f4:	79 f0       	breq	.+30     	; 0x1614 <vfprintf+0x27c>
    15f6:	ae c0       	rjmp	.+348    	; 0x1754 <vfprintf+0x3bc>
    15f8:	80 37       	cpi	r24, 0x70	; 112
    15fa:	19 f0       	breq	.+6      	; 0x1602 <vfprintf+0x26a>
    15fc:	88 37       	cpi	r24, 0x78	; 120
    15fe:	21 f0       	breq	.+8      	; 0x1608 <vfprintf+0x270>
    1600:	a9 c0       	rjmp	.+338    	; 0x1754 <vfprintf+0x3bc>
    1602:	e9 2f       	mov	r30, r25
    1604:	e0 61       	ori	r30, 0x10	; 16
    1606:	be 2e       	mov	r11, r30
    1608:	b4 fe       	sbrs	r11, 4
    160a:	0d c0       	rjmp	.+26     	; 0x1626 <vfprintf+0x28e>
    160c:	fb 2d       	mov	r31, r11
    160e:	f4 60       	ori	r31, 0x04	; 4
    1610:	bf 2e       	mov	r11, r31
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <vfprintf+0x28e>
    1614:	34 fe       	sbrs	r3, 4
    1616:	0a c0       	rjmp	.+20     	; 0x162c <vfprintf+0x294>
    1618:	29 2f       	mov	r18, r25
    161a:	26 60       	ori	r18, 0x06	; 6
    161c:	b2 2e       	mov	r11, r18
    161e:	06 c0       	rjmp	.+12     	; 0x162c <vfprintf+0x294>
    1620:	28 e0       	ldi	r18, 0x08	; 8
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <vfprintf+0x298>
    1626:	20 e1       	ldi	r18, 0x10	; 16
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0x298>
    162c:	20 e1       	ldi	r18, 0x10	; 16
    162e:	32 e0       	ldi	r19, 0x02	; 2
    1630:	f8 01       	movw	r30, r16
    1632:	b7 fe       	sbrs	r11, 7
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <vfprintf+0x2ac>
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	0c 5f       	subi	r16, 0xFC	; 252
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <vfprintf+0x2b8>
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 5f       	subi	r16, 0xFE	; 254
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	a3 01       	movw	r20, r6
    1652:	f1 d0       	rcall	.+482    	; 0x1836 <__ultoa_invert>
    1654:	88 2e       	mov	r8, r24
    1656:	86 18       	sub	r8, r6
    1658:	fb 2d       	mov	r31, r11
    165a:	ff 77       	andi	r31, 0x7F	; 127
    165c:	3f 2e       	mov	r3, r31
    165e:	36 fe       	sbrs	r3, 6
    1660:	0d c0       	rjmp	.+26     	; 0x167c <vfprintf+0x2e4>
    1662:	23 2d       	mov	r18, r3
    1664:	2e 7f       	andi	r18, 0xFE	; 254
    1666:	a2 2e       	mov	r10, r18
    1668:	89 14       	cp	r8, r9
    166a:	58 f4       	brcc	.+22     	; 0x1682 <vfprintf+0x2ea>
    166c:	34 fe       	sbrs	r3, 4
    166e:	0b c0       	rjmp	.+22     	; 0x1686 <vfprintf+0x2ee>
    1670:	32 fc       	sbrc	r3, 2
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <vfprintf+0x2ee>
    1674:	83 2d       	mov	r24, r3
    1676:	8e 7e       	andi	r24, 0xEE	; 238
    1678:	a8 2e       	mov	r10, r24
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <vfprintf+0x2ee>
    167c:	b8 2c       	mov	r11, r8
    167e:	a3 2c       	mov	r10, r3
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <vfprintf+0x2f0>
    1682:	b8 2c       	mov	r11, r8
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <vfprintf+0x2f0>
    1686:	b9 2c       	mov	r11, r9
    1688:	a4 fe       	sbrs	r10, 4
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <vfprintf+0x312>
    168c:	fe 01       	movw	r30, r28
    168e:	e8 0d       	add	r30, r8
    1690:	f1 1d       	adc	r31, r1
    1692:	80 81       	ld	r24, Z
    1694:	80 33       	cpi	r24, 0x30	; 48
    1696:	21 f4       	brne	.+8      	; 0x16a0 <vfprintf+0x308>
    1698:	9a 2d       	mov	r25, r10
    169a:	99 7e       	andi	r25, 0xE9	; 233
    169c:	a9 2e       	mov	r10, r25
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <vfprintf+0x31a>
    16a0:	a2 fe       	sbrs	r10, 2
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <vfprintf+0x318>
    16a4:	b3 94       	inc	r11
    16a6:	b3 94       	inc	r11
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <vfprintf+0x31a>
    16aa:	8a 2d       	mov	r24, r10
    16ac:	86 78       	andi	r24, 0x86	; 134
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <vfprintf+0x31a>
    16b0:	b3 94       	inc	r11
    16b2:	a3 fc       	sbrc	r10, 3
    16b4:	10 c0       	rjmp	.+32     	; 0x16d6 <vfprintf+0x33e>
    16b6:	a0 fe       	sbrs	r10, 0
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <vfprintf+0x32e>
    16ba:	b2 14       	cp	r11, r2
    16bc:	80 f4       	brcc	.+32     	; 0x16de <vfprintf+0x346>
    16be:	28 0c       	add	r2, r8
    16c0:	92 2c       	mov	r9, r2
    16c2:	9b 18       	sub	r9, r11
    16c4:	0d c0       	rjmp	.+26     	; 0x16e0 <vfprintf+0x348>
    16c6:	b2 14       	cp	r11, r2
    16c8:	58 f4       	brcc	.+22     	; 0x16e0 <vfprintf+0x348>
    16ca:	b6 01       	movw	r22, r12
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	76 d0       	rcall	.+236    	; 0x17be <fputc>
    16d2:	b3 94       	inc	r11
    16d4:	f8 cf       	rjmp	.-16     	; 0x16c6 <vfprintf+0x32e>
    16d6:	b2 14       	cp	r11, r2
    16d8:	18 f4       	brcc	.+6      	; 0x16e0 <vfprintf+0x348>
    16da:	2b 18       	sub	r2, r11
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x34a>
    16de:	98 2c       	mov	r9, r8
    16e0:	21 2c       	mov	r2, r1
    16e2:	a4 fe       	sbrs	r10, 4
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <vfprintf+0x36c>
    16e6:	b6 01       	movw	r22, r12
    16e8:	80 e3       	ldi	r24, 0x30	; 48
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	68 d0       	rcall	.+208    	; 0x17be <fputc>
    16ee:	a2 fe       	sbrs	r10, 2
    16f0:	16 c0       	rjmp	.+44     	; 0x171e <vfprintf+0x386>
    16f2:	a1 fc       	sbrc	r10, 1
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <vfprintf+0x364>
    16f6:	88 e7       	ldi	r24, 0x78	; 120
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0x368>
    16fc:	88 e5       	ldi	r24, 0x58	; 88
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b6 01       	movw	r22, r12
    1702:	0c c0       	rjmp	.+24     	; 0x171c <vfprintf+0x384>
    1704:	8a 2d       	mov	r24, r10
    1706:	86 78       	andi	r24, 0x86	; 134
    1708:	51 f0       	breq	.+20     	; 0x171e <vfprintf+0x386>
    170a:	a1 fe       	sbrs	r10, 1
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x37a>
    170e:	8b e2       	ldi	r24, 0x2B	; 43
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <vfprintf+0x37c>
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	a7 fc       	sbrc	r10, 7
    1716:	8d e2       	ldi	r24, 0x2D	; 45
    1718:	b6 01       	movw	r22, r12
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	50 d0       	rcall	.+160    	; 0x17be <fputc>
    171e:	89 14       	cp	r8, r9
    1720:	30 f4       	brcc	.+12     	; 0x172e <vfprintf+0x396>
    1722:	b6 01       	movw	r22, r12
    1724:	80 e3       	ldi	r24, 0x30	; 48
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	4a d0       	rcall	.+148    	; 0x17be <fputc>
    172a:	9a 94       	dec	r9
    172c:	f8 cf       	rjmp	.-16     	; 0x171e <vfprintf+0x386>
    172e:	8a 94       	dec	r8
    1730:	f3 01       	movw	r30, r6
    1732:	e8 0d       	add	r30, r8
    1734:	f1 1d       	adc	r31, r1
    1736:	80 81       	ld	r24, Z
    1738:	b6 01       	movw	r22, r12
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	40 d0       	rcall	.+128    	; 0x17be <fputc>
    173e:	81 10       	cpse	r8, r1
    1740:	f6 cf       	rjmp	.-20     	; 0x172e <vfprintf+0x396>
    1742:	22 20       	and	r2, r2
    1744:	09 f4       	brne	.+2      	; 0x1748 <vfprintf+0x3b0>
    1746:	4e ce       	rjmp	.-868    	; 0x13e4 <vfprintf+0x4c>
    1748:	b6 01       	movw	r22, r12
    174a:	80 e2       	ldi	r24, 0x20	; 32
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	37 d0       	rcall	.+110    	; 0x17be <fputc>
    1750:	2a 94       	dec	r2
    1752:	f7 cf       	rjmp	.-18     	; 0x1742 <vfprintf+0x3aa>
    1754:	f6 01       	movw	r30, r12
    1756:	86 81       	ldd	r24, Z+6	; 0x06
    1758:	97 81       	ldd	r25, Z+7	; 0x07
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x3c8>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	9f ef       	ldi	r25, 0xFF	; 255
    1760:	2b 96       	adiw	r28, 0x0b	; 11
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	df 90       	pop	r13
    177a:	cf 90       	pop	r12
    177c:	bf 90       	pop	r11
    177e:	af 90       	pop	r10
    1780:	9f 90       	pop	r9
    1782:	8f 90       	pop	r8
    1784:	7f 90       	pop	r7
    1786:	6f 90       	pop	r6
    1788:	5f 90       	pop	r5
    178a:	4f 90       	pop	r4
    178c:	3f 90       	pop	r3
    178e:	2f 90       	pop	r2
    1790:	08 95       	ret

00001792 <strnlen_P>:
    1792:	fc 01       	movw	r30, r24
    1794:	05 90       	lpm	r0, Z+
    1796:	61 50       	subi	r22, 0x01	; 1
    1798:	70 40       	sbci	r23, 0x00	; 0
    179a:	01 10       	cpse	r0, r1
    179c:	d8 f7       	brcc	.-10     	; 0x1794 <strnlen_P+0x2>
    179e:	80 95       	com	r24
    17a0:	90 95       	com	r25
    17a2:	8e 0f       	add	r24, r30
    17a4:	9f 1f       	adc	r25, r31
    17a6:	08 95       	ret

000017a8 <strnlen>:
    17a8:	fc 01       	movw	r30, r24
    17aa:	61 50       	subi	r22, 0x01	; 1
    17ac:	70 40       	sbci	r23, 0x00	; 0
    17ae:	01 90       	ld	r0, Z+
    17b0:	01 10       	cpse	r0, r1
    17b2:	d8 f7       	brcc	.-10     	; 0x17aa <strnlen+0x2>
    17b4:	80 95       	com	r24
    17b6:	90 95       	com	r25
    17b8:	8e 0f       	add	r24, r30
    17ba:	9f 1f       	adc	r25, r31
    17bc:	08 95       	ret

000017be <fputc>:
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	fb 01       	movw	r30, r22
    17c8:	23 81       	ldd	r18, Z+3	; 0x03
    17ca:	21 fd       	sbrc	r18, 1
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <fputc+0x16>
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	2c c0       	rjmp	.+88     	; 0x182c <fputc+0x6e>
    17d4:	22 ff       	sbrs	r18, 2
    17d6:	16 c0       	rjmp	.+44     	; 0x1804 <fputc+0x46>
    17d8:	46 81       	ldd	r20, Z+6	; 0x06
    17da:	57 81       	ldd	r21, Z+7	; 0x07
    17dc:	24 81       	ldd	r18, Z+4	; 0x04
    17de:	35 81       	ldd	r19, Z+5	; 0x05
    17e0:	42 17       	cp	r20, r18
    17e2:	53 07       	cpc	r21, r19
    17e4:	44 f4       	brge	.+16     	; 0x17f6 <fputc+0x38>
    17e6:	a0 81       	ld	r26, Z
    17e8:	b1 81       	ldd	r27, Z+1	; 0x01
    17ea:	9d 01       	movw	r18, r26
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	31 83       	std	Z+1, r19	; 0x01
    17f2:	20 83       	st	Z, r18
    17f4:	8c 93       	st	X, r24
    17f6:	26 81       	ldd	r18, Z+6	; 0x06
    17f8:	37 81       	ldd	r19, Z+7	; 0x07
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	37 83       	std	Z+7, r19	; 0x07
    1800:	26 83       	std	Z+6, r18	; 0x06
    1802:	14 c0       	rjmp	.+40     	; 0x182c <fputc+0x6e>
    1804:	8b 01       	movw	r16, r22
    1806:	ec 01       	movw	r28, r24
    1808:	fb 01       	movw	r30, r22
    180a:	00 84       	ldd	r0, Z+8	; 0x08
    180c:	f1 85       	ldd	r31, Z+9	; 0x09
    180e:	e0 2d       	mov	r30, r0
    1810:	09 95       	icall
    1812:	89 2b       	or	r24, r25
    1814:	e1 f6       	brne	.-72     	; 0x17ce <fputc+0x10>
    1816:	d8 01       	movw	r26, r16
    1818:	16 96       	adiw	r26, 0x06	; 6
    181a:	8d 91       	ld	r24, X+
    181c:	9c 91       	ld	r25, X
    181e:	17 97       	sbiw	r26, 0x07	; 7
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	17 96       	adiw	r26, 0x07	; 7
    1824:	9c 93       	st	X, r25
    1826:	8e 93       	st	-X, r24
    1828:	16 97       	sbiw	r26, 0x06	; 6
    182a:	ce 01       	movw	r24, r28
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	08 95       	ret

00001836 <__ultoa_invert>:
    1836:	fa 01       	movw	r30, r20
    1838:	aa 27       	eor	r26, r26
    183a:	28 30       	cpi	r18, 0x08	; 8
    183c:	51 f1       	breq	.+84     	; 0x1892 <__ultoa_invert+0x5c>
    183e:	20 31       	cpi	r18, 0x10	; 16
    1840:	81 f1       	breq	.+96     	; 0x18a2 <__ultoa_invert+0x6c>
    1842:	e8 94       	clt
    1844:	6f 93       	push	r22
    1846:	6e 7f       	andi	r22, 0xFE	; 254
    1848:	6e 5f       	subi	r22, 0xFE	; 254
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	8f 4f       	sbci	r24, 0xFF	; 255
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	af 4f       	sbci	r26, 0xFF	; 255
    1852:	b1 e0       	ldi	r27, 0x01	; 1
    1854:	3e d0       	rcall	.+124    	; 0x18d2 <__ultoa_invert+0x9c>
    1856:	b4 e0       	ldi	r27, 0x04	; 4
    1858:	3c d0       	rcall	.+120    	; 0x18d2 <__ultoa_invert+0x9c>
    185a:	67 0f       	add	r22, r23
    185c:	78 1f       	adc	r23, r24
    185e:	89 1f       	adc	r24, r25
    1860:	9a 1f       	adc	r25, r26
    1862:	a1 1d       	adc	r26, r1
    1864:	68 0f       	add	r22, r24
    1866:	79 1f       	adc	r23, r25
    1868:	8a 1f       	adc	r24, r26
    186a:	91 1d       	adc	r25, r1
    186c:	a1 1d       	adc	r26, r1
    186e:	6a 0f       	add	r22, r26
    1870:	71 1d       	adc	r23, r1
    1872:	81 1d       	adc	r24, r1
    1874:	91 1d       	adc	r25, r1
    1876:	a1 1d       	adc	r26, r1
    1878:	20 d0       	rcall	.+64     	; 0x18ba <__ultoa_invert+0x84>
    187a:	09 f4       	brne	.+2      	; 0x187e <__ultoa_invert+0x48>
    187c:	68 94       	set
    187e:	3f 91       	pop	r19
    1880:	2a e0       	ldi	r18, 0x0A	; 10
    1882:	26 9f       	mul	r18, r22
    1884:	11 24       	eor	r1, r1
    1886:	30 19       	sub	r19, r0
    1888:	30 5d       	subi	r19, 0xD0	; 208
    188a:	31 93       	st	Z+, r19
    188c:	de f6       	brtc	.-74     	; 0x1844 <__ultoa_invert+0xe>
    188e:	cf 01       	movw	r24, r30
    1890:	08 95       	ret
    1892:	46 2f       	mov	r20, r22
    1894:	47 70       	andi	r20, 0x07	; 7
    1896:	40 5d       	subi	r20, 0xD0	; 208
    1898:	41 93       	st	Z+, r20
    189a:	b3 e0       	ldi	r27, 0x03	; 3
    189c:	0f d0       	rcall	.+30     	; 0x18bc <__ultoa_invert+0x86>
    189e:	c9 f7       	brne	.-14     	; 0x1892 <__ultoa_invert+0x5c>
    18a0:	f6 cf       	rjmp	.-20     	; 0x188e <__ultoa_invert+0x58>
    18a2:	46 2f       	mov	r20, r22
    18a4:	4f 70       	andi	r20, 0x0F	; 15
    18a6:	40 5d       	subi	r20, 0xD0	; 208
    18a8:	4a 33       	cpi	r20, 0x3A	; 58
    18aa:	18 f0       	brcs	.+6      	; 0x18b2 <__ultoa_invert+0x7c>
    18ac:	49 5d       	subi	r20, 0xD9	; 217
    18ae:	31 fd       	sbrc	r19, 1
    18b0:	40 52       	subi	r20, 0x20	; 32
    18b2:	41 93       	st	Z+, r20
    18b4:	02 d0       	rcall	.+4      	; 0x18ba <__ultoa_invert+0x84>
    18b6:	a9 f7       	brne	.-22     	; 0x18a2 <__ultoa_invert+0x6c>
    18b8:	ea cf       	rjmp	.-44     	; 0x188e <__ultoa_invert+0x58>
    18ba:	b4 e0       	ldi	r27, 0x04	; 4
    18bc:	a6 95       	lsr	r26
    18be:	97 95       	ror	r25
    18c0:	87 95       	ror	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	ba 95       	dec	r27
    18c8:	c9 f7       	brne	.-14     	; 0x18bc <__ultoa_invert+0x86>
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	61 05       	cpc	r22, r1
    18ce:	71 05       	cpc	r23, r1
    18d0:	08 95       	ret
    18d2:	9b 01       	movw	r18, r22
    18d4:	ac 01       	movw	r20, r24
    18d6:	0a 2e       	mov	r0, r26
    18d8:	06 94       	lsr	r0
    18da:	57 95       	ror	r21
    18dc:	47 95       	ror	r20
    18de:	37 95       	ror	r19
    18e0:	27 95       	ror	r18
    18e2:	ba 95       	dec	r27
    18e4:	c9 f7       	brne	.-14     	; 0x18d8 <__ultoa_invert+0xa2>
    18e6:	62 0f       	add	r22, r18
    18e8:	73 1f       	adc	r23, r19
    18ea:	84 1f       	adc	r24, r20
    18ec:	95 1f       	adc	r25, r21
    18ee:	a0 1d       	adc	r26, r0
    18f0:	08 95       	ret

000018f2 <_exit>:
    18f2:	f8 94       	cli

000018f4 <__stop_program>:
    18f4:	ff cf       	rjmp	.-2      	; 0x18f4 <__stop_program>
